{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1K4ciqsdKLRGZ4UXiIvb3Qzcpxqmu7A0E",
      "authorship_tag": "ABX9TyM30M1eFmEGjT2N2SJy8EQz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EngSoftwareEngineer/javascript-course-repo/blob/main/GNN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this notebook I create a dataframe with 19 points of interest of Thessaloniki"
      ],
      "metadata": {
        "id": "NWEyONMwKO02"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ae1jC4mqIQc5",
        "outputId": "3ce3ba77-a690-4445-de83-444e7ce430fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Basic Analysis and Visualization\n",
        "import pandas as pd\n",
        "from geopy.geocoders import Nominatim\n",
        "import geopy.distance\n",
        "import folium\n",
        "Project_Path='Local Path'\n"
      ],
      "metadata": {
        "id": "WnppMa4XIhEy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The file 'Points_of_Interest.txt' contains the names of 19 points of interest as well as their addresses. For some points there was no clear address so I put their coordinates. I am loading the file 'Points_of_Interest.txt' into the Dataframe 'Points_Of_Interest'.\n",
        "\n"
      ],
      "metadata": {
        "id": "WnG1VPBYKwoo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Points_Of_Interest=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Points_of_Interest.txt',sep='-',names=['Point','Adress'])\n",
        "Point_Adresses = Points_Of_Interest['Adress'].values.tolist()\n",
        "Point_Names = Points_Of_Interest['Point'].values.tolist()\n"
      ],
      "metadata": {
        "id": "MT1bhpn-IldO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "With the help of geopy I use the addresses and find the coordinates of 19 points. I then create and save the DataFrame 'Sights.csv', which contains the names and coordinates.\n",
        "\n"
      ],
      "metadata": {
        "id": "NFN9SLmTK2zW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Sights_List=[]\n",
        "for i in range (0,len(Point_Adresses)):\n",
        "    address=Point_Adresses[i]\n",
        "    geolocator = Nominatim(user_agent=\"Skg_Point_Of_Iterest\")\n",
        "    location = geolocator.geocode(address)\n",
        "    Sights_List.append([Point_Names[i],location.latitude,location.longitude])\n",
        "\n",
        "Sights = pd.DataFrame (Sights_List, columns = ['Sight','Latitude','Longitude'])\n",
        "Sights.to_csv('/content/drive/MyDrive/Thesis/Data/Sights.csv')\n",
        "Sights"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "NmlFJkXBI3Wn",
        "outputId": "a210b6f2-f692-4fc1-a0e1-fa947014444d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             Sight   Latitude  Longitude\n",
              "0   Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»  40.634060  22.955441\n",
              "1                                           Λιμάνι  40.632952  22.935581\n",
              "2                           Δημαρχείο Θεσσαλονίκης  40.623490  22.953888\n",
              "3                                    Λευκός Πύργος  40.626427  22.948388\n",
              "4                                     Αγορά Καπάνι  40.635973  22.942656\n",
              "5                                         Λαδάδικα  40.635470  22.936051\n",
              "6                                   Πλατεία Άθωνος  40.634906  22.944226\n",
              "7                             Πλατεία Αριστοτέλους  40.632326  22.940797\n",
              "8                                          Ροτόντα  40.633311  22.952868\n",
              "9                             Πλατεία Αγίας Σοφίας  40.633686  22.945700\n",
              "10                             Πλατεία Αντιγονιδών  40.640435  22.940401\n",
              "11                       Μουσείο Μακεδονικού Αγώνα  40.630829  22.943583\n",
              "12                               Πλατεία Ναυαρίνου  40.630714  22.948777\n",
              "13                                      Πάρκο ΧΑΝΘ  40.626201  22.951040\n",
              "14                      Ιερός Ναός Αγίου Δημητρίου  40.639213  22.946153\n",
              "15                                             ΔΕΘ  40.627727  22.955688\n",
              "16                                             ΑΠΘ  40.631575  22.955452\n",
              "17                     Άγαλμα Ελευθερίου Βενιζέλου  40.636154  22.942712\n",
              "18                      Ρωμαϊκή Αγορά Θεσσαλονίκης  40.638497  22.946047"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e499b1cd-e9d3-4dc9-8797-36143a3ece17\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sight</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»</td>\n",
              "      <td>40.634060</td>\n",
              "      <td>22.955441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Λιμάνι</td>\n",
              "      <td>40.632952</td>\n",
              "      <td>22.935581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Δημαρχείο Θεσσαλονίκης</td>\n",
              "      <td>40.623490</td>\n",
              "      <td>22.953888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Λευκός Πύργος</td>\n",
              "      <td>40.626427</td>\n",
              "      <td>22.948388</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Αγορά Καπάνι</td>\n",
              "      <td>40.635973</td>\n",
              "      <td>22.942656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Λαδάδικα</td>\n",
              "      <td>40.635470</td>\n",
              "      <td>22.936051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Πλατεία Άθωνος</td>\n",
              "      <td>40.634906</td>\n",
              "      <td>22.944226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Πλατεία Αριστοτέλους</td>\n",
              "      <td>40.632326</td>\n",
              "      <td>22.940797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Ροτόντα</td>\n",
              "      <td>40.633311</td>\n",
              "      <td>22.952868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Πλατεία Αγίας Σοφίας</td>\n",
              "      <td>40.633686</td>\n",
              "      <td>22.945700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Πλατεία Αντιγονιδών</td>\n",
              "      <td>40.640435</td>\n",
              "      <td>22.940401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Μουσείο Μακεδονικού Αγώνα</td>\n",
              "      <td>40.630829</td>\n",
              "      <td>22.943583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Πλατεία Ναυαρίνου</td>\n",
              "      <td>40.630714</td>\n",
              "      <td>22.948777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Πάρκο ΧΑΝΘ</td>\n",
              "      <td>40.626201</td>\n",
              "      <td>22.951040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Ιερός Ναός Αγίου Δημητρίου</td>\n",
              "      <td>40.639213</td>\n",
              "      <td>22.946153</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>ΔΕΘ</td>\n",
              "      <td>40.627727</td>\n",
              "      <td>22.955688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>ΑΠΘ</td>\n",
              "      <td>40.631575</td>\n",
              "      <td>22.955452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Άγαλμα Ελευθερίου Βενιζέλου</td>\n",
              "      <td>40.636154</td>\n",
              "      <td>22.942712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Ρωμαϊκή Αγορά Θεσσαλονίκης</td>\n",
              "      <td>40.638497</td>\n",
              "      <td>22.946047</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e499b1cd-e9d3-4dc9-8797-36143a3ece17')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e499b1cd-e9d3-4dc9-8797-36143a3ece17 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e499b1cd-e9d3-4dc9-8797-36143a3ece17');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-38474529-5f06-4ecb-8be8-49105218620e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38474529-5f06-4ecb-8be8-49105218620e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-38474529-5f06-4ecb-8be8-49105218620e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I use folium to print a map of the city showing the Points Of Interest, Each circle corresponds to a Sight. If you select a circle the name from that particular Sight will appear.\n",
        "\n"
      ],
      "metadata": {
        "id": "vBtaORtgK6Qn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Map_Points_Of_Interest = folium.Map([40.632778, 22.946944],tiles=\"OpenStreetMap\", zoom_start=15)\n",
        "for i in range(0,len(Sights_List)):\n",
        "    folium.CircleMarker(location= [Sights_List[i][1],Sights_List[i][2]],\n",
        "                        radius=4,\n",
        "                        popup=Sights_List[i][0],\n",
        "                        fill_color='blue', color = 'blue', fill_opacity=0.7\n",
        "                       ).add_to(Map_Points_Of_Interest)\n",
        "Map_Points_Of_Interest"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "C3rWGFxHJIpn",
        "outputId": "da6bc901-95c0-4fa1-80c1-ba76680d38d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<folium.folium.Map at 0x7caac7bfba30>"
            ],
            "text/html": [
              "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n",
              "&lt;html&gt;\n",
              "&lt;head&gt;\n",
              "    \n",
              "    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n",
              "    \n",
              "        &lt;script&gt;\n",
              "            L_NO_TOUCH = false;\n",
              "            L_DISABLE_3D = false;\n",
              "        &lt;/script&gt;\n",
              "    \n",
              "    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n",
              "    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n",
              "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n",
              "    \n",
              "            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n",
              "                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n",
              "            &lt;style&gt;\n",
              "                #map_c3b9b8feb464dc2c434587e751058f5f {\n",
              "                    position: relative;\n",
              "                    width: 100.0%;\n",
              "                    height: 100.0%;\n",
              "                    left: 0.0%;\n",
              "                    top: 0.0%;\n",
              "                }\n",
              "                .leaflet-container { font-size: 1rem; }\n",
              "            &lt;/style&gt;\n",
              "        \n",
              "&lt;/head&gt;\n",
              "&lt;body&gt;\n",
              "    \n",
              "    \n",
              "            &lt;div class=&quot;folium-map&quot; id=&quot;map_c3b9b8feb464dc2c434587e751058f5f&quot; &gt;&lt;/div&gt;\n",
              "        \n",
              "&lt;/body&gt;\n",
              "&lt;script&gt;\n",
              "    \n",
              "    \n",
              "            var map_c3b9b8feb464dc2c434587e751058f5f = L.map(\n",
              "                &quot;map_c3b9b8feb464dc2c434587e751058f5f&quot;,\n",
              "                {\n",
              "                    center: [40.632778, 22.946944],\n",
              "                    crs: L.CRS.EPSG3857,\n",
              "                    zoom: 15,\n",
              "                    zoomControl: true,\n",
              "                    preferCanvas: false,\n",
              "                }\n",
              "            );\n",
              "\n",
              "            \n",
              "\n",
              "        \n",
              "    \n",
              "            var tile_layer_cada464ad382920322d16477c80930d8 = L.tileLayer(\n",
              "                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n",
              "                {&quot;attribution&quot;: &quot;Data by \\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://openstreetmap.org\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e, under \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://www.openstreetmap.org/copyright\\&quot;\\u003eODbL\\u003c/a\\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "            var circle_marker_524a7362e15958e29ce46f6fe0fba5fd = L.circleMarker(\n",
              "                [40.6340603, 22.95544090597782],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_c5d2923adfe6683265c3ea4f42af5f8b = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_d25f0a9220fa6965d284433a7f7650e0 = $(`&lt;div id=&quot;html_d25f0a9220fa6965d284433a7f7650e0&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»&lt;/div&gt;`)[0];\n",
              "                popup_c5d2923adfe6683265c3ea4f42af5f8b.setContent(html_d25f0a9220fa6965d284433a7f7650e0);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_524a7362e15958e29ce46f6fe0fba5fd.bindPopup(popup_c5d2923adfe6683265c3ea4f42af5f8b)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_490b901a31db6b5a3a05506039242dd6 = L.circleMarker(\n",
              "                [40.6329523, 22.935580856860312],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_a29629941ea98780353328f707902b67 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_f6394da9bc3bad12a9bc500421253467 = $(`&lt;div id=&quot;html_f6394da9bc3bad12a9bc500421253467&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Λιμάνι&lt;/div&gt;`)[0];\n",
              "                popup_a29629941ea98780353328f707902b67.setContent(html_f6394da9bc3bad12a9bc500421253467);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_490b901a31db6b5a3a05506039242dd6.bindPopup(popup_a29629941ea98780353328f707902b67)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_dc9a333ebbbab50d85067debf6db1ab2 = L.circleMarker(\n",
              "                [40.62349035, 22.953888464445726],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_1ab69030ca0d13d588d0c98387f3935c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_9b884617d90b21a4e6398e4106547f1b = $(`&lt;div id=&quot;html_9b884617d90b21a4e6398e4106547f1b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Δημαρχείο Θεσσαλονίκης&lt;/div&gt;`)[0];\n",
              "                popup_1ab69030ca0d13d588d0c98387f3935c.setContent(html_9b884617d90b21a4e6398e4106547f1b);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_dc9a333ebbbab50d85067debf6db1ab2.bindPopup(popup_1ab69030ca0d13d588d0c98387f3935c)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_bb1a7a26117105b5d48122b2796c354f = L.circleMarker(\n",
              "                [40.62642685, 22.94838799454023],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_cd0b86f6d67ecff7ca44300957f74148 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_5d953d5c352ddb66a56d68893a0497b2 = $(`&lt;div id=&quot;html_5d953d5c352ddb66a56d68893a0497b2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Λευκός Πύργος&lt;/div&gt;`)[0];\n",
              "                popup_cd0b86f6d67ecff7ca44300957f74148.setContent(html_5d953d5c352ddb66a56d68893a0497b2);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_bb1a7a26117105b5d48122b2796c354f.bindPopup(popup_cd0b86f6d67ecff7ca44300957f74148)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_e3768d70acfe3d82a27da4c89f1d53d5 = L.circleMarker(\n",
              "                [40.6359733, 22.9426557],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_8ac30e8553f3075342477c3d1024f7b1 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_8d2c515ac6017a2674137d78fbeb4826 = $(`&lt;div id=&quot;html_8d2c515ac6017a2674137d78fbeb4826&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Αγορά Καπάνι&lt;/div&gt;`)[0];\n",
              "                popup_8ac30e8553f3075342477c3d1024f7b1.setContent(html_8d2c515ac6017a2674137d78fbeb4826);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_e3768d70acfe3d82a27da4c89f1d53d5.bindPopup(popup_8ac30e8553f3075342477c3d1024f7b1)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_95146279fe96cf40d9f820fb921a59d4 = L.circleMarker(\n",
              "                [40.6354703, 22.9360507],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_3adccaeb787ddeaf799f201c887a3909 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_b6bc0a8f038f6719b495d3a189d7d1d9 = $(`&lt;div id=&quot;html_b6bc0a8f038f6719b495d3a189d7d1d9&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Λαδάδικα&lt;/div&gt;`)[0];\n",
              "                popup_3adccaeb787ddeaf799f201c887a3909.setContent(html_b6bc0a8f038f6719b495d3a189d7d1d9);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_95146279fe96cf40d9f820fb921a59d4.bindPopup(popup_3adccaeb787ddeaf799f201c887a3909)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_c3246bb3f072d471b1556a468ab59b51 = L.circleMarker(\n",
              "                [40.6349061, 22.944225896187753],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_2bee177aff2b5d8ab5865b84ffb69c6f = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_9dced209158c75e7f542f5060cf5b72e = $(`&lt;div id=&quot;html_9dced209158c75e7f542f5060cf5b72e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Πλατεία Άθωνος&lt;/div&gt;`)[0];\n",
              "                popup_2bee177aff2b5d8ab5865b84ffb69c6f.setContent(html_9dced209158c75e7f542f5060cf5b72e);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_c3246bb3f072d471b1556a468ab59b51.bindPopup(popup_2bee177aff2b5d8ab5865b84ffb69c6f)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_062296a3c11a835688cd5fcf26d8bcec = L.circleMarker(\n",
              "                [40.632325949999995, 22.940797163563193],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_2c09526395726620307cd3c728e8d8cf = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_c0dde2094bc514f63601f882deedc17a = $(`&lt;div id=&quot;html_c0dde2094bc514f63601f882deedc17a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Πλατεία Αριστοτέλους&lt;/div&gt;`)[0];\n",
              "                popup_2c09526395726620307cd3c728e8d8cf.setContent(html_c0dde2094bc514f63601f882deedc17a);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_062296a3c11a835688cd5fcf26d8bcec.bindPopup(popup_2c09526395726620307cd3c728e8d8cf)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_040162f851250eca84d86595b2a0c4cd = L.circleMarker(\n",
              "                [40.6333112, 22.952867792448046],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_5ee56ac7fcb12b454ada500908edeb5c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_6c8c6b18d3cb754df8d7d1b2673f7a3e = $(`&lt;div id=&quot;html_6c8c6b18d3cb754df8d7d1b2673f7a3e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Ροτόντα&lt;/div&gt;`)[0];\n",
              "                popup_5ee56ac7fcb12b454ada500908edeb5c.setContent(html_6c8c6b18d3cb754df8d7d1b2673f7a3e);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_040162f851250eca84d86595b2a0c4cd.bindPopup(popup_5ee56ac7fcb12b454ada500908edeb5c)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_82d49b7c296c2b1d5d0ee9dd38d36127 = L.circleMarker(\n",
              "                [40.633686, 22.9456999],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_e9a1a3f5a0ea82220eadf61b4d7dfa39 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_624e2d8dcfa9e01bcc21a460c8e73ea1 = $(`&lt;div id=&quot;html_624e2d8dcfa9e01bcc21a460c8e73ea1&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Πλατεία Αγίας Σοφίας&lt;/div&gt;`)[0];\n",
              "                popup_e9a1a3f5a0ea82220eadf61b4d7dfa39.setContent(html_624e2d8dcfa9e01bcc21a460c8e73ea1);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_82d49b7c296c2b1d5d0ee9dd38d36127.bindPopup(popup_e9a1a3f5a0ea82220eadf61b4d7dfa39)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_5d83756b435b4e24aaf721d6b8b0a1f7 = L.circleMarker(\n",
              "                [40.6404351, 22.940401451517523],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_be4bf996a685a9cf81344eaf6aaa37e2 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_278ac69e9013863aa80781cd8bbc48a1 = $(`&lt;div id=&quot;html_278ac69e9013863aa80781cd8bbc48a1&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Πλατεία Αντιγονιδών&lt;/div&gt;`)[0];\n",
              "                popup_be4bf996a685a9cf81344eaf6aaa37e2.setContent(html_278ac69e9013863aa80781cd8bbc48a1);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_5d83756b435b4e24aaf721d6b8b0a1f7.bindPopup(popup_be4bf996a685a9cf81344eaf6aaa37e2)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_84b641bdc5a8346a936062c2492826e7 = L.circleMarker(\n",
              "                [40.630829, 22.9435835],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_36f7b4a22a0d0688656bf6468335900a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_5c49c123c068548a25bcc78d0b154f1a = $(`&lt;div id=&quot;html_5c49c123c068548a25bcc78d0b154f1a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Μουσείο Μακεδονικού Αγώνα&lt;/div&gt;`)[0];\n",
              "                popup_36f7b4a22a0d0688656bf6468335900a.setContent(html_5c49c123c068548a25bcc78d0b154f1a);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_84b641bdc5a8346a936062c2492826e7.bindPopup(popup_36f7b4a22a0d0688656bf6468335900a)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_3a0712dc6682c36c57635d9b05041703 = L.circleMarker(\n",
              "                [40.6307142, 22.94877699113079],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_ddf7543bae3505199f05887c24ad3a40 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_9bc1a7c3957d6cd94e974d3480859f39 = $(`&lt;div id=&quot;html_9bc1a7c3957d6cd94e974d3480859f39&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Πλατεία Ναυαρίνου&lt;/div&gt;`)[0];\n",
              "                popup_ddf7543bae3505199f05887c24ad3a40.setContent(html_9bc1a7c3957d6cd94e974d3480859f39);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_3a0712dc6682c36c57635d9b05041703.bindPopup(popup_ddf7543bae3505199f05887c24ad3a40)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_30418e42d413f2c603305b53d11bf345 = L.circleMarker(\n",
              "                [40.6262012, 22.9510403],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_11b84761e779ee42e5073cd7dd54bdf4 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_d53085ef6d3be995baaaca3459e31a42 = $(`&lt;div id=&quot;html_d53085ef6d3be995baaaca3459e31a42&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Πάρκο ΧΑΝΘ&lt;/div&gt;`)[0];\n",
              "                popup_11b84761e779ee42e5073cd7dd54bdf4.setContent(html_d53085ef6d3be995baaaca3459e31a42);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_30418e42d413f2c603305b53d11bf345.bindPopup(popup_11b84761e779ee42e5073cd7dd54bdf4)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_5eace82a3c53825994b8ea5fe1c91000 = L.circleMarker(\n",
              "                [40.639213, 22.9461529],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_9bde0da2dfa911494fda08b135dc2da4 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_17bddce73f82aa209384893d2740fb6b = $(`&lt;div id=&quot;html_17bddce73f82aa209384893d2740fb6b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Ιερός Ναός Αγίου Δημητρίου&lt;/div&gt;`)[0];\n",
              "                popup_9bde0da2dfa911494fda08b135dc2da4.setContent(html_17bddce73f82aa209384893d2740fb6b);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_5eace82a3c53825994b8ea5fe1c91000.bindPopup(popup_9bde0da2dfa911494fda08b135dc2da4)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_2bef4805e93c5662e9b3f65d0d4b881b = L.circleMarker(\n",
              "                [40.62772675, 22.95568771459698],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_dddc173c041733802a19500a6806fe3b = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_68e6fb2319becc9ebc4d1e9b63ed7233 = $(`&lt;div id=&quot;html_68e6fb2319becc9ebc4d1e9b63ed7233&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ΔΕΘ&lt;/div&gt;`)[0];\n",
              "                popup_dddc173c041733802a19500a6806fe3b.setContent(html_68e6fb2319becc9ebc4d1e9b63ed7233);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_2bef4805e93c5662e9b3f65d0d4b881b.bindPopup(popup_dddc173c041733802a19500a6806fe3b)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_094ba99f56ad97dc559d209f7073792f = L.circleMarker(\n",
              "                [40.631574549999996, 22.95545207758422],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_a64416c4b0f0103822772872bff2f365 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_ce37199f8dbf115827aa84de288634cd = $(`&lt;div id=&quot;html_ce37199f8dbf115827aa84de288634cd&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ΑΠΘ&lt;/div&gt;`)[0];\n",
              "                popup_a64416c4b0f0103822772872bff2f365.setContent(html_ce37199f8dbf115827aa84de288634cd);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_094ba99f56ad97dc559d209f7073792f.bindPopup(popup_a64416c4b0f0103822772872bff2f365)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_df400a921bb5f9114803cdebd01a0cbb = L.circleMarker(\n",
              "                [40.6361543, 22.9427118],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_66c7498322aa3020ea2ce6738f79894a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_55df66ae26189ee0762ac929f3c005aa = $(`&lt;div id=&quot;html_55df66ae26189ee0762ac929f3c005aa&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Άγαλμα Ελευθερίου Βενιζέλου&lt;/div&gt;`)[0];\n",
              "                popup_66c7498322aa3020ea2ce6738f79894a.setContent(html_55df66ae26189ee0762ac929f3c005aa);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_df400a921bb5f9114803cdebd01a0cbb.bindPopup(popup_66c7498322aa3020ea2ce6738f79894a)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_0dd053fbd1c0721abd25de6e74fcd98e = L.circleMarker(\n",
              "                [40.6384969, 22.9460472],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.7, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 4, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_c3b9b8feb464dc2c434587e751058f5f);\n",
              "        \n",
              "    \n",
              "        var popup_0438caa6cc07597a5fd2a81d151170ca = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_bd3e9f6f658edc6703694f79bcf1c357 = $(`&lt;div id=&quot;html_bd3e9f6f658edc6703694f79bcf1c357&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Ρωμαϊκή Αγορά Θεσσαλονίκης&lt;/div&gt;`)[0];\n",
              "                popup_0438caa6cc07597a5fd2a81d151170ca.setContent(html_bd3e9f6f658edc6703694f79bcf1c357);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_0dd053fbd1c0721abd25de6e74fcd98e.bindPopup(popup_0438caa6cc07597a5fd2a81d151170ca)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "&lt;/script&gt;\n",
              "&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I create the lists 'SlotName_Lat_Long' and 'Sight_Name_Lat_Long' where they have the names and coordinates of the Sector and the Sights respectively.\n",
        "\n"
      ],
      "metadata": {
        "id": "Ip7FGNVxK9qQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Sight_Name=Sights['Sight'].values.tolist()\n",
        "Sight_Lat=Sights['Latitude'].values.tolist()\n",
        "Sight_Long=Sights['Longitude'].values.tolist()\n",
        "Sight_Name_Lat_Long=[[Sight_Name],Sight_Lat,Sight_Long]\n",
        "Sights"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "dc59mokiJMpW",
        "outputId": "8a2895ba-1cd0-4333-8efd-9b8e6690f4b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             Sight   Latitude  Longitude\n",
              "0   Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»  40.634060  22.955441\n",
              "1                                           Λιμάνι  40.632952  22.935581\n",
              "2                           Δημαρχείο Θεσσαλονίκης  40.623490  22.953888\n",
              "3                                    Λευκός Πύργος  40.626427  22.948388\n",
              "4                                     Αγορά Καπάνι  40.635973  22.942656\n",
              "5                                         Λαδάδικα  40.635470  22.936051\n",
              "6                                   Πλατεία Άθωνος  40.634906  22.944226\n",
              "7                             Πλατεία Αριστοτέλους  40.632326  22.940797\n",
              "8                                          Ροτόντα  40.633311  22.952868\n",
              "9                             Πλατεία Αγίας Σοφίας  40.633686  22.945700\n",
              "10                             Πλατεία Αντιγονιδών  40.640435  22.940401\n",
              "11                       Μουσείο Μακεδονικού Αγώνα  40.630829  22.943583\n",
              "12                               Πλατεία Ναυαρίνου  40.630714  22.948777\n",
              "13                                      Πάρκο ΧΑΝΘ  40.626201  22.951040\n",
              "14                      Ιερός Ναός Αγίου Δημητρίου  40.639213  22.946153\n",
              "15                                             ΔΕΘ  40.627727  22.955688\n",
              "16                                             ΑΠΘ  40.631575  22.955452\n",
              "17                     Άγαλμα Ελευθερίου Βενιζέλου  40.636154  22.942712\n",
              "18                      Ρωμαϊκή Αγορά Θεσσαλονίκης  40.638497  22.946047"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d10efe63-1b5e-4e26-b9b7-57b16dfc95af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sight</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»</td>\n",
              "      <td>40.634060</td>\n",
              "      <td>22.955441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Λιμάνι</td>\n",
              "      <td>40.632952</td>\n",
              "      <td>22.935581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Δημαρχείο Θεσσαλονίκης</td>\n",
              "      <td>40.623490</td>\n",
              "      <td>22.953888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Λευκός Πύργος</td>\n",
              "      <td>40.626427</td>\n",
              "      <td>22.948388</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Αγορά Καπάνι</td>\n",
              "      <td>40.635973</td>\n",
              "      <td>22.942656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Λαδάδικα</td>\n",
              "      <td>40.635470</td>\n",
              "      <td>22.936051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Πλατεία Άθωνος</td>\n",
              "      <td>40.634906</td>\n",
              "      <td>22.944226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Πλατεία Αριστοτέλους</td>\n",
              "      <td>40.632326</td>\n",
              "      <td>22.940797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Ροτόντα</td>\n",
              "      <td>40.633311</td>\n",
              "      <td>22.952868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Πλατεία Αγίας Σοφίας</td>\n",
              "      <td>40.633686</td>\n",
              "      <td>22.945700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Πλατεία Αντιγονιδών</td>\n",
              "      <td>40.640435</td>\n",
              "      <td>22.940401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Μουσείο Μακεδονικού Αγώνα</td>\n",
              "      <td>40.630829</td>\n",
              "      <td>22.943583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Πλατεία Ναυαρίνου</td>\n",
              "      <td>40.630714</td>\n",
              "      <td>22.948777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Πάρκο ΧΑΝΘ</td>\n",
              "      <td>40.626201</td>\n",
              "      <td>22.951040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Ιερός Ναός Αγίου Δημητρίου</td>\n",
              "      <td>40.639213</td>\n",
              "      <td>22.946153</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>ΔΕΘ</td>\n",
              "      <td>40.627727</td>\n",
              "      <td>22.955688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>ΑΠΘ</td>\n",
              "      <td>40.631575</td>\n",
              "      <td>22.955452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Άγαλμα Ελευθερίου Βενιζέλου</td>\n",
              "      <td>40.636154</td>\n",
              "      <td>22.942712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Ρωμαϊκή Αγορά Θεσσαλονίκης</td>\n",
              "      <td>40.638497</td>\n",
              "      <td>22.946047</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d10efe63-1b5e-4e26-b9b7-57b16dfc95af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d10efe63-1b5e-4e26-b9b7-57b16dfc95af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d10efe63-1b5e-4e26-b9b7-57b16dfc95af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e9a5206f-6388-4321-848b-9f2fda89a85f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9a5206f-6388-4321-848b-9f2fda89a85f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e9a5206f-6388-4321-848b-9f2fda89a85f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I then create the file that describes the distances of each sector from the various points of interest\n",
        "\n"
      ],
      "metadata": {
        "id": "Fk99Z6LqLAu2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Column_Names=['Slot_id','Adress','Mean','Start','End','Capacity','Full_adress','Latitude','Longitude']\n",
        "Parking_Slots=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Parkink_Slot_Proccesed.csv',sep=',', names=Column_Names)\n",
        "Latitude= Parking_Slots['Latitude'].values.tolist()\n",
        "Longitude=Parking_Slots['Longitude'].values.tolist()\n",
        "Slot_Id=Parking_Slots['Slot_id'].values.tolist()"
      ],
      "metadata": {
        "id": "coLyJCoEJSaJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Ds=[]\n",
        "Distance=[]\n",
        "\n",
        "for j in range(0,len(Latitude)):\n",
        "    Ds=[]\n",
        "    for i in range (0,len(Sight_Lat)):\n",
        "        d= geopy.distance.geodesic((Latitude[j],Longitude[j]), (Sight_Lat[i],Sight_Long[i])).m\n",
        "        Ds.append(int(d))\n",
        "    Distance.append(Ds)\n",
        "Distance_Data=pd.DataFrame(Distance,columns=Sight_Name)\n",
        "Distance_Data.insert (0, \"Slot_id\", Slot_Id)\n",
        "Distance_Data.to_csv('/content/drive/MyDrive/Thesis/Data/Distance.csv')\n",
        "Distance_Data"
      ],
      "metadata": {
        "id": "vcXKGmx-JgXw",
        "outputId": "3bbc77d0-68df-4c5f-cdbd-35a410c5219d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Slot_id  Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»  Λιμάνι  \\\n",
              "0      17182                                             812    1610   \n",
              "1      17361                                             703    1581   \n",
              "2      17622                                             595    1557   \n",
              "3      18022                                             483    1539   \n",
              "4      18282                                            1107     684   \n",
              "..       ...                                             ...     ...   \n",
              "391      245                                              52    1711   \n",
              "392      248                                             947    2143   \n",
              "393      249                                             978    2023   \n",
              "394      250                                            1061    1825   \n",
              "395      251                                             968    1971   \n",
              "\n",
              "     Δημαρχείο Θεσσαλονίκης  Λευκός Πύργος  Αγορά Καπάνι  Λαδάδικα  \\\n",
              "0                       397            390          1323      1711   \n",
              "1                       503            434          1252      1664   \n",
              "2                       610            497          1185      1623   \n",
              "3                       724            578          1122      1585   \n",
              "4                      1213            651           586       798   \n",
              "..                      ...            ...           ...       ...   \n",
              "391                    1141           1019          1140      1682   \n",
              "392                     533            918          1785      2224   \n",
              "393                     358            765          1711      2121   \n",
              "394                     119            528          1596      1951   \n",
              "395                     315            709          1668      2071   \n",
              "\n",
              "     Πλατεία Άθωνος  Πλατεία Αριστοτέλους  Ροτόντα  Πλατεία Αγίας Σοφίας  \\\n",
              "0              1147                  1185      701                   963   \n",
              "1              1074                  1147      591                   890   \n",
              "2              1007                  1116      483                   825   \n",
              "3               945                  1093      370                   766   \n",
              "4               475                   266      874                   396   \n",
              "..              ...                   ...      ...                   ...   \n",
              "391             988                  1277      250                   853   \n",
              "392            1607                  1709      971                  1426   \n",
              "393            1533                  1598      959                  1349   \n",
              "394            1422                  1420      978                  1239   \n",
              "395            1491                  1547      936                  1307   \n",
              "\n",
              "     Πλατεία Αντιγονιδών  Μουσείο Μακεδονικού Αγώνα  Πλατεία Ναυαρίνου  \\\n",
              "0                   1831                        898                542   \n",
              "1                   1750                        864                474   \n",
              "2                   1673                        842                424   \n",
              "3                   1595                        832                395   \n",
              "4                   1104                         41                478   \n",
              "..                   ...                        ...                ...   \n",
              "391                 1503                       1079                678   \n",
              "392                 2257                       1427               1026   \n",
              "393                 2202                       1311                936   \n",
              "394                 2111                       1131                820   \n",
              "395                 2164                       1260                891   \n",
              "\n",
              "     Πάρκο ΧΑΝΘ  Ιερός Ναός Αγίου Δημητρίου   ΔΕΘ   ΑΠΘ  \\\n",
              "0           183                        1473   246   551   \n",
              "1           263                        1378   220   445   \n",
              "2           358                        1285   249   345   \n",
              "3           465                        1191   320   248   \n",
              "4           836                         979  1113  1048   \n",
              "..          ...                         ...   ...   ...   \n",
              "391         921                        1021   659   234   \n",
              "392         693                        1835   354   693   \n",
              "393         540                        1805   296   707   \n",
              "394         318                        1761   376   787   \n",
              "395         483                        1773   272   694   \n",
              "\n",
              "     Άγαλμα Ελευθερίου Βενιζέλου  Ρωμαϊκή Αγορά Θεσσαλονίκης  \n",
              "0                           1335                        1404  \n",
              "1                           1263                        1311  \n",
              "2                           1195                        1220  \n",
              "3                           1130                        1128  \n",
              "4                            606                         900  \n",
              "..                           ...                         ...  \n",
              "391                         1140                         983  \n",
              "392                         1793                        1777  \n",
              "393                         1721                        1742  \n",
              "394                         1609                        1692  \n",
              "395                         1679                        1710  \n",
              "\n",
              "[396 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14449d07-fb60-459b-bbb5-5000e377cdec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Γενικό Νοσοκομείο Θεσσαλονίκης «Γ. Γεννηματάς»</th>\n",
              "      <th>Λιμάνι</th>\n",
              "      <th>Δημαρχείο Θεσσαλονίκης</th>\n",
              "      <th>Λευκός Πύργος</th>\n",
              "      <th>Αγορά Καπάνι</th>\n",
              "      <th>Λαδάδικα</th>\n",
              "      <th>Πλατεία Άθωνος</th>\n",
              "      <th>Πλατεία Αριστοτέλους</th>\n",
              "      <th>Ροτόντα</th>\n",
              "      <th>Πλατεία Αγίας Σοφίας</th>\n",
              "      <th>Πλατεία Αντιγονιδών</th>\n",
              "      <th>Μουσείο Μακεδονικού Αγώνα</th>\n",
              "      <th>Πλατεία Ναυαρίνου</th>\n",
              "      <th>Πάρκο ΧΑΝΘ</th>\n",
              "      <th>Ιερός Ναός Αγίου Δημητρίου</th>\n",
              "      <th>ΔΕΘ</th>\n",
              "      <th>ΑΠΘ</th>\n",
              "      <th>Άγαλμα Ελευθερίου Βενιζέλου</th>\n",
              "      <th>Ρωμαϊκή Αγορά Θεσσαλονίκης</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17182</td>\n",
              "      <td>812</td>\n",
              "      <td>1610</td>\n",
              "      <td>397</td>\n",
              "      <td>390</td>\n",
              "      <td>1323</td>\n",
              "      <td>1711</td>\n",
              "      <td>1147</td>\n",
              "      <td>1185</td>\n",
              "      <td>701</td>\n",
              "      <td>963</td>\n",
              "      <td>1831</td>\n",
              "      <td>898</td>\n",
              "      <td>542</td>\n",
              "      <td>183</td>\n",
              "      <td>1473</td>\n",
              "      <td>246</td>\n",
              "      <td>551</td>\n",
              "      <td>1335</td>\n",
              "      <td>1404</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17361</td>\n",
              "      <td>703</td>\n",
              "      <td>1581</td>\n",
              "      <td>503</td>\n",
              "      <td>434</td>\n",
              "      <td>1252</td>\n",
              "      <td>1664</td>\n",
              "      <td>1074</td>\n",
              "      <td>1147</td>\n",
              "      <td>591</td>\n",
              "      <td>890</td>\n",
              "      <td>1750</td>\n",
              "      <td>864</td>\n",
              "      <td>474</td>\n",
              "      <td>263</td>\n",
              "      <td>1378</td>\n",
              "      <td>220</td>\n",
              "      <td>445</td>\n",
              "      <td>1263</td>\n",
              "      <td>1311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17622</td>\n",
              "      <td>595</td>\n",
              "      <td>1557</td>\n",
              "      <td>610</td>\n",
              "      <td>497</td>\n",
              "      <td>1185</td>\n",
              "      <td>1623</td>\n",
              "      <td>1007</td>\n",
              "      <td>1116</td>\n",
              "      <td>483</td>\n",
              "      <td>825</td>\n",
              "      <td>1673</td>\n",
              "      <td>842</td>\n",
              "      <td>424</td>\n",
              "      <td>358</td>\n",
              "      <td>1285</td>\n",
              "      <td>249</td>\n",
              "      <td>345</td>\n",
              "      <td>1195</td>\n",
              "      <td>1220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>18022</td>\n",
              "      <td>483</td>\n",
              "      <td>1539</td>\n",
              "      <td>724</td>\n",
              "      <td>578</td>\n",
              "      <td>1122</td>\n",
              "      <td>1585</td>\n",
              "      <td>945</td>\n",
              "      <td>1093</td>\n",
              "      <td>370</td>\n",
              "      <td>766</td>\n",
              "      <td>1595</td>\n",
              "      <td>832</td>\n",
              "      <td>395</td>\n",
              "      <td>465</td>\n",
              "      <td>1191</td>\n",
              "      <td>320</td>\n",
              "      <td>248</td>\n",
              "      <td>1130</td>\n",
              "      <td>1128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>18282</td>\n",
              "      <td>1107</td>\n",
              "      <td>684</td>\n",
              "      <td>1213</td>\n",
              "      <td>651</td>\n",
              "      <td>586</td>\n",
              "      <td>798</td>\n",
              "      <td>475</td>\n",
              "      <td>266</td>\n",
              "      <td>874</td>\n",
              "      <td>396</td>\n",
              "      <td>1104</td>\n",
              "      <td>41</td>\n",
              "      <td>478</td>\n",
              "      <td>836</td>\n",
              "      <td>979</td>\n",
              "      <td>1113</td>\n",
              "      <td>1048</td>\n",
              "      <td>606</td>\n",
              "      <td>900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391</th>\n",
              "      <td>245</td>\n",
              "      <td>52</td>\n",
              "      <td>1711</td>\n",
              "      <td>1141</td>\n",
              "      <td>1019</td>\n",
              "      <td>1140</td>\n",
              "      <td>1682</td>\n",
              "      <td>988</td>\n",
              "      <td>1277</td>\n",
              "      <td>250</td>\n",
              "      <td>853</td>\n",
              "      <td>1503</td>\n",
              "      <td>1079</td>\n",
              "      <td>678</td>\n",
              "      <td>921</td>\n",
              "      <td>1021</td>\n",
              "      <td>659</td>\n",
              "      <td>234</td>\n",
              "      <td>1140</td>\n",
              "      <td>983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>392</th>\n",
              "      <td>248</td>\n",
              "      <td>947</td>\n",
              "      <td>2143</td>\n",
              "      <td>533</td>\n",
              "      <td>918</td>\n",
              "      <td>1785</td>\n",
              "      <td>2224</td>\n",
              "      <td>1607</td>\n",
              "      <td>1709</td>\n",
              "      <td>971</td>\n",
              "      <td>1426</td>\n",
              "      <td>2257</td>\n",
              "      <td>1427</td>\n",
              "      <td>1026</td>\n",
              "      <td>693</td>\n",
              "      <td>1835</td>\n",
              "      <td>354</td>\n",
              "      <td>693</td>\n",
              "      <td>1793</td>\n",
              "      <td>1777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>393</th>\n",
              "      <td>249</td>\n",
              "      <td>978</td>\n",
              "      <td>2023</td>\n",
              "      <td>358</td>\n",
              "      <td>765</td>\n",
              "      <td>1711</td>\n",
              "      <td>2121</td>\n",
              "      <td>1533</td>\n",
              "      <td>1598</td>\n",
              "      <td>959</td>\n",
              "      <td>1349</td>\n",
              "      <td>2202</td>\n",
              "      <td>1311</td>\n",
              "      <td>936</td>\n",
              "      <td>540</td>\n",
              "      <td>1805</td>\n",
              "      <td>296</td>\n",
              "      <td>707</td>\n",
              "      <td>1721</td>\n",
              "      <td>1742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>250</td>\n",
              "      <td>1061</td>\n",
              "      <td>1825</td>\n",
              "      <td>119</td>\n",
              "      <td>528</td>\n",
              "      <td>1596</td>\n",
              "      <td>1951</td>\n",
              "      <td>1422</td>\n",
              "      <td>1420</td>\n",
              "      <td>978</td>\n",
              "      <td>1239</td>\n",
              "      <td>2111</td>\n",
              "      <td>1131</td>\n",
              "      <td>820</td>\n",
              "      <td>318</td>\n",
              "      <td>1761</td>\n",
              "      <td>376</td>\n",
              "      <td>787</td>\n",
              "      <td>1609</td>\n",
              "      <td>1692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>251</td>\n",
              "      <td>968</td>\n",
              "      <td>1971</td>\n",
              "      <td>315</td>\n",
              "      <td>709</td>\n",
              "      <td>1668</td>\n",
              "      <td>2071</td>\n",
              "      <td>1491</td>\n",
              "      <td>1547</td>\n",
              "      <td>936</td>\n",
              "      <td>1307</td>\n",
              "      <td>2164</td>\n",
              "      <td>1260</td>\n",
              "      <td>891</td>\n",
              "      <td>483</td>\n",
              "      <td>1773</td>\n",
              "      <td>272</td>\n",
              "      <td>694</td>\n",
              "      <td>1679</td>\n",
              "      <td>1710</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>396 rows × 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14449d07-fb60-459b-bbb5-5000e377cdec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-14449d07-fb60-459b-bbb5-5000e377cdec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-14449d07-fb60-459b-bbb5-5000e377cdec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-31f5348a-d32d-4290-ba33-be5218109d9d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31f5348a-d32d-4290-ba33-be5218109d9d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-31f5348a-d32d-4290-ba33-be5218109d9d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this Notebook I convert the data of the scans I created in the Scans_Data_Processing file to be suitable for training"
      ],
      "metadata": {
        "id": "S0neIc--Klwd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Data Proccesing\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tqdm import tqdm\n",
        "from datetime import timedelta\n",
        "Project_Path='Local Path'"
      ],
      "metadata": {
        "id": "3vBhvhpwKhzn"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the Scans_Data2 file I created into the Scans_Data_Processing notebook\n",
        "\n"
      ],
      "metadata": {
        "id": "j89KC4pmLJQS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scans_Data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data2.csv',low_memory=False,sep=',',index_col=0)\n",
        "Scans_Data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "kWK435k0KoU6",
        "outputId": "0d312e8d-0a3d-4965-b3cd-ecc8ad868da8"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date   Day Name  Day  Mouth  Year   Time   Latitude  Longitude  \\\n",
              "0    2018-01-03  Wednesday    3      1  2018  15:25  40.629133  22.953210   \n",
              "1    2018-01-03  Wednesday    3      1  2018  15:06  40.629035  22.947317   \n",
              "2    2018-01-03  Wednesday    3      1  2018  15:07  40.628861  22.947690   \n",
              "3    2018-01-03  Wednesday    3      1  2018  15:07  40.629031  22.947298   \n",
              "4    2018-01-03  Wednesday    3      1  2018  15:07  40.628900  22.947709   \n",
              "..          ...        ...  ...    ...   ...    ...        ...        ...   \n",
              "995  2018-01-04   Thursday    4      1  2018  12:21  40.629312  22.951746   \n",
              "996  2018-01-04   Thursday    4      1  2018  12:48  40.636055  22.945928   \n",
              "997  2018-01-04   Thursday    4      1  2018  15:24  40.626885  22.952857   \n",
              "998  2018-01-04   Thursday    4      1  2018  12:48  40.636424  22.946217   \n",
              "999  2018-01-04   Thursday    4      1  2018  15:37  40.627595  22.949920   \n",
              "\n",
              "    Zone  Slot_id  Legal  Covid  Lockdown  \n",
              "0      A    17622      1      0         0  \n",
              "1      A    17813      1      0         0  \n",
              "2      A    17813      0      0         0  \n",
              "3      A    17813      1      0         0  \n",
              "4      A    17813      1      0         0  \n",
              "..   ...      ...    ...    ...       ...  \n",
              "995    A    17644      1      0         0  \n",
              "996    A    20548      1      0         0  \n",
              "997    A    17182      0      0         0  \n",
              "998    A    20548      1      0         0  \n",
              "999    A       27      0      0         0  \n",
              "\n",
              "[1000 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-570367e5-cf04-4939-b7a8-e7e27ace5e2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Day</th>\n",
              "      <th>Mouth</th>\n",
              "      <th>Year</th>\n",
              "      <th>Time</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Zone</th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Legal</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Lockdown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:25</td>\n",
              "      <td>40.629133</td>\n",
              "      <td>22.953210</td>\n",
              "      <td>A</td>\n",
              "      <td>17622</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:06</td>\n",
              "      <td>40.629035</td>\n",
              "      <td>22.947317</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:07</td>\n",
              "      <td>40.628861</td>\n",
              "      <td>22.947690</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:07</td>\n",
              "      <td>40.629031</td>\n",
              "      <td>22.947298</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:07</td>\n",
              "      <td>40.628900</td>\n",
              "      <td>22.947709</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>12:21</td>\n",
              "      <td>40.629312</td>\n",
              "      <td>22.951746</td>\n",
              "      <td>A</td>\n",
              "      <td>17644</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>12:48</td>\n",
              "      <td>40.636055</td>\n",
              "      <td>22.945928</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:24</td>\n",
              "      <td>40.626885</td>\n",
              "      <td>22.952857</td>\n",
              "      <td>A</td>\n",
              "      <td>17182</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>12:48</td>\n",
              "      <td>40.636424</td>\n",
              "      <td>22.946217</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:37</td>\n",
              "      <td>40.627595</td>\n",
              "      <td>22.949920</td>\n",
              "      <td>A</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-570367e5-cf04-4939-b7a8-e7e27ace5e2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-570367e5-cf04-4939-b7a8-e7e27ace5e2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-570367e5-cf04-4939-b7a8-e7e27ace5e2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f966778-6feb-4a3d-a842-b0f6a66df3bc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f966778-6feb-4a3d-a842-b0f6a66df3bc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f966778-6feb-4a3d-a842-b0f6a66df3bc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am converting the format of the \"Date\" column from \"Year/Month/Day\" to \"Month/Day/Year\" so that it has the appropriate format so that I can then convert it to pandas datetime\n",
        "\n"
      ],
      "metadata": {
        "id": "BJ1BqcZnLUQS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Date_List=[]\n",
        "Scans_List=Scans_Data.values.tolist()\n",
        "for i in tqdm(range(0,len(Scans_List))):\n",
        "    Date = Scans_List[i][0]\n",
        "    y,m,d = Date.split('-')\n",
        "    D=m + '/' + d + '/' +y\n",
        "    Date_List.append(D)\n",
        "Scans_Data=Scans_Data.drop(['Date'], axis=1)\n",
        "Scans_Data.insert(1, \"Date\", Date_List, True)\n",
        "Scans_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "nmOrcE3OLWID",
        "outputId": "e13169f1-77fa-42d1-ab8e-2db9084d49a8"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1000/1000 [00:00<00:00, 308268.70it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Day Name        Date  Day  Mouth  Year   Time   Latitude  Longitude  \\\n",
              "0    Wednesday  01/03/2018    3      1  2018  15:25  40.629133  22.953210   \n",
              "1    Wednesday  01/03/2018    3      1  2018  15:06  40.629035  22.947317   \n",
              "2    Wednesday  01/03/2018    3      1  2018  15:07  40.628861  22.947690   \n",
              "3    Wednesday  01/03/2018    3      1  2018  15:07  40.629031  22.947298   \n",
              "4    Wednesday  01/03/2018    3      1  2018  15:07  40.628900  22.947709   \n",
              "..         ...         ...  ...    ...   ...    ...        ...        ...   \n",
              "995   Thursday  01/04/2018    4      1  2018  12:21  40.629312  22.951746   \n",
              "996   Thursday  01/04/2018    4      1  2018  12:48  40.636055  22.945928   \n",
              "997   Thursday  01/04/2018    4      1  2018  15:24  40.626885  22.952857   \n",
              "998   Thursday  01/04/2018    4      1  2018  12:48  40.636424  22.946217   \n",
              "999   Thursday  01/04/2018    4      1  2018  15:37  40.627595  22.949920   \n",
              "\n",
              "    Zone  Slot_id  Legal  Covid  Lockdown  \n",
              "0      A    17622      1      0         0  \n",
              "1      A    17813      1      0         0  \n",
              "2      A    17813      0      0         0  \n",
              "3      A    17813      1      0         0  \n",
              "4      A    17813      1      0         0  \n",
              "..   ...      ...    ...    ...       ...  \n",
              "995    A    17644      1      0         0  \n",
              "996    A    20548      1      0         0  \n",
              "997    A    17182      0      0         0  \n",
              "998    A    20548      1      0         0  \n",
              "999    A       27      0      0         0  \n",
              "\n",
              "[1000 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2268897-430d-4624-9150-263ea95bf2fc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day</th>\n",
              "      <th>Mouth</th>\n",
              "      <th>Year</th>\n",
              "      <th>Time</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Zone</th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Legal</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Lockdown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:25</td>\n",
              "      <td>40.629133</td>\n",
              "      <td>22.953210</td>\n",
              "      <td>A</td>\n",
              "      <td>17622</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:06</td>\n",
              "      <td>40.629035</td>\n",
              "      <td>22.947317</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:07</td>\n",
              "      <td>40.628861</td>\n",
              "      <td>22.947690</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:07</td>\n",
              "      <td>40.629031</td>\n",
              "      <td>22.947298</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:07</td>\n",
              "      <td>40.628900</td>\n",
              "      <td>22.947709</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>12:21</td>\n",
              "      <td>40.629312</td>\n",
              "      <td>22.951746</td>\n",
              "      <td>A</td>\n",
              "      <td>17644</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>12:48</td>\n",
              "      <td>40.636055</td>\n",
              "      <td>22.945928</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:24</td>\n",
              "      <td>40.626885</td>\n",
              "      <td>22.952857</td>\n",
              "      <td>A</td>\n",
              "      <td>17182</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>12:48</td>\n",
              "      <td>40.636424</td>\n",
              "      <td>22.946217</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>15:37</td>\n",
              "      <td>40.627595</td>\n",
              "      <td>22.949920</td>\n",
              "      <td>A</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2268897-430d-4624-9150-263ea95bf2fc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2268897-430d-4624-9150-263ea95bf2fc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2268897-430d-4624-9150-263ea95bf2fc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3509be0-1d19-44de-86e2-bdd014547a96\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3509be0-1d19-44de-86e2-bdd014547a96')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3509be0-1d19-44de-86e2-bdd014547a96 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Μετατρέπω τις στήλες 'Date' και 'Time' σε pandas datetime ώστε να μετατρέψω την ώρα σε time-int (Seconds)\n",
        "\n"
      ],
      "metadata": {
        "id": "Ah5D-KskLaSD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scans_Data['Date_Time'] = Scans_Data['Date'].map(str)+ ' ' + Scans_Data['Time'].map(str)\n",
        "Scans_Data['Date_Time'] = pd.to_datetime(Scans_Data['Date_Time'])\n",
        "Scans_Data['Time_Int'] = (Scans_Data['Date_Time']-Scans_Data['Date_Time'].dt.normalize()).dt.total_seconds()\n",
        "Scans_Data=Scans_Data.drop(['Time'], axis=1)\n",
        "Scans_Data=Scans_Data.drop(['Date_Time'], axis=1)\n",
        "Scans_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "h1bTyrKeLcDp",
        "outputId": "b78498c3-b0c8-42f6-ede2-a10918762f79"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Day Name        Date  Day  Mouth  Year   Latitude  Longitude Zone  \\\n",
              "0    Wednesday  01/03/2018    3      1  2018  40.629133  22.953210    A   \n",
              "1    Wednesday  01/03/2018    3      1  2018  40.629035  22.947317    A   \n",
              "2    Wednesday  01/03/2018    3      1  2018  40.628861  22.947690    A   \n",
              "3    Wednesday  01/03/2018    3      1  2018  40.629031  22.947298    A   \n",
              "4    Wednesday  01/03/2018    3      1  2018  40.628900  22.947709    A   \n",
              "..         ...         ...  ...    ...   ...        ...        ...  ...   \n",
              "995   Thursday  01/04/2018    4      1  2018  40.629312  22.951746    A   \n",
              "996   Thursday  01/04/2018    4      1  2018  40.636055  22.945928    A   \n",
              "997   Thursday  01/04/2018    4      1  2018  40.626885  22.952857    A   \n",
              "998   Thursday  01/04/2018    4      1  2018  40.636424  22.946217    A   \n",
              "999   Thursday  01/04/2018    4      1  2018  40.627595  22.949920    A   \n",
              "\n",
              "     Slot_id  Legal  Covid  Lockdown  Time_Int  \n",
              "0      17622      1      0         0   55500.0  \n",
              "1      17813      1      0         0   54360.0  \n",
              "2      17813      0      0         0   54420.0  \n",
              "3      17813      1      0         0   54420.0  \n",
              "4      17813      1      0         0   54420.0  \n",
              "..       ...    ...    ...       ...       ...  \n",
              "995    17644      1      0         0   44460.0  \n",
              "996    20548      1      0         0   46080.0  \n",
              "997    17182      0      0         0   55440.0  \n",
              "998    20548      1      0         0   46080.0  \n",
              "999       27      0      0         0   56220.0  \n",
              "\n",
              "[1000 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a88094e8-1352-4b79-81ee-d196cb037b85\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day</th>\n",
              "      <th>Mouth</th>\n",
              "      <th>Year</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Zone</th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Legal</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Lockdown</th>\n",
              "      <th>Time_Int</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629133</td>\n",
              "      <td>22.953210</td>\n",
              "      <td>A</td>\n",
              "      <td>17622</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629035</td>\n",
              "      <td>22.947317</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54360.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.628861</td>\n",
              "      <td>22.947690</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629031</td>\n",
              "      <td>22.947298</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.628900</td>\n",
              "      <td>22.947709</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629312</td>\n",
              "      <td>22.951746</td>\n",
              "      <td>A</td>\n",
              "      <td>17644</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>44460.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.636055</td>\n",
              "      <td>22.945928</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46080.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.626885</td>\n",
              "      <td>22.952857</td>\n",
              "      <td>A</td>\n",
              "      <td>17182</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55440.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.636424</td>\n",
              "      <td>22.946217</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46080.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.627595</td>\n",
              "      <td>22.949920</td>\n",
              "      <td>A</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56220.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a88094e8-1352-4b79-81ee-d196cb037b85')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a88094e8-1352-4b79-81ee-d196cb037b85 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a88094e8-1352-4b79-81ee-d196cb037b85');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-455d0e4f-b8ed-4c47-9421-203a83cc6bb6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-455d0e4f-b8ed-4c47-9421-203a83cc6bb6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-455d0e4f-b8ed-4c47-9421-203a83cc6bb6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Knowing from the previous notebook what are the times when I have recorded scans (6:00, 7:00,..., 19:00, 20:00) I give their imprint in seconds, for example (6:00 = 21600) and then I capture her with their center. eg (6:00 -> 6:30) and therefore (21600->23400). So I ended up with a list of 15 hours that will be used to sort the scans into time slots\n",
        "\n"
      ],
      "metadata": {
        "id": "GMJff03dLe3h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Time_Slots=[21600,25200,28800,32400,36000,39600,43200,46800,50400,54000,57600,61200,64800,68400,72000]\n",
        "Time_SlotsCenter=[]\n",
        "for i in range (0,len(Time_Slots)):\n",
        "    Time_SlotsCenter.append(Time_Slots[i]+1800)\n",
        "Time_Slots=Time_SlotsCenter\n",
        "Time_Slots"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjR4cE3DLhuo",
        "outputId": "ccc5f34a-a5b9-47cb-8797-7fa3aed85689"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[23400,\n",
              " 27000,\n",
              " 30600,\n",
              " 34200,\n",
              " 37800,\n",
              " 41400,\n",
              " 45000,\n",
              " 48600,\n",
              " 52200,\n",
              " 55800,\n",
              " 59400,\n",
              " 63000,\n",
              " 66600,\n",
              " 70200,\n",
              " 73800]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "According to the above list I classified each scan in the time-slot that was closest. That is, a scan that was done at 12:45 went to the time-slot '12:00-13:00' which is captured as 12:00. That is, I added the Time_Slot column. I also added the Time_Distance column which states how far in seconds the pre-wedding time of the scan is from the center of the timeslot we ranked the scan. I use Time_Distance to check for ranking errors.\n",
        "\n"
      ],
      "metadata": {
        "id": "cTwJpFETLm70"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scan_List=Scans_Data.values.tolist()\n",
        "Real_Time_Slots=[]\n",
        "Time_Distance=[]\n",
        "for i in tqdm(range(0,len(Scan_List))):\n",
        "    Real_Time=Scan_List[i][12]\n",
        "    Distances=[]\n",
        "    Slots=[]\n",
        "\n",
        "    for j in range (0,len(Time_Slots)):\n",
        "        Distances.append(abs(Time_Slots[j]-Real_Time))\n",
        "\n",
        "    Slots=np.column_stack((Time_Slots, Distances))\n",
        "    Slots = sorted(Slots, key=lambda x: x[1])\n",
        "    Real_Time_Slots.append(Slots[0][0])\n",
        "    Time_Distance.append(Slots[0][1])\n",
        "Scans_Data.insert(13, \"Time_Slot\", Real_Time_Slots, True)\n",
        "Scans_Data.insert(14, \"Time_Distance\", Time_Distance, True)\n",
        "Scans_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "Yvss5h4JLntv",
        "outputId": "2435bc35-a240-4f56-b2f3-4f9486c29d9e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1000/1000 [00:00<00:00, 15586.30it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Day Name        Date  Day  Mouth  Year   Latitude  Longitude Zone  \\\n",
              "0    Wednesday  01/03/2018    3      1  2018  40.629133  22.953210    A   \n",
              "1    Wednesday  01/03/2018    3      1  2018  40.629035  22.947317    A   \n",
              "2    Wednesday  01/03/2018    3      1  2018  40.628861  22.947690    A   \n",
              "3    Wednesday  01/03/2018    3      1  2018  40.629031  22.947298    A   \n",
              "4    Wednesday  01/03/2018    3      1  2018  40.628900  22.947709    A   \n",
              "..         ...         ...  ...    ...   ...        ...        ...  ...   \n",
              "995   Thursday  01/04/2018    4      1  2018  40.629312  22.951746    A   \n",
              "996   Thursday  01/04/2018    4      1  2018  40.636055  22.945928    A   \n",
              "997   Thursday  01/04/2018    4      1  2018  40.626885  22.952857    A   \n",
              "998   Thursday  01/04/2018    4      1  2018  40.636424  22.946217    A   \n",
              "999   Thursday  01/04/2018    4      1  2018  40.627595  22.949920    A   \n",
              "\n",
              "     Slot_id  Legal  Covid  Lockdown  Time_Int  Time_Slot  Time_Distance  \n",
              "0      17622      1      0         0   55500.0    55800.0          300.0  \n",
              "1      17813      1      0         0   54360.0    55800.0         1440.0  \n",
              "2      17813      0      0         0   54420.0    55800.0         1380.0  \n",
              "3      17813      1      0         0   54420.0    55800.0         1380.0  \n",
              "4      17813      1      0         0   54420.0    55800.0         1380.0  \n",
              "..       ...    ...    ...       ...       ...        ...            ...  \n",
              "995    17644      1      0         0   44460.0    45000.0          540.0  \n",
              "996    20548      1      0         0   46080.0    45000.0         1080.0  \n",
              "997    17182      0      0         0   55440.0    55800.0          360.0  \n",
              "998    20548      1      0         0   46080.0    45000.0         1080.0  \n",
              "999       27      0      0         0   56220.0    55800.0          420.0  \n",
              "\n",
              "[1000 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cedad1c7-8f60-41c5-8fdf-af36232b06e9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day</th>\n",
              "      <th>Mouth</th>\n",
              "      <th>Year</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Zone</th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Legal</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Lockdown</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Time_Slot</th>\n",
              "      <th>Time_Distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629133</td>\n",
              "      <td>22.953210</td>\n",
              "      <td>A</td>\n",
              "      <td>17622</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55500.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629035</td>\n",
              "      <td>22.947317</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54360.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1440.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.628861</td>\n",
              "      <td>22.947690</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629031</td>\n",
              "      <td>22.947298</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.628900</td>\n",
              "      <td>22.947709</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629312</td>\n",
              "      <td>22.951746</td>\n",
              "      <td>A</td>\n",
              "      <td>17644</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>44460.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>540.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.636055</td>\n",
              "      <td>22.945928</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>1080.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.626885</td>\n",
              "      <td>22.952857</td>\n",
              "      <td>A</td>\n",
              "      <td>17182</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55440.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>360.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.636424</td>\n",
              "      <td>22.946217</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>1080.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.627595</td>\n",
              "      <td>22.949920</td>\n",
              "      <td>A</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56220.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>420.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cedad1c7-8f60-41c5-8fdf-af36232b06e9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cedad1c7-8f60-41c5-8fdf-af36232b06e9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cedad1c7-8f60-41c5-8fdf-af36232b06e9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d5c3c300-d199-4bee-9359-a2420752fecc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d5c3c300-d199-4bee-9359-a2420752fecc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d5c3c300-d199-4bee-9359-a2420752fecc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I deleted the scans done during the lock down period. I explain in the report why I did this\n",
        "\n"
      ],
      "metadata": {
        "id": "siNOnT6CLsgw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scans_Data.drop(Scans_Data.index[Scans_Data['Lockdown'] == 1], inplace=True)\n",
        "Scans_Data=Scans_Data.reset_index()\n",
        "del Scans_Data[\"index\"]\n",
        "Scans_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "ISaQz_yhLtYp",
        "outputId": "3c962a1a-7f49-4b57-a2a4-97f3b943b5ca"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Day Name        Date  Day  Mouth  Year   Latitude  Longitude Zone  \\\n",
              "0    Wednesday  01/03/2018    3      1  2018  40.629133  22.953210    A   \n",
              "1    Wednesday  01/03/2018    3      1  2018  40.629035  22.947317    A   \n",
              "2    Wednesday  01/03/2018    3      1  2018  40.628861  22.947690    A   \n",
              "3    Wednesday  01/03/2018    3      1  2018  40.629031  22.947298    A   \n",
              "4    Wednesday  01/03/2018    3      1  2018  40.628900  22.947709    A   \n",
              "..         ...         ...  ...    ...   ...        ...        ...  ...   \n",
              "995   Thursday  01/04/2018    4      1  2018  40.629312  22.951746    A   \n",
              "996   Thursday  01/04/2018    4      1  2018  40.636055  22.945928    A   \n",
              "997   Thursday  01/04/2018    4      1  2018  40.626885  22.952857    A   \n",
              "998   Thursday  01/04/2018    4      1  2018  40.636424  22.946217    A   \n",
              "999   Thursday  01/04/2018    4      1  2018  40.627595  22.949920    A   \n",
              "\n",
              "     Slot_id  Legal  Covid  Lockdown  Time_Int  Time_Slot  Time_Distance  \n",
              "0      17622      1      0         0   55500.0    55800.0          300.0  \n",
              "1      17813      1      0         0   54360.0    55800.0         1440.0  \n",
              "2      17813      0      0         0   54420.0    55800.0         1380.0  \n",
              "3      17813      1      0         0   54420.0    55800.0         1380.0  \n",
              "4      17813      1      0         0   54420.0    55800.0         1380.0  \n",
              "..       ...    ...    ...       ...       ...        ...            ...  \n",
              "995    17644      1      0         0   44460.0    45000.0          540.0  \n",
              "996    20548      1      0         0   46080.0    45000.0         1080.0  \n",
              "997    17182      0      0         0   55440.0    55800.0          360.0  \n",
              "998    20548      1      0         0   46080.0    45000.0         1080.0  \n",
              "999       27      0      0         0   56220.0    55800.0          420.0  \n",
              "\n",
              "[1000 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0a7ccc7f-baba-45f4-a749-03903c45021e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day</th>\n",
              "      <th>Mouth</th>\n",
              "      <th>Year</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Zone</th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Legal</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Lockdown</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Time_Slot</th>\n",
              "      <th>Time_Distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629133</td>\n",
              "      <td>22.953210</td>\n",
              "      <td>A</td>\n",
              "      <td>17622</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55500.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629035</td>\n",
              "      <td>22.947317</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54360.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1440.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.628861</td>\n",
              "      <td>22.947690</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629031</td>\n",
              "      <td>22.947298</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.628900</td>\n",
              "      <td>22.947709</td>\n",
              "      <td>A</td>\n",
              "      <td>17813</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>1380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.629312</td>\n",
              "      <td>22.951746</td>\n",
              "      <td>A</td>\n",
              "      <td>17644</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>44460.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>540.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.636055</td>\n",
              "      <td>22.945928</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>1080.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.626885</td>\n",
              "      <td>22.952857</td>\n",
              "      <td>A</td>\n",
              "      <td>17182</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55440.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>360.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.636424</td>\n",
              "      <td>22.946217</td>\n",
              "      <td>A</td>\n",
              "      <td>20548</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>1080.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2018</td>\n",
              "      <td>40.627595</td>\n",
              "      <td>22.949920</td>\n",
              "      <td>A</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56220.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>420.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a7ccc7f-baba-45f4-a749-03903c45021e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0a7ccc7f-baba-45f4-a749-03903c45021e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0a7ccc7f-baba-45f4-a749-03903c45021e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9b82a3ed-1d00-47d5-a609-616b13199413\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b82a3ed-1d00-47d5-a609-616b13199413')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9b82a3ed-1d00-47d5-a609-616b13199413 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I keep only the columns I need.\n",
        "\n"
      ],
      "metadata": {
        "id": "YIpCCoHzLx1k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scans_Data2=Scans_Data['Slot_id'],Scans_Data['Date'],Scans_Data['Day Name'], Scans_Data['Time_Int'], Scans_Data['Time_Slot'],Scans_Data['Covid'],Scans_Data['Legal']\n",
        "Headers=['Slot_id','Date','Day Name','Time_Int','Time_Slot','Covid','Legal']\n",
        "Scans_Data2 = pd.concat(Scans_Data2, axis=1, keys=Headers)\n",
        "Scans_Data2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "bJr-EERiLyiK",
        "outputId": "3103aa0e-4e63-432f-efa7-6f5fa695e785"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Slot_id        Date   Day Name  Time_Int  Time_Slot  Covid  Legal\n",
              "0      17622  01/03/2018  Wednesday   55500.0    55800.0      0      1\n",
              "1      17813  01/03/2018  Wednesday   54360.0    55800.0      0      1\n",
              "2      17813  01/03/2018  Wednesday   54420.0    55800.0      0      0\n",
              "3      17813  01/03/2018  Wednesday   54420.0    55800.0      0      1\n",
              "4      17813  01/03/2018  Wednesday   54420.0    55800.0      0      1\n",
              "..       ...         ...        ...       ...        ...    ...    ...\n",
              "995    17644  01/04/2018   Thursday   44460.0    45000.0      0      1\n",
              "996    20548  01/04/2018   Thursday   46080.0    45000.0      0      1\n",
              "997    17182  01/04/2018   Thursday   55440.0    55800.0      0      0\n",
              "998    20548  01/04/2018   Thursday   46080.0    45000.0      0      1\n",
              "999       27  01/04/2018   Thursday   56220.0    55800.0      0      0\n",
              "\n",
              "[1000 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1c4badd4-6f34-4e9d-ba62-94083c34cf79\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Time_Slot</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Legal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17622</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55500.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54360.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>17644</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>44460.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>20548</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>55440.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>20548</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>27</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>56220.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c4badd4-6f34-4e9d-ba62-94083c34cf79')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1c4badd4-6f34-4e9d-ba62-94083c34cf79 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1c4badd4-6f34-4e9d-ba62-94083c34cf79');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7d22e1d1-4198-4ad6-a701-a555a69d7859\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d22e1d1-4198-4ad6-a701-a555a69d7859')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7d22e1d1-4198-4ad6-a701-a555a69d7859 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I convert the Legal column to categorical to then do one-hot encoding. (This step is unnecessary)\n",
        "\n"
      ],
      "metadata": {
        "id": "kc2LuliZL3vJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scans_Data2['Legal'] = Scans_Data2['Legal'].replace(1, 'Legal')\n",
        "Scans_Data2['Legal'] = Scans_Data2['Legal'].replace(0, 'Ilegal')\n",
        "Scans_Data2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "sbE8AbPTL4nC",
        "outputId": "a1cb083e-0641-4b53-f55e-7b4f38bdd68b"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Slot_id        Date   Day Name  Time_Int  Time_Slot  Covid   Legal\n",
              "0      17622  01/03/2018  Wednesday   55500.0    55800.0      0   Legal\n",
              "1      17813  01/03/2018  Wednesday   54360.0    55800.0      0   Legal\n",
              "2      17813  01/03/2018  Wednesday   54420.0    55800.0      0  Ilegal\n",
              "3      17813  01/03/2018  Wednesday   54420.0    55800.0      0   Legal\n",
              "4      17813  01/03/2018  Wednesday   54420.0    55800.0      0   Legal\n",
              "..       ...         ...        ...       ...        ...    ...     ...\n",
              "995    17644  01/04/2018   Thursday   44460.0    45000.0      0   Legal\n",
              "996    20548  01/04/2018   Thursday   46080.0    45000.0      0   Legal\n",
              "997    17182  01/04/2018   Thursday   55440.0    55800.0      0  Ilegal\n",
              "998    20548  01/04/2018   Thursday   46080.0    45000.0      0   Legal\n",
              "999       27  01/04/2018   Thursday   56220.0    55800.0      0  Ilegal\n",
              "\n",
              "[1000 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea193c2a-58ec-4c2f-9dd2-6e7ed3eb5f96\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Time_Slot</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Legal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17622</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55500.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54360.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Ilegal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>17644</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>44460.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>20548</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>55440.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Ilegal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>20548</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Legal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>27</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>56220.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Ilegal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea193c2a-58ec-4c2f-9dd2-6e7ed3eb5f96')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea193c2a-58ec-4c2f-9dd2-6e7ed3eb5f96 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea193c2a-58ec-4c2f-9dd2-6e7ed3eb5f96');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f2567170-5186-48d5-9cd5-8e485c988036\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2567170-5186-48d5-9cd5-8e485c988036')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f2567170-5186-48d5-9cd5-8e485c988036 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I do one hot encoding of the legal column, create 2 new columns through this process and delete the legal column. Then I save the dataframe to have this point as a check-point\n",
        "\n"
      ],
      "metadata": {
        "id": "wKr2OFtPL6_x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# creating initial dataframe\n",
        "Legality_Types = ('Legal','Ilegal')\n",
        "Legaldf = pd.DataFrame(Scans_Data2, columns=['Legal'])\n",
        "# generate binary values using get_dummies\n",
        "Legality = pd.get_dummies(Legaldf, columns=[\"Legal\"], prefix=[\"Legality\"] )\n",
        "# merge with main df bridge_df on key values\n",
        "Scans_Data2 = Scans_Data2.join(Legality)\n",
        "Scans_Data2=Scans_Data2.drop(['Legal'], axis=1)\n",
        "Scans_Data2.to_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.1.csv')\n",
        "Scans_Data2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "fbWjB_LmL89b",
        "outputId": "1b3c17f4-b91c-46ad-8790-66e56237257b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Slot_id        Date   Day Name  Time_Int  Time_Slot  Covid  \\\n",
              "0      17622  01/03/2018  Wednesday   55500.0    55800.0      0   \n",
              "1      17813  01/03/2018  Wednesday   54360.0    55800.0      0   \n",
              "2      17813  01/03/2018  Wednesday   54420.0    55800.0      0   \n",
              "3      17813  01/03/2018  Wednesday   54420.0    55800.0      0   \n",
              "4      17813  01/03/2018  Wednesday   54420.0    55800.0      0   \n",
              "..       ...         ...        ...       ...        ...    ...   \n",
              "995    17644  01/04/2018   Thursday   44460.0    45000.0      0   \n",
              "996    20548  01/04/2018   Thursday   46080.0    45000.0      0   \n",
              "997    17182  01/04/2018   Thursday   55440.0    55800.0      0   \n",
              "998    20548  01/04/2018   Thursday   46080.0    45000.0      0   \n",
              "999       27  01/04/2018   Thursday   56220.0    55800.0      0   \n",
              "\n",
              "     Legality_Ilegal  Legality_Legal  \n",
              "0                  0               1  \n",
              "1                  0               1  \n",
              "2                  1               0  \n",
              "3                  0               1  \n",
              "4                  0               1  \n",
              "..               ...             ...  \n",
              "995                0               1  \n",
              "996                0               1  \n",
              "997                1               0  \n",
              "998                0               1  \n",
              "999                1               0  \n",
              "\n",
              "[1000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53edde8e-2c11-4962-a37d-88e10918228c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day Name</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Time_Slot</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Legality_Ilegal</th>\n",
              "      <th>Legality_Legal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17622</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55500.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54360.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17813</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>17644</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>44460.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>20548</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>55440.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>20548</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>27</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>56220.0</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53edde8e-2c11-4962-a37d-88e10918228c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-53edde8e-2c11-4962-a37d-88e10918228c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-53edde8e-2c11-4962-a37d-88e10918228c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-328579ba-0738-4181-b708-ee8b8f152a32\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-328579ba-0738-4181-b708-ee8b8f152a32')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-328579ba-0738-4181-b708-ee8b8f152a32 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I convert some of the columns into a string that will be used as a key. I leave out the column specifying the actual time of each scan and the columns specifying the parking violation. The key contains information about the time domain, the time-slot. So samples with the same key are scans made on the same day in the same time-slot in the same sector\n",
        "\n"
      ],
      "metadata": {
        "id": "vzPEjNEqMNPL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scans_Data2=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.1.csv',low_memory=False,sep=',',index_col=0)\n",
        "Scans_Data2['Key'] = Scans_Data2['Slot_id'].map(str)+ '+' +Scans_Data2['Date'].map(str) + '+' + Scans_Data2['Day Name'].map(str)+ '+' + Scans_Data2['Time_Slot'].map(str)+ '+'+Scans_Data2['Covid'].map(str)\n",
        "Scans_Data2=Scans_Data2['Key'],Scans_Data2['Time_Int'],Scans_Data2['Legality_Ilegal'],Scans_Data2['Legality_Legal']\n",
        "Headers=['Key','Time_Int','Legality_Ilegal','Legality_Legal']\n",
        "Scans_Data2 = pd.concat(Scans_Data2, axis=1, keys=Headers)\n",
        "Scans_Data2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "a35Q2VdPMOHf",
        "outputId": "5e60f880-0f77-42dc-b3a0-4af7fd43e300"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                      Key  Time_Int  Legality_Ilegal  \\\n",
              "0    17622+01/03/2018+Wednesday+55800.0+0   55500.0                0   \n",
              "1    17813+01/03/2018+Wednesday+55800.0+0   54360.0                0   \n",
              "2    17813+01/03/2018+Wednesday+55800.0+0   54420.0                1   \n",
              "3    17813+01/03/2018+Wednesday+55800.0+0   54420.0                0   \n",
              "4    17813+01/03/2018+Wednesday+55800.0+0   54420.0                0   \n",
              "..                                    ...       ...              ...   \n",
              "995   17644+01/04/2018+Thursday+45000.0+0   44460.0                0   \n",
              "996   20548+01/04/2018+Thursday+45000.0+0   46080.0                0   \n",
              "997   17182+01/04/2018+Thursday+55800.0+0   55440.0                1   \n",
              "998   20548+01/04/2018+Thursday+45000.0+0   46080.0                0   \n",
              "999      27+01/04/2018+Thursday+55800.0+0   56220.0                1   \n",
              "\n",
              "     Legality_Legal  \n",
              "0                 1  \n",
              "1                 1  \n",
              "2                 0  \n",
              "3                 1  \n",
              "4                 1  \n",
              "..              ...  \n",
              "995               1  \n",
              "996               1  \n",
              "997               0  \n",
              "998               1  \n",
              "999               0  \n",
              "\n",
              "[1000 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ac258a5-1677-4980-a675-2c6192a2ab31\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Key</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Legality_Ilegal</th>\n",
              "      <th>Legality_Legal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17622+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>55500.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17813+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>54360.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17813+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17813+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17813+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>54420.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>17644+01/04/2018+Thursday+45000.0+0</td>\n",
              "      <td>44460.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>20548+01/04/2018+Thursday+45000.0+0</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>17182+01/04/2018+Thursday+55800.0+0</td>\n",
              "      <td>55440.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>20548+01/04/2018+Thursday+45000.0+0</td>\n",
              "      <td>46080.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>27+01/04/2018+Thursday+55800.0+0</td>\n",
              "      <td>56220.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ac258a5-1677-4980-a675-2c6192a2ab31')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7ac258a5-1677-4980-a675-2c6192a2ab31 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7ac258a5-1677-4980-a675-2c6192a2ab31');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-429f585d-92a2-42eb-b874-731d133709d0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-429f585d-92a2-42eb-b874-731d133709d0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-429f585d-92a2-42eb-b874-731d133709d0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I group by and for each different key I calculate the average time of the scans, the scans that showed illegality and the scans that showed legitimacy. Essentially with this process I collect the scans to create the controls, a control consists of scans done on the same day in the same time-slot in the same sector\n",
        "\n"
      ],
      "metadata": {
        "id": "Az-_KJxnMViq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Time_Int = Scans_Data2.groupby([\"Key\"]).Time_Int.mean().reset_index()\n",
        "ILegal_Sum = Scans_Data2.groupby([\"Key\"]).Legality_Ilegal.sum().reset_index()\n",
        "Legal_Sum= Scans_Data2.groupby([\"Key\"]).Legality_Legal.sum().reset_index()\n",
        "Legal_Sum=Legal_Sum['Key'],Time_Int['Time_Int'],ILegal_Sum['Legality_Ilegal'],Legal_Sum['Legality_Legal']\n",
        "Headers=['Key','Time_Int','Legality_Ilegal','Legality_Legal']\n",
        "Legal_illegal = pd.concat(Legal_Sum, axis=1, keys=Headers)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "yNGusiyMMXG8",
        "outputId": "e6a5668f-7f66-4f97-96d9-8ed3bebee6c5"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                      Key      Time_Int  Legality_Ilegal  \\\n",
              "0       10+01/03/2018+Wednesday+55800.0+0  55873.333333                7   \n",
              "1       11+01/03/2018+Wednesday+55800.0+0  56415.000000                7   \n",
              "2    17182+01/03/2018+Wednesday+30600.0+0  29160.000000               12   \n",
              "3    17182+01/03/2018+Wednesday+37800.0+0  39600.000000                1   \n",
              "4    17182+01/03/2018+Wednesday+41400.0+0  40016.250000               14   \n",
              "..                                    ...           ...              ...   \n",
              "110     79+01/03/2018+Wednesday+55800.0+0  57600.000000                1   \n",
              "111     87+01/03/2018+Wednesday+30600.0+0  29820.000000                1   \n",
              "112     87+01/03/2018+Wednesday+41400.0+0  39720.000000                0   \n",
              "113      87+01/04/2018+Thursday+41400.0+0  42600.000000                1   \n",
              "114     88+01/03/2018+Wednesday+55800.0+0  56940.000000                0   \n",
              "\n",
              "     Legality_Legal  \n",
              "0                 2  \n",
              "1                 5  \n",
              "2                 0  \n",
              "3                 0  \n",
              "4                 2  \n",
              "..              ...  \n",
              "110               0  \n",
              "111               0  \n",
              "112               1  \n",
              "113               0  \n",
              "114               1  \n",
              "\n",
              "[115 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84364bde-2598-4235-8478-774b905b90be\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Key</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Legality_Ilegal</th>\n",
              "      <th>Legality_Legal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>55873.333333</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>56415.000000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182+01/03/2018+Wednesday+30600.0+0</td>\n",
              "      <td>29160.000000</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182+01/03/2018+Wednesday+37800.0+0</td>\n",
              "      <td>39600.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182+01/03/2018+Wednesday+41400.0+0</td>\n",
              "      <td>40016.250000</td>\n",
              "      <td>14</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>79+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>57600.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>87+01/03/2018+Wednesday+30600.0+0</td>\n",
              "      <td>29820.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>87+01/03/2018+Wednesday+41400.0+0</td>\n",
              "      <td>39720.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>87+01/04/2018+Thursday+41400.0+0</td>\n",
              "      <td>42600.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>88+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>56940.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>115 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84364bde-2598-4235-8478-774b905b90be')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-84364bde-2598-4235-8478-774b905b90be button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-84364bde-2598-4235-8478-774b905b90be');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bf5f6d8c-193d-4031-b80f-768d3e62dc01\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf5f6d8c-193d-4031-b80f-768d3e62dc01')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bf5f6d8c-193d-4031-b80f-768d3e62dc01 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I calculate how many scans I got on each check and put it in the sum column then delete all the checks that resulted from 1 or two scans\n",
        "\n"
      ],
      "metadata": {
        "id": "FxtlsqpuMbDt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal['Sum']=Legal_illegal['Legality_Ilegal']+Legal_illegal['Legality_Legal']\n",
        "Legal_illegal.drop(Legal_illegal[Legal_illegal.Sum <= 2].index, inplace=True)\n",
        "Legal_illegal=Legal_illegal.reset_index()\n",
        "del Legal_illegal[\"index\"]\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "iFln4NPSMbr5",
        "outputId": "2ce5bb17-3973-4208-ec51-31fee4559850"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     Key      Time_Int  Legality_Ilegal  \\\n",
              "0      10+01/03/2018+Wednesday+55800.0+0  55873.333333                7   \n",
              "1      11+01/03/2018+Wednesday+55800.0+0  56415.000000                7   \n",
              "2   17182+01/03/2018+Wednesday+30600.0+0  29160.000000               12   \n",
              "3   17182+01/03/2018+Wednesday+41400.0+0  40016.250000               14   \n",
              "4   17182+01/03/2018+Wednesday+59400.0+0  58903.125000               25   \n",
              "..                                   ...           ...              ...   \n",
              "74  28323+01/03/2018+Wednesday+30600.0+0  32085.000000                4   \n",
              "75  28323+01/03/2018+Wednesday+41400.0+0  41635.714286                7   \n",
              "76  28323+01/03/2018+Wednesday+55800.0+0  54570.000000                4   \n",
              "77   28323+01/04/2018+Thursday+45000.0+0  43620.000000                5   \n",
              "78      6+01/03/2018+Wednesday+55800.0+0  55200.000000                3   \n",
              "\n",
              "    Legality_Legal  Sum  \n",
              "0                2    9  \n",
              "1                5   12  \n",
              "2                0   12  \n",
              "3                2   16  \n",
              "4                7   32  \n",
              "..             ...  ...  \n",
              "74               4    8  \n",
              "75               7   14  \n",
              "76               2    6  \n",
              "77               1    6  \n",
              "78               1    4  \n",
              "\n",
              "[79 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c286835-4ad5-47a9-89a2-33ed28d3e6bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Key</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Legality_Ilegal</th>\n",
              "      <th>Legality_Legal</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>55873.333333</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>56415.000000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182+01/03/2018+Wednesday+30600.0+0</td>\n",
              "      <td>29160.000000</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182+01/03/2018+Wednesday+41400.0+0</td>\n",
              "      <td>40016.250000</td>\n",
              "      <td>14</td>\n",
              "      <td>2</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182+01/03/2018+Wednesday+59400.0+0</td>\n",
              "      <td>58903.125000</td>\n",
              "      <td>25</td>\n",
              "      <td>7</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>28323+01/03/2018+Wednesday+30600.0+0</td>\n",
              "      <td>32085.000000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>28323+01/03/2018+Wednesday+41400.0+0</td>\n",
              "      <td>41635.714286</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>28323+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>54570.000000</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>28323+01/04/2018+Thursday+45000.0+0</td>\n",
              "      <td>43620.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>6+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>55200.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c286835-4ad5-47a9-89a2-33ed28d3e6bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c286835-4ad5-47a9-89a2-33ed28d3e6bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c286835-4ad5-47a9-89a2-33ed28d3e6bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3eacdbc4-e03a-4521-9052-03a14a073deb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3eacdbc4-e03a-4521-9052-03a14a073deb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3eacdbc4-e03a-4521-9052-03a14a073deb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I calculate for each scan the violation rate with the formula -> Rate = Illegal Scans/Total Scans. I also explain in the report in more detail.\n",
        "\n"
      ],
      "metadata": {
        "id": "_6TJRZb3Me54"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scan_List2=Legal_illegal.values.tolist()\n",
        "Ilegality_Rate=[]\n",
        "for i in range (0,len(Scan_List2)):\n",
        "    if Scan_List2[i][2]==0:\n",
        "        Ilegality_Rate.append(0)\n",
        "    else:\n",
        "        Ilegality_Rate.append(Scan_List2[i][2]/(Scan_List2[i][2]+Scan_List2[i][3]))\n",
        "Legal_illegal.insert(3, \"Ilegality_Rate\", Ilegality_Rate, True)\n",
        "Legal_illegal=Legal_illegal.drop(['Legality_Ilegal'], axis=1)\n",
        "Legal_illegal=Legal_illegal.drop(['Legality_Legal'], axis=1)\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "gaya507pMgnY",
        "outputId": "31d2d1a9-f419-422e-85db-5434c724e433"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     Key      Time_Int  Ilegality_Rate  Sum\n",
              "0      10+01/03/2018+Wednesday+55800.0+0  55873.333333        0.777778    9\n",
              "1      11+01/03/2018+Wednesday+55800.0+0  56415.000000        0.583333   12\n",
              "2   17182+01/03/2018+Wednesday+30600.0+0  29160.000000        1.000000   12\n",
              "3   17182+01/03/2018+Wednesday+41400.0+0  40016.250000        0.875000   16\n",
              "4   17182+01/03/2018+Wednesday+59400.0+0  58903.125000        0.781250   32\n",
              "..                                   ...           ...             ...  ...\n",
              "74  28323+01/03/2018+Wednesday+30600.0+0  32085.000000        0.500000    8\n",
              "75  28323+01/03/2018+Wednesday+41400.0+0  41635.714286        0.500000   14\n",
              "76  28323+01/03/2018+Wednesday+55800.0+0  54570.000000        0.666667    6\n",
              "77   28323+01/04/2018+Thursday+45000.0+0  43620.000000        0.833333    6\n",
              "78      6+01/03/2018+Wednesday+55800.0+0  55200.000000        0.750000    4\n",
              "\n",
              "[79 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d0cd980-24a0-4483-b7c4-623e9519b199\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Key</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>55873.333333</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>56415.000000</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182+01/03/2018+Wednesday+30600.0+0</td>\n",
              "      <td>29160.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182+01/03/2018+Wednesday+41400.0+0</td>\n",
              "      <td>40016.250000</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182+01/03/2018+Wednesday+59400.0+0</td>\n",
              "      <td>58903.125000</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>28323+01/03/2018+Wednesday+30600.0+0</td>\n",
              "      <td>32085.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>28323+01/03/2018+Wednesday+41400.0+0</td>\n",
              "      <td>41635.714286</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>28323+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>54570.000000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>28323+01/04/2018+Thursday+45000.0+0</td>\n",
              "      <td>43620.000000</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>6+01/03/2018+Wednesday+55800.0+0</td>\n",
              "      <td>55200.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d0cd980-24a0-4483-b7c4-623e9519b199')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d0cd980-24a0-4483-b7c4-623e9519b199 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d0cd980-24a0-4483-b7c4-623e9519b199');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b23fdb46-2281-4c5f-94fd-7bb120495cbc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b23fdb46-2281-4c5f-94fd-7bb120495cbc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b23fdb46-2281-4c5f-94fd-7bb120495cbc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Again I split the string key to create the original columns that made it up (This group by process is also done in a simpler way without having to make the string columns and then make the string columns but when I did it I didn't know which is also done in a faster way with pandas)\n",
        "\n"
      ],
      "metadata": {
        "id": "35DgQQU_Mkot"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scan_List2=Legal_illegal.values.tolist()\n",
        "Slot_id=[]\n",
        "Date=[]\n",
        "Day_Name=[]\n",
        "Slot_Timeint=[]\n",
        "Covid=[]\n",
        "for i in tqdm(range(0,len(Scan_List2))):\n",
        "    Slot_id_Value,Date_Value,Day_Name_Value,Slot_Timeint_Value,Covid_Value=Scan_List2[i][0].split('+')\n",
        "    Slot_id.append(Slot_id_Value)\n",
        "    Date.append(Date_Value)\n",
        "    Day_Name.append(Day_Name_Value)\n",
        "    Slot_Timeint.append(Slot_Timeint_Value)\n",
        "    Covid.append(Covid_Value)\n",
        "Legal_illegal.insert(1, \"Slot_id\", Slot_id, True)\n",
        "Legal_illegal.insert(2, \"Date\", Date, True)\n",
        "Legal_illegal.insert(3, \"Day_Name\",  Day_Name, True)\n",
        "Legal_illegal.insert(4, \"Slot_Timeint\", Slot_Timeint, True)\n",
        "Legal_illegal.insert(5, \"Covid\", Covid, True)\n",
        "Legal_illegal=Legal_illegal.drop(['Key'], axis=1)\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "49-t0bl5MlLs",
        "outputId": "7047e0a6-6a7e-49db-dcef-f360782cf291"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 79/79 [00:00<00:00, 87774.84it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id        Date   Day_Name Slot_Timeint Covid      Time_Int  \\\n",
              "0       10  01/03/2018  Wednesday      55800.0     0  55873.333333   \n",
              "1       11  01/03/2018  Wednesday      55800.0     0  56415.000000   \n",
              "2    17182  01/03/2018  Wednesday      30600.0     0  29160.000000   \n",
              "3    17182  01/03/2018  Wednesday      41400.0     0  40016.250000   \n",
              "4    17182  01/03/2018  Wednesday      59400.0     0  58903.125000   \n",
              "..     ...         ...        ...          ...   ...           ...   \n",
              "74   28323  01/03/2018  Wednesday      30600.0     0  32085.000000   \n",
              "75   28323  01/03/2018  Wednesday      41400.0     0  41635.714286   \n",
              "76   28323  01/03/2018  Wednesday      55800.0     0  54570.000000   \n",
              "77   28323  01/04/2018   Thursday      45000.0     0  43620.000000   \n",
              "78       6  01/03/2018  Wednesday      55800.0     0  55200.000000   \n",
              "\n",
              "    Ilegality_Rate  Sum  \n",
              "0         0.777778    9  \n",
              "1         0.583333   12  \n",
              "2         1.000000   12  \n",
              "3         0.875000   16  \n",
              "4         0.781250   32  \n",
              "..             ...  ...  \n",
              "74        0.500000    8  \n",
              "75        0.500000   14  \n",
              "76        0.666667    6  \n",
              "77        0.833333    6  \n",
              "78        0.750000    4  \n",
              "\n",
              "[79 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cead08e4-4c7d-4d74-9a6f-67e981af97bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>55873.333333</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>56415.000000</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600.0</td>\n",
              "      <td>0</td>\n",
              "      <td>29160.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400.0</td>\n",
              "      <td>0</td>\n",
              "      <td>40016.250000</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400.0</td>\n",
              "      <td>0</td>\n",
              "      <td>58903.125000</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600.0</td>\n",
              "      <td>0</td>\n",
              "      <td>32085.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400.0</td>\n",
              "      <td>0</td>\n",
              "      <td>41635.714286</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>54570.000000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>43620.000000</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>6</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>55200.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cead08e4-4c7d-4d74-9a6f-67e981af97bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cead08e4-4c7d-4d74-9a6f-67e981af97bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cead08e4-4c7d-4d74-9a6f-67e981af97bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e1912326-4eaa-4be8-8909-589adb9d79cd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1912326-4eaa-4be8-8909-589adb9d79cd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e1912326-4eaa-4be8-8909-589adb9d79cd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am converting the formats of some columns so that they are not strings\n",
        "\n"
      ],
      "metadata": {
        "id": "r2G2UKE3Mon8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal['Slot_Timeint'] = Legal_illegal['Slot_Timeint'].astype(float)\n",
        "Legal_illegal['Time_Int'] = Legal_illegal['Time_Int'].astype(float)\n",
        "Legal_illegal['Slot_Timeint'] = Legal_illegal['Slot_Timeint'].astype(int)\n",
        "Legal_illegal['Time_Int'] = Legal_illegal['Time_Int'].astype(int)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "MU_2gcYsMqSt",
        "outputId": "79a3ab7b-1103-44c3-b31d-8a72d9d94957"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id        Date   Day_Name  Slot_Timeint Covid  Time_Int  \\\n",
              "0       10  01/03/2018  Wednesday         55800     0     55873   \n",
              "1       11  01/03/2018  Wednesday         55800     0     56415   \n",
              "2    17182  01/03/2018  Wednesday         30600     0     29160   \n",
              "3    17182  01/03/2018  Wednesday         41400     0     40016   \n",
              "4    17182  01/03/2018  Wednesday         59400     0     58903   \n",
              "..     ...         ...        ...           ...   ...       ...   \n",
              "74   28323  01/03/2018  Wednesday         30600     0     32085   \n",
              "75   28323  01/03/2018  Wednesday         41400     0     41635   \n",
              "76   28323  01/03/2018  Wednesday         55800     0     54570   \n",
              "77   28323  01/04/2018   Thursday         45000     0     43620   \n",
              "78       6  01/03/2018  Wednesday         55800     0     55200   \n",
              "\n",
              "    Ilegality_Rate  Sum  \n",
              "0         0.777778    9  \n",
              "1         0.583333   12  \n",
              "2         1.000000   12  \n",
              "3         0.875000   16  \n",
              "4         0.781250   32  \n",
              "..             ...  ...  \n",
              "74        0.500000    8  \n",
              "75        0.500000   14  \n",
              "76        0.666667    6  \n",
              "77        0.833333    6  \n",
              "78        0.750000    4  \n",
              "\n",
              "[79 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4317b857-1c7d-44b2-820e-3da6f430ad96\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>6</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4317b857-1c7d-44b2-820e-3da6f430ad96')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4317b857-1c7d-44b2-820e-3da6f430ad96 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4317b857-1c7d-44b2-820e-3da6f430ad96');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f4f6912f-f85c-4b1b-811c-79669a6005d8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4f6912f-f85c-4b1b-811c-79669a6005d8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f4f6912f-f85c-4b1b-811c-79669a6005d8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the file that describes the domains, and according to that I create a column in the data set that describes the capacity in places of the domain that each control refers to. (And this is done more easily with merge than pandas, but when I wrote this file I didn't know how to work with pandas to the point where I knew these functions were there ready-made)\n",
        "\n"
      ],
      "metadata": {
        "id": "OCHK_M20MtJ1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Column_Names=['Slot_id','Adress','Mean','Start','End','Capacity','Full_adress','Latitude','Longitude']\n",
        "\n",
        "Parking_Slots2=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Parkink_Slot_Proccesed.csv',sep=',', names=Column_Names)\n",
        "\n",
        "Parking_Slots2=Parking_Slots2.values.tolist()\n",
        "Scans_List2=Legal_illegal.values.tolist()\n",
        "Capacity=[]\n",
        "for i in tqdm(range(0,len(Scans_List2))):\n",
        "    for j in range (0,len(Parking_Slots2)):\n",
        "        if int(Parking_Slots2[j][0])==int(Scans_List2[i][0]):\n",
        "            c=int(Parking_Slots2[j][5])\n",
        "            Capacity.append(c)\n",
        "\n",
        "\n",
        "\n",
        "Legal_illegal.insert(7, \"Capacity\",Capacity, True)\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "j6fYr0jCMusK",
        "outputId": "1b0baca0-636b-4f8b-9ceb-2c226f795db6"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 79/79 [00:00<00:00, 4918.51it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id        Date   Day_Name  Slot_Timeint Covid  Time_Int  \\\n",
              "0       10  01/03/2018  Wednesday         55800     0     55873   \n",
              "1       11  01/03/2018  Wednesday         55800     0     56415   \n",
              "2    17182  01/03/2018  Wednesday         30600     0     29160   \n",
              "3    17182  01/03/2018  Wednesday         41400     0     40016   \n",
              "4    17182  01/03/2018  Wednesday         59400     0     58903   \n",
              "..     ...         ...        ...           ...   ...       ...   \n",
              "74   28323  01/03/2018  Wednesday         30600     0     32085   \n",
              "75   28323  01/03/2018  Wednesday         41400     0     41635   \n",
              "76   28323  01/03/2018  Wednesday         55800     0     54570   \n",
              "77   28323  01/04/2018   Thursday         45000     0     43620   \n",
              "78       6  01/03/2018  Wednesday         55800     0     55200   \n",
              "\n",
              "    Ilegality_Rate  Capacity  Sum  \n",
              "0         0.777778         6    9  \n",
              "1         0.583333        18   12  \n",
              "2         1.000000        18   12  \n",
              "3         0.875000        18   16  \n",
              "4         0.781250        18   32  \n",
              "..             ...       ...  ...  \n",
              "74        0.500000         9    8  \n",
              "75        0.500000         9   14  \n",
              "76        0.666667         9    6  \n",
              "77        0.833333         9    6  \n",
              "78        0.750000         4    4  \n",
              "\n",
              "[79 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f01ef806-d25b-4fc1-97fc-e5c895cc2c8b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>6</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f01ef806-d25b-4fc1-97fc-e5c895cc2c8b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f01ef806-d25b-4fc1-97fc-e5c895cc2c8b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f01ef806-d25b-4fc1-97fc-e5c895cc2c8b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1bc155ba-6850-4fbd-85da-56a0dd64af6d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bc155ba-6850-4fbd-85da-56a0dd64af6d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1bc155ba-6850-4fbd-85da-56a0dd64af6d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "According to the number of scans made in each domain and according to the capacity of the domain, I create the column Attention which describes to what percentage the domain was checked.\n",
        "\n"
      ],
      "metadata": {
        "id": "hqtx2C4TM49M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scan_List2=Legal_illegal.values.tolist()\n",
        "Attention=[]\n",
        "for i in range (0,len(Scan_List2)):\n",
        "    if Scan_List2[i][8]>Scan_List2[i][7]:\n",
        "        Attention.append(1)\n",
        "    else:\n",
        "        Attention.append(Scan_List2[i][8]/(Scan_List2[i][7]))\n",
        "Legal_illegal.insert(7, \"Attention\", Attention, True)\n",
        "\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "0Tcb3G5ZM6hr",
        "outputId": "954595e1-f329-4914-cde5-7d75ccaa398d"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id        Date   Day_Name  Slot_Timeint Covid  Time_Int  \\\n",
              "0       10  01/03/2018  Wednesday         55800     0     55873   \n",
              "1       11  01/03/2018  Wednesday         55800     0     56415   \n",
              "2    17182  01/03/2018  Wednesday         30600     0     29160   \n",
              "3    17182  01/03/2018  Wednesday         41400     0     40016   \n",
              "4    17182  01/03/2018  Wednesday         59400     0     58903   \n",
              "..     ...         ...        ...           ...   ...       ...   \n",
              "74   28323  01/03/2018  Wednesday         30600     0     32085   \n",
              "75   28323  01/03/2018  Wednesday         41400     0     41635   \n",
              "76   28323  01/03/2018  Wednesday         55800     0     54570   \n",
              "77   28323  01/04/2018   Thursday         45000     0     43620   \n",
              "78       6  01/03/2018  Wednesday         55800     0     55200   \n",
              "\n",
              "    Ilegality_Rate  Attention  Capacity  Sum  \n",
              "0         0.777778   1.000000         6    9  \n",
              "1         0.583333   0.666667        18   12  \n",
              "2         1.000000   0.666667        18   12  \n",
              "3         0.875000   0.888889        18   16  \n",
              "4         0.781250   1.000000        18   32  \n",
              "..             ...        ...       ...  ...  \n",
              "74        0.500000   0.888889         9    8  \n",
              "75        0.500000   1.000000         9   14  \n",
              "76        0.666667   0.666667         9    6  \n",
              "77        0.833333   0.666667         9    6  \n",
              "78        0.750000   1.000000         4    4  \n",
              "\n",
              "[79 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a17a2029-1a65-4cbb-a1b7-2df79a7c08b4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Attention</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>6</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a17a2029-1a65-4cbb-a1b7-2df79a7c08b4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a17a2029-1a65-4cbb-a1b7-2df79a7c08b4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a17a2029-1a65-4cbb-a1b7-2df79a7c08b4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f5811c25-0411-4f63-bc85-60889ff73404\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5811c25-0411-4f63-bc85-60889ff73404')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f5811c25-0411-4f63-bc85-60889ff73404 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I delete audits where less than 20% of each domain was audited\n",
        "\n"
      ],
      "metadata": {
        "id": "s0ckrIAhM9GL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal.drop(Legal_illegal[Legal_illegal.Attention <= 0.2].index, inplace=True)\n",
        "Legal_illegal.to_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_For_Analysis.csv')\n",
        "Legal_illegal=Legal_illegal.drop(['Attention'], axis=1)\n",
        "Legal_illegal=Legal_illegal.reset_index()\n",
        "del Legal_illegal[\"index\"]\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "tV-85iayM-oI",
        "outputId": "fd21d84f-f8f5-4ea9-e6a4-530d5d43a416"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id        Date   Day_Name  Slot_Timeint Covid  Time_Int  \\\n",
              "0       10  01/03/2018  Wednesday         55800     0     55873   \n",
              "1       11  01/03/2018  Wednesday         55800     0     56415   \n",
              "2    17182  01/03/2018  Wednesday         30600     0     29160   \n",
              "3    17182  01/03/2018  Wednesday         41400     0     40016   \n",
              "4    17182  01/03/2018  Wednesday         59400     0     58903   \n",
              "..     ...         ...        ...           ...   ...       ...   \n",
              "69   28323  01/03/2018  Wednesday         30600     0     32085   \n",
              "70   28323  01/03/2018  Wednesday         41400     0     41635   \n",
              "71   28323  01/03/2018  Wednesday         55800     0     54570   \n",
              "72   28323  01/04/2018   Thursday         45000     0     43620   \n",
              "73       6  01/03/2018  Wednesday         55800     0     55200   \n",
              "\n",
              "    Ilegality_Rate  Capacity  Sum  \n",
              "0         0.777778         6    9  \n",
              "1         0.583333        18   12  \n",
              "2         1.000000        18   12  \n",
              "3         0.875000        18   16  \n",
              "4         0.781250        18   32  \n",
              "..             ...       ...  ...  \n",
              "69        0.500000         9    8  \n",
              "70        0.500000         9   14  \n",
              "71        0.666667         9    6  \n",
              "72        0.833333         9    6  \n",
              "73        0.750000         4    4  \n",
              "\n",
              "[74 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-031cb7b0-7f0a-4652-9c2c-ac991c87e3f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-031cb7b0-7f0a-4652-9c2c-ac991c87e3f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-031cb7b0-7f0a-4652-9c2c-ac991c87e3f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-031cb7b0-7f0a-4652-9c2c-ac991c87e3f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ac054650-3d8f-4364-802b-994c34c99582\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac054650-3d8f-4364-802b-994c34c99582')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ac054650-3d8f-4364-802b-994c34c99582 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the file that describes the public holidays and create a column based on it that describes in a binary way whether the check was made on a public holiday or not.\n",
        "\n"
      ],
      "metadata": {
        "id": "W34aZDo0NIbp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Holidays= pd.read_csv('/content/drive/MyDrive/Thesis/Data/Holidays.txt', header = None,names=['Holidays'])\n",
        "Holidays_List=Holidays.values.tolist()\n",
        "Scan_List2=Legal_illegal.values.tolist()\n",
        "Holidays=[]\n",
        "for i in tqdm(range(0,len(Scan_List2))):\n",
        "    Boulean=False\n",
        "    for j in range (0,len(Holidays_List)):\n",
        "        if Scan_List2[i][1]==Holidays_List[j][0]:\n",
        "            Boulean=True\n",
        "\n",
        "    if Boulean:\n",
        "        Holidays.append(1)\n",
        "    else:\n",
        "        Holidays.append(0)\n",
        "\n",
        "Legal_illegal.insert(7, \"Holidays\", Holidays, True)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "bS2hNGKNNJHE",
        "outputId": "bb7de2b7-ba45-4024-9354-ecbd79ffcff7"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 74/74 [00:00<00:00, 22363.17it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id        Date   Day_Name  Slot_Timeint Covid  Time_Int  \\\n",
              "0       10  01/03/2018  Wednesday         55800     0     55873   \n",
              "1       11  01/03/2018  Wednesday         55800     0     56415   \n",
              "2    17182  01/03/2018  Wednesday         30600     0     29160   \n",
              "3    17182  01/03/2018  Wednesday         41400     0     40016   \n",
              "4    17182  01/03/2018  Wednesday         59400     0     58903   \n",
              "..     ...         ...        ...           ...   ...       ...   \n",
              "69   28323  01/03/2018  Wednesday         30600     0     32085   \n",
              "70   28323  01/03/2018  Wednesday         41400     0     41635   \n",
              "71   28323  01/03/2018  Wednesday         55800     0     54570   \n",
              "72   28323  01/04/2018   Thursday         45000     0     43620   \n",
              "73       6  01/03/2018  Wednesday         55800     0     55200   \n",
              "\n",
              "    Ilegality_Rate  Holidays  Capacity  Sum  \n",
              "0         0.777778         0         6    9  \n",
              "1         0.583333         0        18   12  \n",
              "2         1.000000         0        18   12  \n",
              "3         0.875000         0        18   16  \n",
              "4         0.781250         0        18   32  \n",
              "..             ...       ...       ...  ...  \n",
              "69        0.500000         0         9    8  \n",
              "70        0.500000         0         9   14  \n",
              "71        0.666667         0         9    6  \n",
              "72        0.833333         0         9    6  \n",
              "73        0.750000         0         4    4  \n",
              "\n",
              "[74 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d118d6e9-5f38-4426-83e6-c0bbfa93a321\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Date</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>01/04/2018</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>01/03/2018</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d118d6e9-5f38-4426-83e6-c0bbfa93a321')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d118d6e9-5f38-4426-83e6-c0bbfa93a321 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d118d6e9-5f38-4426-83e6-c0bbfa93a321');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c1793a33-fd5c-49ce-8048-e31ee81c88a4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1793a33-fd5c-49ce-8048-e31ee81c88a4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c1793a33-fd5c-49ce-8048-e31ee81c88a4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I parse the Date column into: days of the month, month, year\n",
        "\n"
      ],
      "metadata": {
        "id": "w-IzRUT0NQ0z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Scan_List2=Legal_illegal.values.tolist()\n",
        "\n",
        "Date=[]\n",
        "Year=[]\n",
        "Mounth=[]\n",
        "Key_Date=[]\n",
        "\n",
        "for i in tqdm(range(0,len(Scan_List2))):\n",
        "    m,d,y=Scan_List2[i][1].split('/')\n",
        "    Mounth.append(int(m))\n",
        "    Date.append(int(d))\n",
        "    Year.append(int(y))\n",
        "    D=y + '-' + m + '-' +d\n",
        "    Key_Date.append(D)\n",
        "\n",
        "Legal_illegal.insert(1, \"Key_Date\", Key_Date, True)\n",
        "Legal_illegal.insert(2, \"Date_Of_Month\", Date, True)\n",
        "Legal_illegal.insert(3, \"Year\", Year, True)\n",
        "Legal_illegal.insert(4, \"Month\", Mounth, True)\n",
        "Legal_illegal=Legal_illegal.drop(['Date'], axis=1)\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "6YgyM8ucNRKr",
        "outputId": "e7b7b75d-5c09-4462-886f-89ac556b64bd"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 74/74 [00:00<00:00, 28688.28it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Slot_id    Key_Date  Date_Of_Month  Year  Month   Day_Name  Slot_Timeint  \\\n",
              "0       10  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "1       11  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "2    17182  2018-01-03              3  2018      1  Wednesday         30600   \n",
              "3    17182  2018-01-03              3  2018      1  Wednesday         41400   \n",
              "4    17182  2018-01-03              3  2018      1  Wednesday         59400   \n",
              "..     ...         ...            ...   ...    ...        ...           ...   \n",
              "69   28323  2018-01-03              3  2018      1  Wednesday         30600   \n",
              "70   28323  2018-01-03              3  2018      1  Wednesday         41400   \n",
              "71   28323  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "72   28323  2018-01-04              4  2018      1   Thursday         45000   \n",
              "73       6  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "\n",
              "   Covid  Time_Int  Ilegality_Rate  Holidays  Capacity  Sum  \n",
              "0      0     55873        0.777778         0         6    9  \n",
              "1      0     56415        0.583333         0        18   12  \n",
              "2      0     29160        1.000000         0        18   12  \n",
              "3      0     40016        0.875000         0        18   16  \n",
              "4      0     58903        0.781250         0        18   32  \n",
              "..   ...       ...             ...       ...       ...  ...  \n",
              "69     0     32085        0.500000         0         9    8  \n",
              "70     0     41635        0.500000         0         9   14  \n",
              "71     0     54570        0.666667         0         9    6  \n",
              "72     0     43620        0.833333         0         9    6  \n",
              "73     0     55200        0.750000         0         4    4  \n",
              "\n",
              "[74 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f87d6f52-bfed-4af0-8147-06b90e714644\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key_Date</th>\n",
              "      <th>Date_Of_Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>4</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f87d6f52-bfed-4af0-8147-06b90e714644')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f87d6f52-bfed-4af0-8147-06b90e714644 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f87d6f52-bfed-4af0-8147-06b90e714644');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a1bb0ed9-012a-4c0a-b380-1ace59532623\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1bb0ed9-012a-4c0a-b380-1ace59532623')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a1bb0ed9-012a-4c0a-b380-1ace59532623 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I save the Dataframe as a csv so that I have this point as a checkpoint\n",
        "\n"
      ],
      "metadata": {
        "id": "vjaDVP7sNV02"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal.to_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.2.csv')\n"
      ],
      "metadata": {
        "id": "GOPoUu4KNWXx"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.2.csv',sep=',',index_col=0)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "PwilcCb3NfWz",
        "outputId": "a263a273-23f1-4a6e-ae50-a5a95ab88745"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Slot_id    Key_Date  Date_Of_Month  Year  Month   Day_Name  Slot_Timeint  \\\n",
              "0        10  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "1        11  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "2     17182  2018-01-03              3  2018      1  Wednesday         30600   \n",
              "3     17182  2018-01-03              3  2018      1  Wednesday         41400   \n",
              "4     17182  2018-01-03              3  2018      1  Wednesday         59400   \n",
              "..      ...         ...            ...   ...    ...        ...           ...   \n",
              "69    28323  2018-01-03              3  2018      1  Wednesday         30600   \n",
              "70    28323  2018-01-03              3  2018      1  Wednesday         41400   \n",
              "71    28323  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "72    28323  2018-01-04              4  2018      1   Thursday         45000   \n",
              "73        6  2018-01-03              3  2018      1  Wednesday         55800   \n",
              "\n",
              "    Covid  Time_Int  Ilegality_Rate  Holidays  Capacity  Sum  \n",
              "0       0     55873        0.777778         0         6    9  \n",
              "1       0     56415        0.583333         0        18   12  \n",
              "2       0     29160        1.000000         0        18   12  \n",
              "3       0     40016        0.875000         0        18   16  \n",
              "4       0     58903        0.781250         0        18   32  \n",
              "..    ...       ...             ...       ...       ...  ...  \n",
              "69      0     32085        0.500000         0         9    8  \n",
              "70      0     41635        0.500000         0         9   14  \n",
              "71      0     54570        0.666667         0         9    6  \n",
              "72      0     43620        0.833333         0         9    6  \n",
              "73      0     55200        0.750000         0         4    4  \n",
              "\n",
              "[74 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc805e1e-17ce-4030-b238-cb52f88a3a63\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key_Date</th>\n",
              "      <th>Date_Of_Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day_Name</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>4</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc805e1e-17ce-4030-b238-cb52f88a3a63')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc805e1e-17ce-4030-b238-cb52f88a3a63 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc805e1e-17ce-4030-b238-cb52f88a3a63');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-502ffac3-1e38-4f28-8492-0b4fc29abb3b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-502ffac3-1e38-4f28-8492-0b4fc29abb3b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-502ffac3-1e38-4f28-8492-0b4fc29abb3b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I convert the days of the week into numbers, i.e. the second became 1 the third became 2 etc etc so that I can format it afterwards\n",
        "\n"
      ],
      "metadata": {
        "id": "h08AXzJhNi3L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List=Legal_illegal.values.tolist()\n",
        "Week_Day=[]\n",
        "Legal_illegal=Legal_illegal.drop(['Day_Name'], axis=1)\n",
        "Day_Name_To_Day_Slot=[['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],[1,2,3,4,5,6,7]]\n",
        "for i in tqdm(range(0,len(List))):\n",
        "    for j in range(0,7):\n",
        "        if List[i][5]==Day_Name_To_Day_Slot[0][j]:\n",
        "            Week_Day.append(Day_Name_To_Day_Slot[1][j])\n",
        "\n",
        "Legal_illegal.insert(2, \"Week_Day\", Week_Day, True)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "r37F7_gcNm4X",
        "outputId": "ce9593a8-68d9-45a5-c99c-096d0c737e96"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 74/74 [00:00<00:00, 78437.83it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Slot_id    Key_Date  Week_Day  Date_Of_Month  Year  Month  Slot_Timeint  \\\n",
              "0        10  2018-01-03         3              3  2018      1         55800   \n",
              "1        11  2018-01-03         3              3  2018      1         55800   \n",
              "2     17182  2018-01-03         3              3  2018      1         30600   \n",
              "3     17182  2018-01-03         3              3  2018      1         41400   \n",
              "4     17182  2018-01-03         3              3  2018      1         59400   \n",
              "..      ...         ...       ...            ...   ...    ...           ...   \n",
              "69    28323  2018-01-03         3              3  2018      1         30600   \n",
              "70    28323  2018-01-03         3              3  2018      1         41400   \n",
              "71    28323  2018-01-03         3              3  2018      1         55800   \n",
              "72    28323  2018-01-04         4              4  2018      1         45000   \n",
              "73        6  2018-01-03         3              3  2018      1         55800   \n",
              "\n",
              "    Covid  Time_Int  Ilegality_Rate  Holidays  Capacity  Sum  \n",
              "0       0     55873        0.777778         0         6    9  \n",
              "1       0     56415        0.583333         0        18   12  \n",
              "2       0     29160        1.000000         0        18   12  \n",
              "3       0     40016        0.875000         0        18   16  \n",
              "4       0     58903        0.781250         0        18   32  \n",
              "..    ...       ...             ...       ...       ...  ...  \n",
              "69      0     32085        0.500000         0         9    8  \n",
              "70      0     41635        0.500000         0         9   14  \n",
              "71      0     54570        0.666667         0         9    6  \n",
              "72      0     43620        0.833333         0         9    6  \n",
              "73      0     55200        0.750000         0         4    4  \n",
              "\n",
              "[74 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4dafbe6-01f3-473a-b2bd-3983c062f602\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key_Date</th>\n",
              "      <th>Week_Day</th>\n",
              "      <th>Date_Of_Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4dafbe6-01f3-473a-b2bd-3983c062f602')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4dafbe6-01f3-473a-b2bd-3983c062f602 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4dafbe6-01f3-473a-b2bd-3983c062f602');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-94f26cce-b0d9-4894-8e39-241c56d0b627\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-94f26cce-b0d9-4894-8e39-241c56d0b627')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-94f26cce-b0d9-4894-8e39-241c56d0b627 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am converting the days of the week to semicolons\n",
        "\n"
      ],
      "metadata": {
        "id": "5DMArsM6Nph3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def encode(data, col, max_val):\n",
        "    data[col + '_Sin'] = np.cos(2 * np.pi * data[col]/max_val)\n",
        "    return data\n",
        "Legal_illegal = encode(Legal_illegal, 'Week_Day', 7)\n",
        "Legal_illegal = encode(Legal_illegal, 'Month', 12)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "Gd8HwWgdNrE1",
        "outputId": "cd3dbb38-cddc-41a4-840e-24b08cb67980"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Slot_id    Key_Date  Week_Day  Date_Of_Month  Year  Month  Slot_Timeint  \\\n",
              "0        10  2018-01-03         3              3  2018      1         55800   \n",
              "1        11  2018-01-03         3              3  2018      1         55800   \n",
              "2     17182  2018-01-03         3              3  2018      1         30600   \n",
              "3     17182  2018-01-03         3              3  2018      1         41400   \n",
              "4     17182  2018-01-03         3              3  2018      1         59400   \n",
              "..      ...         ...       ...            ...   ...    ...           ...   \n",
              "69    28323  2018-01-03         3              3  2018      1         30600   \n",
              "70    28323  2018-01-03         3              3  2018      1         41400   \n",
              "71    28323  2018-01-03         3              3  2018      1         55800   \n",
              "72    28323  2018-01-04         4              4  2018      1         45000   \n",
              "73        6  2018-01-03         3              3  2018      1         55800   \n",
              "\n",
              "    Covid  Time_Int  Ilegality_Rate  Holidays  Capacity  Sum  Week_Day_Sin  \\\n",
              "0       0     55873        0.777778         0         6    9     -0.900969   \n",
              "1       0     56415        0.583333         0        18   12     -0.900969   \n",
              "2       0     29160        1.000000         0        18   12     -0.900969   \n",
              "3       0     40016        0.875000         0        18   16     -0.900969   \n",
              "4       0     58903        0.781250         0        18   32     -0.900969   \n",
              "..    ...       ...             ...       ...       ...  ...           ...   \n",
              "69      0     32085        0.500000         0         9    8     -0.900969   \n",
              "70      0     41635        0.500000         0         9   14     -0.900969   \n",
              "71      0     54570        0.666667         0         9    6     -0.900969   \n",
              "72      0     43620        0.833333         0         9    6     -0.900969   \n",
              "73      0     55200        0.750000         0         4    4     -0.900969   \n",
              "\n",
              "    Month_Sin  \n",
              "0    0.866025  \n",
              "1    0.866025  \n",
              "2    0.866025  \n",
              "3    0.866025  \n",
              "4    0.866025  \n",
              "..        ...  \n",
              "69   0.866025  \n",
              "70   0.866025  \n",
              "71   0.866025  \n",
              "72   0.866025  \n",
              "73   0.866025  \n",
              "\n",
              "[74 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d1a846f-f7a2-419d-8ee9-16914992b4ae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key_Date</th>\n",
              "      <th>Week_Day</th>\n",
              "      <th>Date_Of_Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Sum</th>\n",
              "      <th>Week_Day_Sin</th>\n",
              "      <th>Month_Sin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>32</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d1a846f-f7a2-419d-8ee9-16914992b4ae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9d1a846f-f7a2-419d-8ee9-16914992b4ae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9d1a846f-f7a2-419d-8ee9-16914992b4ae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1354ce68-ddba-4b0b-80cd-6834d70ecb2b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1354ce68-ddba-4b0b-80cd-6834d70ecb2b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1354ce68-ddba-4b0b-80cd-6834d70ecb2b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I convert the days of the month to sine and pay attention to how many days each month has. February was thought to always have 29 days\n",
        "\n"
      ],
      "metadata": {
        "id": "QI5VACI0Ntbc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List=Legal_illegal.values.tolist()\n",
        "Date_Sin=[]\n",
        "Month_Sin_Rules=[[1,2,3,4,5,6,7,8,9,10,11,12],[31,29,31,30,31,30,31,31,30,31,30,31]] #Κανόνες με τις μέρες που έχει ο κάθε μήνας\n",
        "for i in tqdm(range(0,len(List))):\n",
        "    for j in range(0,12):\n",
        "        if List[i][5]==Month_Sin_Rules[0][j]:\n",
        "            Max=Month_Sin_Rules[1][j]\n",
        "    sin=np.sin(2 * np.pi * List[i][2]/Max)\n",
        "    Date_Sin.append(sin)\n",
        "Legal_illegal.insert(2, \"Date_Sin\", Date_Sin, True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gEzGfm0gNvYc",
        "outputId": "dbd30377-4777-459b-9010-bea88040c28d"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 74/74 [00:00<00:00, 54827.50it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I delete the columns that describe the month days etc. Since now I have columns that capture these features in sine\n",
        "\n"
      ],
      "metadata": {
        "id": "0IqzGKI5N023"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal=Legal_illegal.drop(['Week_Day'], axis=1)\n",
        "Legal_illegal=Legal_illegal.drop(['Month'], axis=1)\n",
        "Legal_illegal=Legal_illegal.drop(['Date_Of_Month'], axis=1)\n",
        "Legal_illegal=Legal_illegal.drop(['Sum'], axis=1)\n",
        "Legal_illegal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "Xuf4W-ExN1eC",
        "outputId": "941e9b17-26fb-4257-b64d-59cf914d26ed"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Slot_id    Key_Date  Date_Sin  Year  Slot_Timeint  Covid  Time_Int  \\\n",
              "0        10  2018-01-03  0.571268  2018         55800      0     55873   \n",
              "1        11  2018-01-03  0.571268  2018         55800      0     56415   \n",
              "2     17182  2018-01-03  0.571268  2018         30600      0     29160   \n",
              "3     17182  2018-01-03  0.571268  2018         41400      0     40016   \n",
              "4     17182  2018-01-03  0.571268  2018         59400      0     58903   \n",
              "..      ...         ...       ...   ...           ...    ...       ...   \n",
              "69    28323  2018-01-03  0.571268  2018         30600      0     32085   \n",
              "70    28323  2018-01-03  0.571268  2018         41400      0     41635   \n",
              "71    28323  2018-01-03  0.571268  2018         55800      0     54570   \n",
              "72    28323  2018-01-04  0.724793  2018         45000      0     43620   \n",
              "73        6  2018-01-03  0.571268  2018         55800      0     55200   \n",
              "\n",
              "    Ilegality_Rate  Holidays  Capacity  Week_Day_Sin  Month_Sin  \n",
              "0         0.777778         0         6     -0.900969   0.866025  \n",
              "1         0.583333         0        18     -0.900969   0.866025  \n",
              "2         1.000000         0        18     -0.900969   0.866025  \n",
              "3         0.875000         0        18     -0.900969   0.866025  \n",
              "4         0.781250         0        18     -0.900969   0.866025  \n",
              "..             ...       ...       ...           ...        ...  \n",
              "69        0.500000         0         9     -0.900969   0.866025  \n",
              "70        0.500000         0         9     -0.900969   0.866025  \n",
              "71        0.666667         0         9     -0.900969   0.866025  \n",
              "72        0.833333         0         9     -0.900969   0.866025  \n",
              "73        0.750000         0         4     -0.900969   0.866025  \n",
              "\n",
              "[74 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a929f8f-e22a-4056-a144-d21b67c7fba5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key_Date</th>\n",
              "      <th>Date_Sin</th>\n",
              "      <th>Year</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Week_Day_Sin</th>\n",
              "      <th>Month_Sin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04</td>\n",
              "      <td>0.724793</td>\n",
              "      <td>2018</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a929f8f-e22a-4056-a144-d21b67c7fba5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4a929f8f-e22a-4056-a144-d21b67c7fba5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4a929f8f-e22a-4056-a144-d21b67c7fba5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-adacfea2-288e-48d8-bb6a-2d6c3ae094d2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-adacfea2-288e-48d8-bb6a-2d6c3ae094d2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-adacfea2-288e-48d8-bb6a-2d6c3ae094d2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the date and time I create a column that I call key. The key column describes the date and time without describing the minutes of the time. I make it in this format because hourly temperatures from the weather data are also described in this format. So I create this column to merge with the weather data later\n",
        "\n"
      ],
      "metadata": {
        "id": "oT1WqVskN6YV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Time=Legal_illegal['Slot_Timeint']/3600 #convert seconds to hours\n",
        "Time=Time.astype(int) #i only get the hour and not the minutes\n",
        "Time=Time.values.tolist()\n",
        "NewT=[]\n",
        "for i in range (0,len(Time)):\n",
        "    Str=str(Time[i])\n",
        "    if Time[i]>=10:\n",
        "        NewT.append(Str)\n",
        "    else:\n",
        "        NewT.append('0'+Str)\n",
        "\n",
        "\n",
        "Time=pd.DataFrame(NewT,columns=[\"Hour\"])\n",
        "\n",
        "\n",
        "Time= Time[\"Hour\"].map(str)+ ':00'\n",
        "Key_Weather=Legal_illegal['Key_Date'].map(str) + ' ' + Time\n",
        "Legal_illegal=Legal_illegal.drop(['Key_Date'], axis=1)\n",
        "Legal_illegal.insert(1, \"Key\", Key_Weather, True)\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "P2mPAjWBN62T",
        "outputId": "e303ec4b-150d-46a5-ba36-0a43a1e217a8"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Slot_id               Key  Date_Sin  Year  Slot_Timeint  Covid  Time_Int  \\\n",
              "0        10  2018-01-03 15:00  0.571268  2018         55800      0     55873   \n",
              "1        11  2018-01-03 15:00  0.571268  2018         55800      0     56415   \n",
              "2     17182  2018-01-03 08:00  0.571268  2018         30600      0     29160   \n",
              "3     17182  2018-01-03 11:00  0.571268  2018         41400      0     40016   \n",
              "4     17182  2018-01-03 16:00  0.571268  2018         59400      0     58903   \n",
              "..      ...               ...       ...   ...           ...    ...       ...   \n",
              "69    28323  2018-01-03 08:00  0.571268  2018         30600      0     32085   \n",
              "70    28323  2018-01-03 11:00  0.571268  2018         41400      0     41635   \n",
              "71    28323  2018-01-03 15:00  0.571268  2018         55800      0     54570   \n",
              "72    28323  2018-01-04 12:00  0.724793  2018         45000      0     43620   \n",
              "73        6  2018-01-03 15:00  0.571268  2018         55800      0     55200   \n",
              "\n",
              "    Ilegality_Rate  Holidays  Capacity  Week_Day_Sin  Month_Sin  \n",
              "0         0.777778         0         6     -0.900969   0.866025  \n",
              "1         0.583333         0        18     -0.900969   0.866025  \n",
              "2         1.000000         0        18     -0.900969   0.866025  \n",
              "3         0.875000         0        18     -0.900969   0.866025  \n",
              "4         0.781250         0        18     -0.900969   0.866025  \n",
              "..             ...       ...       ...           ...        ...  \n",
              "69        0.500000         0         9     -0.900969   0.866025  \n",
              "70        0.500000         0         9     -0.900969   0.866025  \n",
              "71        0.666667         0         9     -0.900969   0.866025  \n",
              "72        0.833333         0         9     -0.900969   0.866025  \n",
              "73        0.750000         0         4     -0.900969   0.866025  \n",
              "\n",
              "[74 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88142071-59fc-412d-8044-1b45541d8b26\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key</th>\n",
              "      <th>Date_Sin</th>\n",
              "      <th>Year</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Week_Day_Sin</th>\n",
              "      <th>Month_Sin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55873</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>56415</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03 08:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>29160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03 11:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>40016</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03 16:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>59400</td>\n",
              "      <td>0</td>\n",
              "      <td>58903</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03 08:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>30600</td>\n",
              "      <td>0</td>\n",
              "      <td>32085</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03 11:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>41400</td>\n",
              "      <td>0</td>\n",
              "      <td>41635</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>54570</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04 12:00</td>\n",
              "      <td>0.724793</td>\n",
              "      <td>2018</td>\n",
              "      <td>45000</td>\n",
              "      <td>0</td>\n",
              "      <td>43620</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>2018</td>\n",
              "      <td>55800</td>\n",
              "      <td>0</td>\n",
              "      <td>55200</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88142071-59fc-412d-8044-1b45541d8b26')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88142071-59fc-412d-8044-1b45541d8b26 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88142071-59fc-412d-8044-1b45541d8b26');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f8c2c70a-dee7-4929-8539-36b8228fa7b7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f8c2c70a-dee7-4929-8539-36b8228fa7b7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f8c2c70a-dee7-4929-8539-36b8228fa7b7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I convert the columns that capture the timeslot and premarital time to be in the range 0-1 and delete the column that captures the time as I don't need it\n",
        "\n"
      ],
      "metadata": {
        "id": "vdBvAj4TN-5-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal['Slot_Timeint']=Legal_illegal['Slot_Timeint']/timedelta(days=1).total_seconds()\n",
        "Legal_illegal['Time_Int']=Legal_illegal['Time_Int']/timedelta(days=1).total_seconds()\n",
        "Legal_illegal=Legal_illegal.drop(['Year'],axis=1)\n"
      ],
      "metadata": {
        "id": "2-rR_IwXN_Y_"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I save the DataFrame as 'Scan_Data_Reg_2.3.csv'. Where and this is the final file that will go on the notebook that I train the model on.\n",
        "\n"
      ],
      "metadata": {
        "id": "gflDpE0BOC2U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal.to_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.3.csv')\n",
        "Legal_illegal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "1B6RRqqeODW5",
        "outputId": "0b0d5c05-a299-45fa-c11b-cdeff83edda3"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Slot_id               Key  Date_Sin  Slot_Timeint  Covid  Time_Int  \\\n",
              "0        10  2018-01-03 15:00  0.571268      0.645833      0  0.646678   \n",
              "1        11  2018-01-03 15:00  0.571268      0.645833      0  0.652951   \n",
              "2     17182  2018-01-03 08:00  0.571268      0.354167      0  0.337500   \n",
              "3     17182  2018-01-03 11:00  0.571268      0.479167      0  0.463148   \n",
              "4     17182  2018-01-03 16:00  0.571268      0.687500      0  0.681748   \n",
              "..      ...               ...       ...           ...    ...       ...   \n",
              "69    28323  2018-01-03 08:00  0.571268      0.354167      0  0.371354   \n",
              "70    28323  2018-01-03 11:00  0.571268      0.479167      0  0.481887   \n",
              "71    28323  2018-01-03 15:00  0.571268      0.645833      0  0.631597   \n",
              "72    28323  2018-01-04 12:00  0.724793      0.520833      0  0.504861   \n",
              "73        6  2018-01-03 15:00  0.571268      0.645833      0  0.638889   \n",
              "\n",
              "    Ilegality_Rate  Holidays  Capacity  Week_Day_Sin  Month_Sin  \n",
              "0         0.777778         0         6     -0.900969   0.866025  \n",
              "1         0.583333         0        18     -0.900969   0.866025  \n",
              "2         1.000000         0        18     -0.900969   0.866025  \n",
              "3         0.875000         0        18     -0.900969   0.866025  \n",
              "4         0.781250         0        18     -0.900969   0.866025  \n",
              "..             ...       ...       ...           ...        ...  \n",
              "69        0.500000         0         9     -0.900969   0.866025  \n",
              "70        0.500000         0         9     -0.900969   0.866025  \n",
              "71        0.666667         0         9     -0.900969   0.866025  \n",
              "72        0.833333         0         9     -0.900969   0.866025  \n",
              "73        0.750000         0         4     -0.900969   0.866025  \n",
              "\n",
              "[74 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8671619-6f58-474a-a481-30a616af73f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Slot_id</th>\n",
              "      <th>Key</th>\n",
              "      <th>Date_Sin</th>\n",
              "      <th>Slot_Timeint</th>\n",
              "      <th>Covid</th>\n",
              "      <th>Time_Int</th>\n",
              "      <th>Ilegality_Rate</th>\n",
              "      <th>Holidays</th>\n",
              "      <th>Capacity</th>\n",
              "      <th>Week_Day_Sin</th>\n",
              "      <th>Month_Sin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.645833</td>\n",
              "      <td>0</td>\n",
              "      <td>0.646678</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.645833</td>\n",
              "      <td>0</td>\n",
              "      <td>0.652951</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03 08:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.354167</td>\n",
              "      <td>0</td>\n",
              "      <td>0.337500</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03 11:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.479167</td>\n",
              "      <td>0</td>\n",
              "      <td>0.463148</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17182</td>\n",
              "      <td>2018-01-03 16:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.687500</td>\n",
              "      <td>0</td>\n",
              "      <td>0.681748</td>\n",
              "      <td>0.781250</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03 08:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.354167</td>\n",
              "      <td>0</td>\n",
              "      <td>0.371354</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03 11:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.479167</td>\n",
              "      <td>0</td>\n",
              "      <td>0.481887</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.645833</td>\n",
              "      <td>0</td>\n",
              "      <td>0.631597</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>28323</td>\n",
              "      <td>2018-01-04 12:00</td>\n",
              "      <td>0.724793</td>\n",
              "      <td>0.520833</td>\n",
              "      <td>0</td>\n",
              "      <td>0.504861</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>6</td>\n",
              "      <td>2018-01-03 15:00</td>\n",
              "      <td>0.571268</td>\n",
              "      <td>0.645833</td>\n",
              "      <td>0</td>\n",
              "      <td>0.638889</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>-0.900969</td>\n",
              "      <td>0.866025</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8671619-6f58-474a-a481-30a616af73f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8671619-6f58-474a-a481-30a616af73f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8671619-6f58-474a-a481-30a616af73f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cd00bc17-475b-4b68-ab87-4dc292ff795e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cd00bc17-475b-4b68-ab87-4dc292ff795e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cd00bc17-475b-4b68-ab87-4dc292ff795e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model is trained in this Notebook\n"
      ],
      "metadata": {
        "id": "h6P4rIyaPcd5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Data Proccesing\n",
        "import folium\n",
        "import pandas as pd\n",
        "#Model\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import sklearn\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "import pickle\n",
        "from sklearn.utils import shuffle\n",
        "from tensorflow.keras.layers import Input, Dense,add\n",
        "from tensorflow.keras.models import Model\n",
        "from datetime import timedelta\n",
        "from tqdm import tqdm\n",
        "Project_Path='Local Path'\n"
      ],
      "metadata": {
        "id": "nRWHvQL-PVID"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "First I load the Dataset 'Legal_Illegal', the weather file 'Final_Weather_Data', and the distance domain file from the 19 points of interest 'Distance_Data'. I split the Dataset into 80% train-set and 20% test-set and then I save them in separate files so I always have the same train-set and test-set to know if each change helps.\n",
        "\n"
      ],
      "metadata": {
        "id": "wLNc7fRFPlDJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Distance_Data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Distance.csv',sep=',',index_col=0)\n",
        "Final_Weather_Data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Final_Weather_Data.csv',low_memory=False,sep=',',index_col=0)\n",
        "Legal_illegal=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.3.csv',sep=',',index_col=0)\n",
        "\n",
        "train_data,test_data = train_test_split(Legal_illegal,test_size=0.2,random_state=42)\n",
        "train_data.to_csv('/content/drive/MyDrive/Thesis/Data/Train.csv')\n",
        "test_data.to_csv('/content/drive/MyDrive/Thesis/Data/Test.csv')\n",
        "\n",
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "test_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Test.csv',sep=',',index_col=0)\n"
      ],
      "metadata": {
        "id": "HFzkreDdPlss"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The cells below are functions used throughout the file during training\n",
        "\n",
        "With this function I normalize the values to an interval of 0.1-0.9\n",
        "\n"
      ],
      "metadata": {
        "id": "seqo7EqnP4iP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Normalization(Targets):\n",
        "    Targets = (((0.9-0.1) * (Targets - 0)) / (1 - 0)) + 0.1\n",
        "    return Targets\n"
      ],
      "metadata": {
        "id": "9-t7k1fYP4-d"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "With this function I do the inverse normalization of the \"Normalization\" function above\n",
        "\n"
      ],
      "metadata": {
        "id": "yvc-UEAqP9He"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Inverse_Normalization(Targets):\n",
        "    Targets=(Targets-0.1)/0.8\n",
        "    return Targets\n"
      ],
      "metadata": {
        "id": "WZWQ8iuVP9y5"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "With this function I calculate the actual mae of normalized predictions and targets\n",
        "\n"
      ],
      "metadata": {
        "id": "OU56smpzQAlh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def MAE(y_true, y_pred):\n",
        "    y_true=Inverse_Normalization(y_true)\n",
        "    y_pred=Inverse_Normalization(y_pred)\n",
        "    MAE=tf.keras.metrics.mean_absolute_error(y_true, y_pred)\n",
        "    return MAE\n"
      ],
      "metadata": {
        "id": "YyNoA7G0QB8t"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "With this function I calculate the true mse of normalized predictions and targets\n",
        "\n"
      ],
      "metadata": {
        "id": "SZSqHxsVQrdm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def MSE(y_true, y_pred):\n",
        "    y_true=Inverse_Normalization(y_true)\n",
        "    y_pred=Inverse_Normalization(y_pred)\n",
        "    MSE=tf.keras.metrics.mean_squared_error(y_true, y_pred)\n",
        "    return MSE\n"
      ],
      "metadata": {
        "id": "x0oWURodQr7F"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def MAPE(y_true, y_pred):\n",
        "    y_true=Inverse_Normalization(y_true)\n",
        "    y_pred=Inverse_Normalization(y_pred)\n",
        "    MAPE=tf.keras.metrics.mean_absolute_percentage_error (y_true, y_pred)\n",
        "    return MAPE"
      ],
      "metadata": {
        "id": "CgYwqKTjRAJv"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This function accepts train-set and test-set. It applies standardization to them and returns them\n",
        "\n"
      ],
      "metadata": {
        "id": "6SMeWRQtRC4Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Scaller(Train,Test):\n",
        "    Standar_Scaller = StandardScaler()\n",
        "    Scalled_Train_data=Standar_Scaller.fit_transform(Train)\n",
        "    Scalled_val_data = Standar_Scaller.transform(Test)\n",
        "    return Scalled_Train_data,Scalled_val_data\n"
      ],
      "metadata": {
        "id": "-Tpe9YdMRDXJ"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I declare Initializers for the hidden layer kernels and outputs\n",
        "\n"
      ],
      "metadata": {
        "id": "IFuERRJ_RIJ5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Kernel_Sigmoid_Initializer = tf.keras.initializers.GlorotUniform()\n",
        "Kernel_Relu_Initializer =tf.keras.initializers.HeUniform()\n"
      ],
      "metadata": {
        "id": "m_RgV5VERI7u"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This function constructs Residual Neural Networks. Accepts the attribute size to use as input size. Accepts a variable that will be used to initialize the output level bias\n",
        "\n"
      ],
      "metadata": {
        "id": "-CXJ9WZqROBb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Import the dataset to GNN**"
      ],
      "metadata": {
        "id": "kfTH5tsHR20_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "How to divide the feature matrix into different layers?"
      ],
      "metadata": {
        "id": "Y7WmCb88n8W2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Here, GNN consists of two layers. The first layer is a Graph Convolutional Network (GCN) layer that updates the features of each node based on the features of its neighbors. The second layer is another GCN layer that further updates node properties.**"
      ],
      "metadata": {
        "id": "dGQv8CV4QxsS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch_geometric.nn import GCNConv\n",
        "\n",
        "class GNN(torch.nn.Module):\n",
        "  def __init__(self, num_node_features, num_classes):\n",
        "      super(GNN, self).__init__()\n",
        "      self.conv1 = GCNConv(num_node_features, 16)\n",
        "      self.conv2 = GCNConv(16, num_classes)\n",
        "\n",
        "  def forward(self, data):\n",
        "      x, edge_index = data.x, data.edge_index\n",
        "\n",
        "      x = self.conv1(x, edge_index)\n",
        "      x = torch.relu(x)\n",
        "      x = torch.dropout(x, p=0.5, training=self.training)\n",
        "      x = self.conv2(x, edge_index)\n",
        "\n",
        "      return torch.log_softmax(x, dim=1)\n"
      ],
      "metadata": {
        "id": "MTAj2Nb6BwKU"
      },
      "execution_count": 131,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**loading Dataset**"
      ],
      "metadata": {
        "id": "e-cnW8r8RoFN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import torch\n",
        "!pip install torch-geometric\n",
        "from torch_geometric.data import Data\n",
        "from torch_geometric.nn import GCNConv\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load your data\n",
        "df = pd.merge(Legal_illegal,Final_Weather_Data,on='Key')\n",
        "df=df.drop(['Key'], axis=1)\n",
        "df=pd.merge(df, Distance_Data, on='Slot_id')\n",
        "df=df.drop(['Slot_id'], axis=1)\n",
        "# Extract the node features\n",
        "x = df.to_numpy()\n",
        "# Extract the edges\n",
        "edge_index = torch.tensor(list(df.values), dtype=torch.long)\n",
        "# Create the graph data\n",
        "data = Data(x=x, edge_index=edge_index)\n",
        "#network\n",
        "G = nx.Graph()\n",
        "G.add_nodes_from(x[2])\n",
        "edges = [(2,1),(2,2),(3,2),(4,3),(6,4),(7,5),(14,5)]\n",
        "G.add_edges_from(edges)\n",
        "#plot\n",
        "nx.draw(G, with_labels=True, font_weight='bold')\n",
        "plt.show()\n",
        "#Create a GNN instance\n",
        "gnn = GNN(7,1)\n",
        "#Pass the Data object to the GNN\n",
        "#output = gnn.forward(data)\n",
        "#Print the output\n",
        "# print(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 814
        },
        "id": "KlqnlaKARzJQ",
        "outputId": "248ef987-4204-400f-f03b-c5cc7a1486a9"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torch-geometric in /usr/local/lib/python3.10/dist-packages (2.4.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (4.66.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.23.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.11.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2.31.0)\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.2.2)\n",
            "Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (5.9.5)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch-geometric) (2.1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2023.7.22)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (3.2.0)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This function constructs Residual Neural Networks. Accepts the attribute size to use as input size. Accepts a variable that will be used to initialize the output level bias\n",
        "\n"
      ],
      "metadata": {
        "id": "xM1hqUH0RLvn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Yee1l-JRRLsQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Residual_NN(gnn,Bias_Sigmoid_Initializer):\n",
        "    Input_Layer = Input(shape=(gnn,))\n",
        "    Dense_Layer1 = Dense(512, activation='relu',kernel_initializer=Kernel_Relu_Initializer)(Input_Layer)\n",
        "    Dense_Layer2 = Dense(256, activation='relu',kernel_initializer=Kernel_Relu_Initializer)(Dense_Layer1)\n",
        "    Dense_Layer3 = Dense(128, activation='relu',kernel_initializer=Kernel_Relu_Initializer)(Dense_Layer2)\n",
        "    Dense_Layer4 = Dense(64, activation='relu',kernel_initializer=Kernel_Relu_Initializer)(Dense_Layer3)\n",
        "    Dense_Layer5 = Dense(128, activation='relu',kernel_initializer=Kernel_Relu_Initializer)(Dense_Layer4)\n",
        "    Residual_Add = add([Dense_Layer3, Dense_Layer5])\n",
        "    Dense_Layer6 = Dense(32, activation='relu',kernel_initializer=Kernel_Relu_Initializer)(Residual_Add)\n",
        "    Output_Layer = Dense(1, activation='sigmoid',kernel_initializer=Kernel_Sigmoid_Initializer,bias_initializer=Bias_Sigmoid_Initializer)(Dense_Layer6)\n",
        "\n",
        "    model2 = Model(inputs=Input_Layer, outputs=Output_Layer)\n",
        "    model2.compile(optimizer='adamax', loss=MSE, metrics=[MAE,MAPE])\n",
        "    return model2\n"
      ],
      "metadata": {
        "id": "KQ5kJ8alRKFR"
      },
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Training procces\n",
        "First I must mention that in the previous notebook I created the dataset I did not edit it to the final form for training. For the reason that the dataset I created in the previous notebook had to have some features that will not be used in training but will be used to apply the smoothing data augmentation technique to it later. For now I will not implement this technique but will train our model without it. To do this I need to make some changes to the format of the dataset I created in the previous notebook so that it is ready for training\n",
        "\n",
        ".\n",
        "\n",
        "The following function prepares the dataset so that it is ready for training. First it deletes an unneeded feature. Then it changes the order of some columns and then adds the distances from the points of interest and the weather\n",
        "\n"
      ],
      "metadata": {
        "id": "pMtqMRRfRjHl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Prepare_Dataset(Dataset):\n",
        "    Dataset=Dataset.drop(['Time_Int'], axis=1)\n",
        "    a=Dataset['Slot_Timeint']\n",
        "    b=Dataset['Ilegality_Rate']\n",
        "    Dataset=Dataset.drop(['Slot_Timeint'], axis=1)\n",
        "    Dataset=Dataset.drop(['Ilegality_Rate'], axis=1)\n",
        "    Dataset.insert(8, \"Real_Time\", a, True)\n",
        "    Dataset.insert(9, \"Real_Rate\", b, True)\n",
        "\n",
        "    Dataset=pd.merge(Dataset, Final_Weather_Data, on='Key')\n",
        "    Dataset=Dataset.drop(['Key'], axis=1)\n",
        "\n",
        "    Dataset=pd.merge(Dataset, Distance_Data, on='Slot_id')\n",
        "    Dataset=Dataset.drop(['Slot_id'], axis=1)\n",
        "    return Dataset\n"
      ],
      "metadata": {
        "id": "PngQpFhZRj-0"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The function below applies an exponential decay technique to the learning rate after epoch 40\n",
        "\n"
      ],
      "metadata": {
        "id": "y1HXNU3fRrrP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def scheduler(epoch, lr):\n",
        "    if epoch < 40:\n",
        "        return lr\n",
        "    else:\n",
        "        return lr * tf.math.exp(-0.25)\n",
        "\n",
        "callback = tf.keras.callbacks.LearningRateScheduler(scheduler)\n"
      ],
      "metadata": {
        "id": "0Ww1lPVuRsQa"
      },
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I run a 'type' 4-fold cross validation procedure. Using only the training-set to find the best training time. At the same time I save the history of mse and mae\n",
        "\n"
      ],
      "metadata": {
        "id": "QcolwIBaRvGY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "TrainDF=train_data\n",
        "k = 4\n",
        "num_epochs = 60\n",
        "\n",
        "all_mape_histories = []\n",
        "all_mae_histories = []\n",
        "all_loss_histories = []\n",
        "all_Tmae_histories = []\n",
        "all_Tloss_histories = []\n",
        "\n",
        "for i in tqdm(range(0,k)):\n",
        "        print('processing fold #', i)\n",
        "        TrainDF=shuffle(TrainDF) # Shuffles the training set\n",
        "        Train,Val = train_test_split(TrainDF,test_size=0.2,random_state=42) #Το χωρίζει σε 80%-20%\n",
        "\n",
        "        Val=Prepare_Dataset(Val) #It calls the function to make the final changes to the dataset so that it is ready for training\n",
        "        Train=Prepare_Dataset(Train) #It calls the function to make the final changes to the dataset so that it is ready for training\n",
        "\n",
        "        #It is divided into target and features\n",
        "        Final_Train_targets=Train['Real_Rate']\n",
        "        Final_Train_data=Train.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "        Final_val_targets=Val['Real_Rate']\n",
        "        Final_val_data=Val.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "        #Calls the function to do standardization\n",
        "        Final_Train_data,Final_val_data=Scaller(Final_Train_data,Final_val_data)\n",
        "\n",
        "        #It calls the function to do normalization (0.1-0.09) on the targets\n",
        "        Final_Train_targets = Normalization(Final_Train_targets)\n",
        "        Final_val_targets = Normalization(Final_val_targets)\n",
        "\n",
        "        #Finds the mean of the targets and uses it to initialize the biases when the model is built\n",
        "        Target=Final_Train_targets\n",
        "        Bias_Initial_Out=Target.mean()\n",
        "        Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "\n",
        "        #Builds the Keras model\n",
        "        model = Residual_NN(gnn=Final_Train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "\n",
        "        history = model.fit(Final_Train_data, Final_Train_targets,\n",
        "                            validation_data=(Final_val_data, Final_val_targets),\n",
        "                            epochs=num_epochs,callbacks=callback,batch_size=16, verbose=1)\n",
        "        #Saves the results\n",
        "\n",
        "        #mape_history = history.history['val_MAPE']\n",
        "        mae_history = history.history['val_MAE']\n",
        "        loss_history = history.history['val_loss']\n",
        "        Tmae_history = history.history['MAE']\n",
        "        Tloss_history = history.history['loss']\n",
        "\n",
        "        #all_mape_histories.append(mape_history)\n",
        "        all_mae_histories.append(mae_history)\n",
        "        all_loss_histories.append(loss_history)\n",
        "        all_Tmae_histories.append(Tmae_history)\n",
        "        all_Tloss_histories.append(Tloss_history)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DO9VnvfRxW2",
        "outputId": "3ccead3c-e3e9-43e7-c0ba-aaa763bfe94a"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  0%|          | 0/4 [00:00<?, ?it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "3/3 [==============================] - 3s 230ms/step - loss: 0.0946 - MAE: 0.2296 - MAPE: 45.4841 - val_loss: 0.0936 - val_MAE: 0.2532 - val_MAPE: 44.2272 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 0.0437 - MAE: 0.1667 - MAPE: 31.5668 - val_loss: 0.0848 - val_MAE: 0.2345 - val_MAPE: 39.5281 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0273 - MAE: 0.1391 - MAPE: 26.7201 - val_loss: 0.0673 - val_MAE: 0.2052 - val_MAPE: 38.9340 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 0.0199 - MAE: 0.1165 - MAPE: 23.8242 - val_loss: 0.0645 - val_MAE: 0.2012 - val_MAPE: 37.3545 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0145 - MAE: 0.1016 - MAPE: 17.6486 - val_loss: 0.0600 - val_MAE: 0.1940 - val_MAPE: 34.5484 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0123 - MAE: 0.0874 - MAPE: 14.8834 - val_loss: 0.0531 - val_MAE: 0.1881 - val_MAPE: 34.5506 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0088 - MAE: 0.0737 - MAPE: 14.0291 - val_loss: 0.0515 - val_MAE: 0.1795 - val_MAPE: 34.4429 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0074 - MAE: 0.0670 - MAPE: 13.6933 - val_loss: 0.0537 - val_MAE: 0.1855 - val_MAPE: 33.9570 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0068 - MAE: 0.0679 - MAPE: 12.9432 - val_loss: 0.0605 - val_MAE: 0.1983 - val_MAPE: 35.1102 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0045 - MAE: 0.0546 - MAPE: 9.8534 - val_loss: 0.0596 - val_MAE: 0.1974 - val_MAPE: 35.6982 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.0038 - MAE: 0.0465 - MAPE: 8.5083 - val_loss: 0.0595 - val_MAE: 0.2011 - val_MAPE: 36.8912 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0031 - MAE: 0.0426 - MAPE: 7.8443 - val_loss: 0.0595 - val_MAE: 0.2040 - val_MAPE: 36.8319 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.0029 - MAE: 0.0440 - MAPE: 7.2782 - val_loss: 0.0605 - val_MAE: 0.2025 - val_MAPE: 35.7674 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0022 - MAE: 0.0379 - MAPE: 6.2699 - val_loss: 0.0568 - val_MAE: 0.1956 - val_MAPE: 35.5615 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0020 - MAE: 0.0326 - MAPE: 6.0710 - val_loss: 0.0579 - val_MAE: 0.1986 - val_MAPE: 36.0355 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.0014 - MAE: 0.0286 - MAPE: 4.9953 - val_loss: 0.0627 - val_MAE: 0.2078 - val_MAPE: 36.7451 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 0.0016 - MAE: 0.0335 - MAPE: 5.5477 - val_loss: 0.0622 - val_MAE: 0.2073 - val_MAPE: 36.7964 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "3/3 [==============================] - 0s 35ms/step - loss: 0.0012 - MAE: 0.0267 - MAPE: 4.5163 - val_loss: 0.0581 - val_MAE: 0.2008 - val_MAPE: 36.6023 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0011 - MAE: 0.0252 - MAPE: 4.3304 - val_loss: 0.0585 - val_MAE: 0.2025 - val_MAPE: 36.5384 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 8.4172e-04 - MAE: 0.0213 - MAPE: 3.2962 - val_loss: 0.0597 - val_MAE: 0.2047 - val_MAPE: 36.6083 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 8.2542e-04 - MAE: 0.0212 - MAPE: 3.2218 - val_loss: 0.0584 - val_MAE: 0.2021 - val_MAPE: 36.3326 - lr: 0.0010\n",
            "Epoch 22/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 8.1152e-04 - MAE: 0.0210 - MAPE: 3.2317 - val_loss: 0.0576 - val_MAE: 0.1997 - val_MAPE: 36.4495 - lr: 0.0010\n",
            "Epoch 23/60\n",
            "3/3 [==============================] - 0s 34ms/step - loss: 7.1055e-04 - MAE: 0.0198 - MAPE: 3.1816 - val_loss: 0.0595 - val_MAE: 0.2034 - val_MAPE: 36.4851 - lr: 0.0010\n",
            "Epoch 24/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 6.4798e-04 - MAE: 0.0189 - MAPE: 2.9245 - val_loss: 0.0603 - val_MAE: 0.2040 - val_MAPE: 36.4518 - lr: 0.0010\n",
            "Epoch 25/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 5.5520e-04 - MAE: 0.0167 - MAPE: 2.5155 - val_loss: 0.0592 - val_MAE: 0.2017 - val_MAPE: 36.5376 - lr: 0.0010\n",
            "Epoch 26/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 5.5581e-04 - MAE: 0.0174 - MAPE: 2.7829 - val_loss: 0.0603 - val_MAE: 0.2042 - val_MAPE: 36.9350 - lr: 0.0010\n",
            "Epoch 27/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 4.9353e-04 - MAE: 0.0156 - MAPE: 2.3962 - val_loss: 0.0619 - val_MAE: 0.2058 - val_MAPE: 36.6513 - lr: 0.0010\n",
            "Epoch 28/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 5.2037e-04 - MAE: 0.0171 - MAPE: 2.6446 - val_loss: 0.0606 - val_MAE: 0.2042 - val_MAPE: 36.6406 - lr: 0.0010\n",
            "Epoch 29/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 4.1629e-04 - MAE: 0.0139 - MAPE: 2.0620 - val_loss: 0.0580 - val_MAE: 0.2015 - val_MAPE: 36.5500 - lr: 0.0010\n",
            "Epoch 30/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 4.5522e-04 - MAE: 0.0157 - MAPE: 2.5800 - val_loss: 0.0581 - val_MAE: 0.2007 - val_MAPE: 36.1905 - lr: 0.0010\n",
            "Epoch 31/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 3.7718e-04 - MAE: 0.0133 - MAPE: 1.9978 - val_loss: 0.0596 - val_MAE: 0.2026 - val_MAPE: 36.3041 - lr: 0.0010\n",
            "Epoch 32/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 3.7725e-04 - MAE: 0.0135 - MAPE: 2.0504 - val_loss: 0.0599 - val_MAE: 0.2034 - val_MAPE: 36.5588 - lr: 0.0010\n",
            "Epoch 33/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 3.7171e-04 - MAE: 0.0130 - MAPE: 1.9472 - val_loss: 0.0601 - val_MAE: 0.2049 - val_MAPE: 36.9787 - lr: 0.0010\n",
            "Epoch 34/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 3.5371e-04 - MAE: 0.0124 - MAPE: 1.8140 - val_loss: 0.0598 - val_MAE: 0.2036 - val_MAPE: 36.5309 - lr: 0.0010\n",
            "Epoch 35/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 3.2001e-04 - MAE: 0.0122 - MAPE: 1.7670 - val_loss: 0.0593 - val_MAE: 0.2035 - val_MAPE: 36.5628 - lr: 0.0010\n",
            "Epoch 36/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 3.1087e-04 - MAE: 0.0120 - MAPE: 1.8780 - val_loss: 0.0591 - val_MAE: 0.2034 - val_MAPE: 36.5915 - lr: 0.0010\n",
            "Epoch 37/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 3.0617e-04 - MAE: 0.0114 - MAPE: 1.7080 - val_loss: 0.0594 - val_MAE: 0.2035 - val_MAPE: 36.4465 - lr: 0.0010\n",
            "Epoch 38/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 2.8405e-04 - MAE: 0.0115 - MAPE: 1.7133 - val_loss: 0.0594 - val_MAE: 0.2040 - val_MAPE: 36.6111 - lr: 0.0010\n",
            "Epoch 39/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 2.7118e-04 - MAE: 0.0107 - MAPE: 1.6042 - val_loss: 0.0596 - val_MAE: 0.2042 - val_MAPE: 36.7297 - lr: 0.0010\n",
            "Epoch 40/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 2.6450e-04 - MAE: 0.0109 - MAPE: 1.6511 - val_loss: 0.0604 - val_MAE: 0.2050 - val_MAPE: 36.6599 - lr: 0.0010\n",
            "Epoch 41/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 2.5092e-04 - MAE: 0.0108 - MAPE: 1.6286 - val_loss: 0.0602 - val_MAE: 0.2048 - val_MAPE: 36.6307 - lr: 7.7880e-04\n",
            "Epoch 42/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 2.3152e-04 - MAE: 0.0097 - MAPE: 1.4257 - val_loss: 0.0593 - val_MAE: 0.2040 - val_MAPE: 36.6315 - lr: 6.0653e-04\n",
            "Epoch 43/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 2.2610e-04 - MAE: 0.0096 - MAPE: 1.4302 - val_loss: 0.0590 - val_MAE: 0.2034 - val_MAPE: 36.5492 - lr: 4.7237e-04\n",
            "Epoch 44/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 2.2606e-04 - MAE: 0.0097 - MAPE: 1.4646 - val_loss: 0.0591 - val_MAE: 0.2034 - val_MAPE: 36.5512 - lr: 3.6788e-04\n",
            "Epoch 45/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 2.2012e-04 - MAE: 0.0094 - MAPE: 1.4214 - val_loss: 0.0593 - val_MAE: 0.2035 - val_MAPE: 36.5144 - lr: 2.8650e-04\n",
            "Epoch 46/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 2.1444e-04 - MAE: 0.0090 - MAPE: 1.3050 - val_loss: 0.0595 - val_MAE: 0.2036 - val_MAPE: 36.4854 - lr: 2.2313e-04\n",
            "Epoch 47/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 2.1095e-04 - MAE: 0.0088 - MAPE: 1.2797 - val_loss: 0.0595 - val_MAE: 0.2037 - val_MAPE: 36.5023 - lr: 1.7377e-04\n",
            "Epoch 48/60\n",
            "3/3 [==============================] - 0s 27ms/step - loss: 2.0906e-04 - MAE: 0.0088 - MAPE: 1.2789 - val_loss: 0.0596 - val_MAE: 0.2040 - val_MAPE: 36.5548 - lr: 1.3534e-04\n",
            "Epoch 49/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 2.0736e-04 - MAE: 0.0088 - MAPE: 1.2853 - val_loss: 0.0596 - val_MAE: 0.2041 - val_MAPE: 36.5878 - lr: 1.0540e-04\n",
            "Epoch 50/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 2.0715e-04 - MAE: 0.0088 - MAPE: 1.2771 - val_loss: 0.0596 - val_MAE: 0.2042 - val_MAPE: 36.6161 - lr: 8.2085e-05\n",
            "Epoch 51/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 2.0545e-04 - MAE: 0.0088 - MAPE: 1.2734 - val_loss: 0.0595 - val_MAE: 0.2042 - val_MAPE: 36.6233 - lr: 6.3928e-05\n",
            "Epoch 52/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 2.0501e-04 - MAE: 0.0088 - MAPE: 1.2649 - val_loss: 0.0595 - val_MAE: 0.2042 - val_MAPE: 36.6202 - lr: 4.9787e-05\n",
            "Epoch 53/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 2.0475e-04 - MAE: 0.0087 - MAPE: 1.2562 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6129 - lr: 3.8774e-05\n",
            "Epoch 54/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 2.0392e-04 - MAE: 0.0087 - MAPE: 1.2496 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6083 - lr: 3.0197e-05\n",
            "Epoch 55/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 2.0372e-04 - MAE: 0.0087 - MAPE: 1.2463 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6040 - lr: 2.3518e-05\n",
            "Epoch 56/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 2.0326e-04 - MAE: 0.0086 - MAPE: 1.2430 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6045 - lr: 1.8316e-05\n",
            "Epoch 57/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 2.0299e-04 - MAE: 0.0086 - MAPE: 1.2415 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6040 - lr: 1.4264e-05\n",
            "Epoch 58/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 2.0288e-04 - MAE: 0.0086 - MAPE: 1.2405 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6038 - lr: 1.1109e-05\n",
            "Epoch 59/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 2.0292e-04 - MAE: 0.0086 - MAPE: 1.2408 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6057 - lr: 8.6517e-06\n",
            "Epoch 60/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 2.0270e-04 - MAE: 0.0086 - MAPE: 1.2400 - val_loss: 0.0595 - val_MAE: 0.2041 - val_MAPE: 36.6047 - lr: 6.7379e-06\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 25%|██▌       | 1/4 [00:10<00:31, 10.37s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "3/3 [==============================] - 2s 137ms/step - loss: 0.1070 - MAE: 0.2517 - MAPE: 52.6796 - val_loss: 0.0748 - val_MAE: 0.2023 - val_MAPE: 31.1180 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0423 - MAE: 0.1743 - MAPE: 36.8671 - val_loss: 0.1130 - val_MAE: 0.2727 - val_MAPE: 37.5709 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0243 - MAE: 0.1356 - MAPE: 23.8746 - val_loss: 0.0912 - val_MAE: 0.2371 - val_MAPE: 33.0699 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0153 - MAE: 0.1040 - MAPE: 20.6737 - val_loss: 0.0635 - val_MAE: 0.2072 - val_MAPE: 29.0433 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0113 - MAE: 0.0847 - MAPE: 16.6664 - val_loss: 0.0681 - val_MAE: 0.2180 - val_MAPE: 29.7528 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 0.0082 - MAE: 0.0735 - MAPE: 12.8657 - val_loss: 0.0643 - val_MAE: 0.2130 - val_MAPE: 29.2415 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0069 - MAE: 0.0660 - MAPE: 12.0998 - val_loss: 0.0522 - val_MAE: 0.1871 - val_MAPE: 26.1408 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0056 - MAE: 0.0559 - MAPE: 10.9089 - val_loss: 0.0530 - val_MAE: 0.1863 - val_MAPE: 25.8324 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 0.0053 - MAE: 0.0544 - MAPE: 10.1943 - val_loss: 0.0559 - val_MAE: 0.1867 - val_MAPE: 25.7066 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 0.0044 - MAE: 0.0515 - MAPE: 9.2599 - val_loss: 0.0585 - val_MAE: 0.1979 - val_MAPE: 27.2502 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "3/3 [==============================] - 0s 27ms/step - loss: 0.0041 - MAE: 0.0500 - MAPE: 9.0900 - val_loss: 0.0554 - val_MAE: 0.1956 - val_MAPE: 27.1913 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0032 - MAE: 0.0438 - MAPE: 8.1283 - val_loss: 0.0528 - val_MAE: 0.1872 - val_MAPE: 26.1829 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 0.0030 - MAE: 0.0403 - MAPE: 7.4273 - val_loss: 0.0521 - val_MAE: 0.1845 - val_MAPE: 25.6070 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0024 - MAE: 0.0345 - MAPE: 6.0432 - val_loss: 0.0508 - val_MAE: 0.1823 - val_MAPE: 25.1482 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0022 - MAE: 0.0334 - MAPE: 5.8583 - val_loss: 0.0537 - val_MAE: 0.1890 - val_MAPE: 25.9353 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0019 - MAE: 0.0321 - MAPE: 5.5977 - val_loss: 0.0521 - val_MAE: 0.1871 - val_MAPE: 25.7860 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 0.0017 - MAE: 0.0302 - MAPE: 5.2948 - val_loss: 0.0500 - val_MAE: 0.1821 - val_MAPE: 25.2321 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0015 - MAE: 0.0286 - MAPE: 4.6924 - val_loss: 0.0506 - val_MAE: 0.1838 - val_MAPE: 25.4524 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0015 - MAE: 0.0272 - MAPE: 4.4187 - val_loss: 0.0530 - val_MAE: 0.1882 - val_MAPE: 25.9978 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0014 - MAE: 0.0265 - MAPE: 4.2312 - val_loss: 0.0520 - val_MAE: 0.1860 - val_MAPE: 25.6542 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "3/3 [==============================] - 0s 25ms/step - loss: 0.0012 - MAE: 0.0238 - MAPE: 3.8470 - val_loss: 0.0495 - val_MAE: 0.1791 - val_MAPE: 24.6478 - lr: 0.0010\n",
            "Epoch 22/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0012 - MAE: 0.0232 - MAPE: 3.6602 - val_loss: 0.0535 - val_MAE: 0.1861 - val_MAPE: 25.4992 - lr: 0.0010\n",
            "Epoch 23/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 0.0011 - MAE: 0.0228 - MAPE: 3.4975 - val_loss: 0.0514 - val_MAE: 0.1820 - val_MAPE: 25.1015 - lr: 0.0010\n",
            "Epoch 24/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 0.0010 - MAE: 0.0213 - MAPE: 3.4162 - val_loss: 0.0471 - val_MAE: 0.1764 - val_MAPE: 24.5499 - lr: 0.0010\n",
            "Epoch 25/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 8.7363e-04 - MAE: 0.0203 - MAPE: 3.3072 - val_loss: 0.0501 - val_MAE: 0.1848 - val_MAPE: 25.6346 - lr: 0.0010\n",
            "Epoch 26/60\n",
            "3/3 [==============================] - 0s 26ms/step - loss: 8.7626e-04 - MAE: 0.0206 - MAPE: 3.2555 - val_loss: 0.0499 - val_MAE: 0.1846 - val_MAPE: 25.5591 - lr: 0.0010\n",
            "Epoch 27/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 8.6746e-04 - MAE: 0.0202 - MAPE: 3.1750 - val_loss: 0.0475 - val_MAE: 0.1772 - val_MAPE: 24.5049 - lr: 0.0010\n",
            "Epoch 28/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 7.6085e-04 - MAE: 0.0180 - MAPE: 2.8237 - val_loss: 0.0514 - val_MAE: 0.1832 - val_MAPE: 25.2631 - lr: 0.0010\n",
            "Epoch 29/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 8.8511e-04 - MAE: 0.0198 - MAPE: 2.9781 - val_loss: 0.0510 - val_MAE: 0.1798 - val_MAPE: 24.8133 - lr: 0.0010\n",
            "Epoch 30/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 8.1742e-04 - MAE: 0.0203 - MAPE: 3.2587 - val_loss: 0.0473 - val_MAE: 0.1761 - val_MAPE: 24.4687 - lr: 0.0010\n",
            "Epoch 31/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 7.3746e-04 - MAE: 0.0181 - MAPE: 2.9949 - val_loss: 0.0492 - val_MAE: 0.1834 - val_MAPE: 25.4869 - lr: 0.0010\n",
            "Epoch 32/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 7.6629e-04 - MAE: 0.0193 - MAPE: 3.0905 - val_loss: 0.0514 - val_MAE: 0.1858 - val_MAPE: 25.6519 - lr: 0.0010\n",
            "Epoch 33/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 6.4803e-04 - MAE: 0.0166 - MAPE: 2.5315 - val_loss: 0.0457 - val_MAE: 0.1717 - val_MAPE: 23.8243 - lr: 0.0010\n",
            "Epoch 34/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 6.9538e-04 - MAE: 0.0193 - MAPE: 3.2674 - val_loss: 0.0504 - val_MAE: 0.1822 - val_MAPE: 25.2101 - lr: 0.0010\n",
            "Epoch 35/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 6.9336e-04 - MAE: 0.0177 - MAPE: 2.7792 - val_loss: 0.0534 - val_MAE: 0.1884 - val_MAPE: 26.0737 - lr: 0.0010\n",
            "Epoch 36/60\n",
            "3/3 [==============================] - 0s 25ms/step - loss: 5.6064e-04 - MAE: 0.0149 - MAPE: 2.3325 - val_loss: 0.0472 - val_MAE: 0.1746 - val_MAPE: 24.2228 - lr: 0.0010\n",
            "Epoch 37/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 5.9156e-04 - MAE: 0.0164 - MAPE: 2.7506 - val_loss: 0.0492 - val_MAE: 0.1794 - val_MAPE: 24.7865 - lr: 0.0010\n",
            "Epoch 38/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 5.4704e-04 - MAE: 0.0148 - MAPE: 2.2349 - val_loss: 0.0540 - val_MAE: 0.1898 - val_MAPE: 26.1431 - lr: 0.0010\n",
            "Epoch 39/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 5.4568e-04 - MAE: 0.0158 - MAPE: 2.5291 - val_loss: 0.0475 - val_MAE: 0.1772 - val_MAPE: 24.6275 - lr: 0.0010\n",
            "Epoch 40/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 6.9811e-04 - MAE: 0.0189 - MAPE: 3.3494 - val_loss: 0.0497 - val_MAE: 0.1811 - val_MAPE: 25.1615 - lr: 0.0010\n",
            "Epoch 41/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 5.7388e-04 - MAE: 0.0139 - MAPE: 2.1060 - val_loss: 0.0563 - val_MAE: 0.1945 - val_MAPE: 26.7934 - lr: 7.7880e-04\n",
            "Epoch 42/60\n",
            "3/3 [==============================] - 0s 27ms/step - loss: 5.2650e-04 - MAE: 0.0157 - MAPE: 2.5040 - val_loss: 0.0524 - val_MAE: 0.1862 - val_MAPE: 25.7055 - lr: 6.0653e-04\n",
            "Epoch 43/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 4.3657e-04 - MAE: 0.0126 - MAPE: 1.9218 - val_loss: 0.0491 - val_MAE: 0.1779 - val_MAPE: 24.5967 - lr: 4.7237e-04\n",
            "Epoch 44/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 4.6861e-04 - MAE: 0.0145 - MAPE: 2.4289 - val_loss: 0.0489 - val_MAE: 0.1779 - val_MAPE: 24.6071 - lr: 3.6788e-04\n",
            "Epoch 45/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 4.2750e-04 - MAE: 0.0123 - MAPE: 1.9501 - val_loss: 0.0514 - val_MAE: 0.1830 - val_MAPE: 25.2570 - lr: 2.8650e-04\n",
            "Epoch 46/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 3.9516e-04 - MAE: 0.0112 - MAPE: 1.6617 - val_loss: 0.0526 - val_MAE: 0.1856 - val_MAPE: 25.5845 - lr: 2.2313e-04\n",
            "Epoch 47/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 3.9218e-04 - MAE: 0.0115 - MAPE: 1.7112 - val_loss: 0.0525 - val_MAE: 0.1854 - val_MAPE: 25.5698 - lr: 1.7377e-04\n",
            "Epoch 48/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 3.8307e-04 - MAE: 0.0109 - MAPE: 1.6071 - val_loss: 0.0520 - val_MAE: 0.1847 - val_MAPE: 25.4831 - lr: 1.3534e-04\n",
            "Epoch 49/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 3.7389e-04 - MAE: 0.0102 - MAPE: 1.4818 - val_loss: 0.0515 - val_MAE: 0.1838 - val_MAPE: 25.3643 - lr: 1.0540e-04\n",
            "Epoch 50/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 3.7616e-04 - MAE: 0.0100 - MAPE: 1.4675 - val_loss: 0.0512 - val_MAE: 0.1831 - val_MAPE: 25.2845 - lr: 8.2085e-05\n",
            "Epoch 51/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 3.7184e-04 - MAE: 0.0101 - MAPE: 1.5075 - val_loss: 0.0511 - val_MAE: 0.1828 - val_MAPE: 25.2483 - lr: 6.3928e-05\n",
            "Epoch 52/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 3.6955e-04 - MAE: 0.0101 - MAPE: 1.5121 - val_loss: 0.0511 - val_MAE: 0.1828 - val_MAPE: 25.2537 - lr: 4.9787e-05\n",
            "Epoch 53/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 3.6941e-04 - MAE: 0.0100 - MAPE: 1.4957 - val_loss: 0.0511 - val_MAE: 0.1829 - val_MAPE: 25.2648 - lr: 3.8774e-05\n",
            "Epoch 54/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 3.6757e-04 - MAE: 0.0099 - MAPE: 1.4761 - val_loss: 0.0512 - val_MAE: 0.1831 - val_MAPE: 25.2834 - lr: 3.0197e-05\n",
            "Epoch 55/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 3.6648e-04 - MAE: 0.0099 - MAPE: 1.4572 - val_loss: 0.0512 - val_MAE: 0.1832 - val_MAPE: 25.2997 - lr: 2.3518e-05\n",
            "Epoch 56/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 3.6588e-04 - MAE: 0.0098 - MAPE: 1.4452 - val_loss: 0.0513 - val_MAE: 0.1833 - val_MAPE: 25.3094 - lr: 1.8316e-05\n",
            "Epoch 57/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 3.6563e-04 - MAE: 0.0098 - MAPE: 1.4374 - val_loss: 0.0513 - val_MAE: 0.1834 - val_MAPE: 25.3227 - lr: 1.4264e-05\n",
            "Epoch 58/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 3.6510e-04 - MAE: 0.0098 - MAPE: 1.4330 - val_loss: 0.0514 - val_MAE: 0.1834 - val_MAPE: 25.3291 - lr: 1.1109e-05\n",
            "Epoch 59/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 3.6478e-04 - MAE: 0.0097 - MAPE: 1.4294 - val_loss: 0.0514 - val_MAE: 0.1834 - val_MAPE: 25.3351 - lr: 8.6517e-06\n",
            "Epoch 60/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 3.6451e-04 - MAE: 0.0097 - MAPE: 1.4257 - val_loss: 0.0514 - val_MAE: 0.1835 - val_MAPE: 25.3374 - lr: 6.7379e-06\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 50%|█████     | 2/4 [00:16<00:16,  8.14s/it]/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 2\n",
            "Epoch 1/60\n",
            "3/3 [==============================] - 2s 202ms/step - loss: 0.1087 - MAE: 0.2705 - MAPE: 60.3839 - val_loss: 0.0259 - val_MAE: 0.1117 - val_MAPE: 20.9768 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0522 - MAE: 0.1825 - MAPE: 38.9686 - val_loss: 0.0182 - val_MAE: 0.1076 - val_MAPE: 18.3968 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0253 - MAE: 0.1318 - MAPE: 27.6439 - val_loss: 0.0219 - val_MAE: 0.1338 - val_MAPE: 20.2733 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.0201 - MAE: 0.1184 - MAPE: 23.1480 - val_loss: 0.0227 - val_MAE: 0.1364 - val_MAPE: 22.6049 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0139 - MAE: 0.0926 - MAPE: 19.2444 - val_loss: 0.0174 - val_MAE: 0.1058 - val_MAPE: 18.3538 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0130 - MAE: 0.0891 - MAPE: 19.3477 - val_loss: 0.0188 - val_MAE: 0.1069 - val_MAPE: 19.5556 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 0.0103 - MAE: 0.0778 - MAPE: 17.1327 - val_loss: 0.0148 - val_MAE: 0.1016 - val_MAPE: 15.9914 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "3/3 [==============================] - 0s 34ms/step - loss: 0.0103 - MAE: 0.0818 - MAPE: 16.5663 - val_loss: 0.0159 - val_MAE: 0.1133 - val_MAPE: 19.7805 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0089 - MAE: 0.0762 - MAPE: 16.3767 - val_loss: 0.0122 - val_MAE: 0.0935 - val_MAPE: 16.7844 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.0064 - MAE: 0.0608 - MAPE: 13.2982 - val_loss: 0.0117 - val_MAE: 0.0823 - val_MAPE: 14.8577 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0062 - MAE: 0.0618 - MAPE: 13.7223 - val_loss: 0.0139 - val_MAE: 0.1014 - val_MAPE: 18.5660 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0059 - MAE: 0.0615 - MAPE: 12.8137 - val_loss: 0.0124 - val_MAE: 0.0992 - val_MAPE: 17.4967 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 0.0050 - MAE: 0.0572 - MAPE: 11.1388 - val_loss: 0.0112 - val_MAE: 0.0821 - val_MAPE: 14.3264 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0037 - MAE: 0.0475 - MAPE: 9.6792 - val_loss: 0.0129 - val_MAE: 0.0954 - val_MAPE: 17.2665 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 0.0042 - MAE: 0.0501 - MAPE: 10.9198 - val_loss: 0.0113 - val_MAE: 0.0865 - val_MAPE: 15.0470 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0036 - MAE: 0.0442 - MAPE: 9.5136 - val_loss: 0.0121 - val_MAE: 0.0894 - val_MAPE: 14.9659 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0033 - MAE: 0.0419 - MAPE: 8.6967 - val_loss: 0.0127 - val_MAE: 0.0961 - val_MAPE: 17.5565 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0031 - MAE: 0.0402 - MAPE: 8.6251 - val_loss: 0.0112 - val_MAE: 0.0891 - val_MAPE: 15.9475 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0027 - MAE: 0.0364 - MAPE: 7.5663 - val_loss: 0.0116 - val_MAE: 0.0909 - val_MAPE: 15.1984 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 0.0023 - MAE: 0.0329 - MAPE: 6.7708 - val_loss: 0.0139 - val_MAE: 0.1046 - val_MAPE: 18.2076 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.0022 - MAE: 0.0313 - MAPE: 6.7562 - val_loss: 0.0146 - val_MAE: 0.1075 - val_MAPE: 18.6110 - lr: 0.0010\n",
            "Epoch 22/60\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0019 - MAE: 0.0277 - MAPE: 5.8708 - val_loss: 0.0141 - val_MAE: 0.1018 - val_MAPE: 17.4552 - lr: 0.0010\n",
            "Epoch 23/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0019 - MAE: 0.0266 - MAPE: 5.8270 - val_loss: 0.0128 - val_MAE: 0.1003 - val_MAPE: 17.3489 - lr: 0.0010\n",
            "Epoch 24/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0018 - MAE: 0.0255 - MAPE: 5.5100 - val_loss: 0.0118 - val_MAE: 0.0971 - val_MAPE: 16.7121 - lr: 0.0010\n",
            "Epoch 25/60\n",
            "3/3 [==============================] - 0s 34ms/step - loss: 0.0016 - MAE: 0.0241 - MAPE: 4.9364 - val_loss: 0.0114 - val_MAE: 0.0931 - val_MAPE: 15.9826 - lr: 0.0010\n",
            "Epoch 26/60\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.0016 - MAE: 0.0232 - MAPE: 4.9994 - val_loss: 0.0122 - val_MAE: 0.0944 - val_MAPE: 16.3605 - lr: 0.0010\n",
            "Epoch 27/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0015 - MAE: 0.0219 - MAPE: 4.9233 - val_loss: 0.0130 - val_MAE: 0.1001 - val_MAPE: 17.3723 - lr: 0.0010\n",
            "Epoch 28/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0014 - MAE: 0.0210 - MAPE: 4.5885 - val_loss: 0.0130 - val_MAE: 0.1006 - val_MAPE: 17.3049 - lr: 0.0010\n",
            "Epoch 29/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0013 - MAE: 0.0201 - MAPE: 4.2930 - val_loss: 0.0126 - val_MAE: 0.0962 - val_MAPE: 16.6206 - lr: 0.0010\n",
            "Epoch 30/60\n",
            "3/3 [==============================] - 0s 28ms/step - loss: 0.0012 - MAE: 0.0184 - MAPE: 4.0852 - val_loss: 0.0124 - val_MAE: 0.0959 - val_MAPE: 16.5807 - lr: 0.0010\n",
            "Epoch 31/60\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0012 - MAE: 0.0182 - MAPE: 3.9467 - val_loss: 0.0127 - val_MAE: 0.0983 - val_MAPE: 16.9290 - lr: 0.0010\n",
            "Epoch 32/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0011 - MAE: 0.0173 - MAPE: 3.5627 - val_loss: 0.0130 - val_MAE: 0.1002 - val_MAPE: 17.1556 - lr: 0.0010\n",
            "Epoch 33/60\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0011 - MAE: 0.0161 - MAPE: 3.2708 - val_loss: 0.0133 - val_MAE: 0.1013 - val_MAPE: 17.4577 - lr: 0.0010\n",
            "Epoch 34/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0011 - MAE: 0.0172 - MAPE: 3.6861 - val_loss: 0.0131 - val_MAE: 0.0990 - val_MAPE: 17.1142 - lr: 0.0010\n",
            "Epoch 35/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0011 - MAE: 0.0173 - MAPE: 3.9184 - val_loss: 0.0131 - val_MAE: 0.0997 - val_MAPE: 17.0878 - lr: 0.0010\n",
            "Epoch 36/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 0.0011 - MAE: 0.0166 - MAPE: 3.5378 - val_loss: 0.0133 - val_MAE: 0.1023 - val_MAPE: 17.4797 - lr: 0.0010\n",
            "Epoch 37/60\n",
            "3/3 [==============================] - 0s 35ms/step - loss: 9.7611e-04 - MAE: 0.0152 - MAPE: 3.1035 - val_loss: 0.0134 - val_MAE: 0.1014 - val_MAPE: 17.5704 - lr: 0.0010\n",
            "Epoch 38/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 9.7932e-04 - MAE: 0.0158 - MAPE: 3.3103 - val_loss: 0.0129 - val_MAE: 0.0964 - val_MAPE: 16.6415 - lr: 0.0010\n",
            "Epoch 39/60\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 8.9393e-04 - MAE: 0.0153 - MAPE: 3.1936 - val_loss: 0.0128 - val_MAE: 0.0979 - val_MAPE: 16.8723 - lr: 0.0010\n",
            "Epoch 40/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 9.0776e-04 - MAE: 0.0151 - MAPE: 3.1795 - val_loss: 0.0132 - val_MAE: 0.1008 - val_MAPE: 17.3780 - lr: 0.0010\n",
            "Epoch 41/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 9.8050e-04 - MAE: 0.0154 - MAPE: 3.5396 - val_loss: 0.0134 - val_MAE: 0.1002 - val_MAPE: 17.3045 - lr: 7.7880e-04\n",
            "Epoch 42/60\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 8.3478e-04 - MAE: 0.0148 - MAPE: 3.4576 - val_loss: 0.0135 - val_MAE: 0.1008 - val_MAPE: 17.3667 - lr: 6.0653e-04\n",
            "Epoch 43/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 8.3785e-04 - MAE: 0.0143 - MAPE: 3.1003 - val_loss: 0.0136 - val_MAE: 0.1019 - val_MAPE: 17.5309 - lr: 4.7237e-04\n",
            "Epoch 44/60\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 7.6242e-04 - MAE: 0.0130 - MAPE: 2.6995 - val_loss: 0.0135 - val_MAE: 0.1022 - val_MAPE: 17.6766 - lr: 3.6788e-04\n",
            "Epoch 45/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 7.5866e-04 - MAE: 0.0132 - MAPE: 2.7687 - val_loss: 0.0134 - val_MAE: 0.1017 - val_MAPE: 17.6179 - lr: 2.8650e-04\n",
            "Epoch 46/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 7.3447e-04 - MAE: 0.0128 - MAPE: 2.7196 - val_loss: 0.0133 - val_MAE: 0.1005 - val_MAPE: 17.3915 - lr: 2.2313e-04\n",
            "Epoch 47/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 7.2578e-04 - MAE: 0.0121 - MAPE: 2.5915 - val_loss: 0.0132 - val_MAE: 0.0996 - val_MAPE: 17.1989 - lr: 1.7377e-04\n",
            "Epoch 48/60\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 7.1843e-04 - MAE: 0.0120 - MAPE: 2.5827 - val_loss: 0.0131 - val_MAE: 0.0991 - val_MAPE: 17.1041 - lr: 1.3534e-04\n",
            "Epoch 49/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 7.1852e-04 - MAE: 0.0121 - MAPE: 2.6302 - val_loss: 0.0131 - val_MAE: 0.0990 - val_MAPE: 17.0807 - lr: 1.0540e-04\n",
            "Epoch 50/60\n",
            "3/3 [==============================] - 0s 34ms/step - loss: 7.1669e-04 - MAE: 0.0122 - MAPE: 2.6543 - val_loss: 0.0131 - val_MAE: 0.0991 - val_MAPE: 17.1020 - lr: 8.2085e-05\n",
            "Epoch 51/60\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 7.1100e-04 - MAE: 0.0120 - MAPE: 2.6169 - val_loss: 0.0131 - val_MAE: 0.0993 - val_MAPE: 17.1378 - lr: 6.3928e-05\n",
            "Epoch 52/60\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 7.0427e-04 - MAE: 0.0118 - MAPE: 2.5727 - val_loss: 0.0131 - val_MAE: 0.0995 - val_MAPE: 17.1672 - lr: 4.9787e-05\n",
            "Epoch 53/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 7.0237e-04 - MAE: 0.0117 - MAPE: 2.5628 - val_loss: 0.0131 - val_MAE: 0.0996 - val_MAPE: 17.1966 - lr: 3.8774e-05\n",
            "Epoch 54/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 7.0263e-04 - MAE: 0.0117 - MAPE: 2.5645 - val_loss: 0.0131 - val_MAE: 0.0997 - val_MAPE: 17.2150 - lr: 3.0197e-05\n",
            "Epoch 55/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 6.9978e-04 - MAE: 0.0117 - MAPE: 2.5644 - val_loss: 0.0132 - val_MAE: 0.0998 - val_MAPE: 17.2261 - lr: 2.3518e-05\n",
            "Epoch 56/60\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 6.9953e-04 - MAE: 0.0117 - MAPE: 2.5650 - val_loss: 0.0132 - val_MAE: 0.0998 - val_MAPE: 17.2339 - lr: 1.8316e-05\n",
            "Epoch 57/60\n",
            "3/3 [==============================] - 0s 35ms/step - loss: 6.9888e-04 - MAE: 0.0117 - MAPE: 2.5656 - val_loss: 0.0132 - val_MAE: 0.0998 - val_MAPE: 17.2377 - lr: 1.4264e-05\n",
            "Epoch 58/60\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 6.9844e-04 - MAE: 0.0117 - MAPE: 2.5648 - val_loss: 0.0132 - val_MAE: 0.0998 - val_MAPE: 17.2395 - lr: 1.1109e-05\n",
            "Epoch 59/60\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 6.9885e-04 - MAE: 0.0117 - MAPE: 2.5622 - val_loss: 0.0132 - val_MAE: 0.0998 - val_MAPE: 17.2405 - lr: 8.6517e-06\n",
            "Epoch 60/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 6.9796e-04 - MAE: 0.0117 - MAPE: 2.5570 - val_loss: 0.0132 - val_MAE: 0.0998 - val_MAPE: 17.2411 - lr: 6.7379e-06\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 75%|███████▌  | 3/4 [00:24<00:07,  7.97s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "3/3 [==============================] - 2s 125ms/step - loss: 0.1182 - MAE: 0.2597 - MAPE: 43.0845 - val_loss: 0.1084 - val_MAE: 0.2737 - val_MAPE: 82.1029 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0548 - MAE: 0.1770 - MAPE: 35.9396 - val_loss: 0.0803 - val_MAE: 0.2487 - val_MAPE: 67.5070 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0314 - MAE: 0.1360 - MAPE: 25.9707 - val_loss: 0.0659 - val_MAE: 0.2253 - val_MAPE: 55.4130 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "3/3 [==============================] - 0s 34ms/step - loss: 0.0212 - MAE: 0.1220 - MAPE: 20.2959 - val_loss: 0.0742 - val_MAE: 0.2461 - val_MAPE: 59.5171 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0143 - MAE: 0.0989 - MAPE: 16.5256 - val_loss: 0.0749 - val_MAE: 0.2435 - val_MAPE: 60.6247 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0119 - MAE: 0.0846 - MAPE: 14.9877 - val_loss: 0.0767 - val_MAE: 0.2414 - val_MAPE: 62.6445 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 0.0100 - MAE: 0.0750 - MAPE: 13.7204 - val_loss: 0.0757 - val_MAE: 0.2413 - val_MAPE: 61.3313 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0076 - MAE: 0.0637 - MAPE: 11.3230 - val_loss: 0.0784 - val_MAE: 0.2477 - val_MAPE: 59.6804 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0073 - MAE: 0.0618 - MAPE: 9.9993 - val_loss: 0.0785 - val_MAE: 0.2480 - val_MAPE: 58.7779 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0063 - MAE: 0.0591 - MAPE: 9.3604 - val_loss: 0.0741 - val_MAE: 0.2378 - val_MAPE: 60.3448 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0053 - MAE: 0.0563 - MAPE: 9.9996 - val_loss: 0.0719 - val_MAE: 0.2305 - val_MAPE: 61.7238 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0049 - MAE: 0.0542 - MAPE: 9.9041 - val_loss: 0.0715 - val_MAE: 0.2337 - val_MAPE: 61.0008 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0041 - MAE: 0.0484 - MAPE: 8.7576 - val_loss: 0.0721 - val_MAE: 0.2365 - val_MAPE: 60.5472 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0037 - MAE: 0.0430 - MAPE: 7.5678 - val_loss: 0.0736 - val_MAE: 0.2387 - val_MAPE: 60.0347 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0036 - MAE: 0.0428 - MAPE: 7.5374 - val_loss: 0.0761 - val_MAE: 0.2425 - val_MAPE: 60.9137 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0031 - MAE: 0.0390 - MAPE: 6.8302 - val_loss: 0.0774 - val_MAE: 0.2424 - val_MAPE: 62.7101 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0030 - MAE: 0.0396 - MAPE: 7.0863 - val_loss: 0.0775 - val_MAE: 0.2413 - val_MAPE: 63.4598 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0029 - MAE: 0.0389 - MAPE: 7.1256 - val_loss: 0.0780 - val_MAE: 0.2418 - val_MAPE: 63.4682 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "3/3 [==============================] - 0s 34ms/step - loss: 0.0025 - MAE: 0.0362 - MAPE: 6.5421 - val_loss: 0.0795 - val_MAE: 0.2468 - val_MAPE: 62.6895 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0024 - MAE: 0.0365 - MAPE: 6.3219 - val_loss: 0.0780 - val_MAE: 0.2451 - val_MAPE: 62.5428 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0022 - MAE: 0.0320 - MAPE: 5.5760 - val_loss: 0.0771 - val_MAE: 0.2421 - val_MAPE: 63.0969 - lr: 0.0010\n",
            "Epoch 22/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0022 - MAE: 0.0333 - MAPE: 6.1239 - val_loss: 0.0774 - val_MAE: 0.2411 - val_MAPE: 63.3766 - lr: 0.0010\n",
            "Epoch 23/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 0.0022 - MAE: 0.0327 - MAPE: 5.9489 - val_loss: 0.0791 - val_MAE: 0.2454 - val_MAPE: 62.9776 - lr: 0.0010\n",
            "Epoch 24/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 0.0019 - MAE: 0.0301 - MAPE: 5.2818 - val_loss: 0.0799 - val_MAE: 0.2459 - val_MAPE: 64.3460 - lr: 0.0010\n",
            "Epoch 25/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0019 - MAE: 0.0325 - MAPE: 5.9183 - val_loss: 0.0811 - val_MAE: 0.2471 - val_MAPE: 64.9575 - lr: 0.0010\n",
            "Epoch 26/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0018 - MAE: 0.0296 - MAPE: 5.2766 - val_loss: 0.0811 - val_MAE: 0.2473 - val_MAPE: 64.0294 - lr: 0.0010\n",
            "Epoch 27/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0017 - MAE: 0.0306 - MAPE: 5.5891 - val_loss: 0.0803 - val_MAE: 0.2455 - val_MAPE: 64.8140 - lr: 0.0010\n",
            "Epoch 28/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0017 - MAE: 0.0310 - MAPE: 5.6866 - val_loss: 0.0808 - val_MAE: 0.2479 - val_MAPE: 64.6047 - lr: 0.0010\n",
            "Epoch 29/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 0.0015 - MAE: 0.0256 - MAPE: 4.5000 - val_loss: 0.0821 - val_MAE: 0.2497 - val_MAPE: 64.7833 - lr: 0.0010\n",
            "Epoch 30/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0015 - MAE: 0.0279 - MAPE: 4.9543 - val_loss: 0.0811 - val_MAE: 0.2479 - val_MAPE: 65.0893 - lr: 0.0010\n",
            "Epoch 31/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0013 - MAE: 0.0254 - MAPE: 4.5763 - val_loss: 0.0824 - val_MAE: 0.2484 - val_MAPE: 66.4025 - lr: 0.0010\n",
            "Epoch 32/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 0.0013 - MAE: 0.0270 - MAPE: 5.0392 - val_loss: 0.0844 - val_MAE: 0.2510 - val_MAPE: 66.3608 - lr: 0.0010\n",
            "Epoch 33/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0013 - MAE: 0.0271 - MAPE: 4.8884 - val_loss: 0.0843 - val_MAE: 0.2527 - val_MAPE: 65.7088 - lr: 0.0010\n",
            "Epoch 34/60\n",
            "3/3 [==============================] - 0s 35ms/step - loss: 0.0012 - MAE: 0.0239 - MAPE: 4.1621 - val_loss: 0.0831 - val_MAE: 0.2499 - val_MAPE: 66.2868 - lr: 0.0010\n",
            "Epoch 35/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 0.0012 - MAE: 0.0252 - MAPE: 4.5174 - val_loss: 0.0837 - val_MAE: 0.2508 - val_MAPE: 65.9311 - lr: 0.0010\n",
            "Epoch 36/60\n",
            "3/3 [==============================] - 0s 22ms/step - loss: 0.0010 - MAE: 0.0238 - MAPE: 4.1838 - val_loss: 0.0837 - val_MAE: 0.2494 - val_MAPE: 66.0123 - lr: 0.0010\n",
            "Epoch 37/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 0.0010 - MAE: 0.0225 - MAPE: 4.0225 - val_loss: 0.0831 - val_MAE: 0.2495 - val_MAPE: 65.9193 - lr: 0.0010\n",
            "Epoch 38/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 9.5104e-04 - MAE: 0.0220 - MAPE: 3.9369 - val_loss: 0.0847 - val_MAE: 0.2521 - val_MAPE: 66.4546 - lr: 0.0010\n",
            "Epoch 39/60\n",
            "3/3 [==============================] - 0s 25ms/step - loss: 8.7314e-04 - MAE: 0.0200 - MAPE: 3.3865 - val_loss: 0.0862 - val_MAE: 0.2539 - val_MAPE: 67.2107 - lr: 0.0010\n",
            "Epoch 40/60\n",
            "3/3 [==============================] - 0s 29ms/step - loss: 8.6416e-04 - MAE: 0.0207 - MAPE: 3.5346 - val_loss: 0.0870 - val_MAE: 0.2528 - val_MAPE: 68.1508 - lr: 0.0010\n",
            "Epoch 41/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 7.9491e-04 - MAE: 0.0200 - MAPE: 3.5354 - val_loss: 0.0865 - val_MAE: 0.2524 - val_MAPE: 67.7871 - lr: 7.7880e-04\n",
            "Epoch 42/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 7.7645e-04 - MAE: 0.0188 - MAPE: 3.2171 - val_loss: 0.0860 - val_MAE: 0.2537 - val_MAPE: 66.8969 - lr: 6.0653e-04\n",
            "Epoch 43/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 7.0962e-04 - MAE: 0.0178 - MAPE: 2.9748 - val_loss: 0.0860 - val_MAE: 0.2537 - val_MAPE: 66.8204 - lr: 4.7237e-04\n",
            "Epoch 44/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 6.8207e-04 - MAE: 0.0173 - MAPE: 2.8888 - val_loss: 0.0864 - val_MAE: 0.2544 - val_MAPE: 67.0328 - lr: 3.6788e-04\n",
            "Epoch 45/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 6.4568e-04 - MAE: 0.0167 - MAPE: 2.7565 - val_loss: 0.0864 - val_MAE: 0.2541 - val_MAPE: 67.1611 - lr: 2.8650e-04\n",
            "Epoch 46/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 6.2207e-04 - MAE: 0.0163 - MAPE: 2.7357 - val_loss: 0.0866 - val_MAE: 0.2539 - val_MAPE: 67.3767 - lr: 2.2313e-04\n",
            "Epoch 47/60\n",
            "3/3 [==============================] - 0s 21ms/step - loss: 6.2448e-04 - MAE: 0.0161 - MAPE: 2.7463 - val_loss: 0.0867 - val_MAE: 0.2536 - val_MAPE: 67.5521 - lr: 1.7377e-04\n",
            "Epoch 48/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 6.0716e-04 - MAE: 0.0161 - MAPE: 2.7454 - val_loss: 0.0868 - val_MAE: 0.2537 - val_MAPE: 67.6027 - lr: 1.3534e-04\n",
            "Epoch 49/60\n",
            "3/3 [==============================] - 0s 35ms/step - loss: 6.0338e-04 - MAE: 0.0161 - MAPE: 2.7379 - val_loss: 0.0869 - val_MAE: 0.2539 - val_MAPE: 67.6181 - lr: 1.0540e-04\n",
            "Epoch 50/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 6.0213e-04 - MAE: 0.0161 - MAPE: 2.7188 - val_loss: 0.0869 - val_MAE: 0.2540 - val_MAPE: 67.5927 - lr: 8.2085e-05\n",
            "Epoch 51/60\n",
            "3/3 [==============================] - 0s 33ms/step - loss: 5.9734e-04 - MAE: 0.0160 - MAPE: 2.6809 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5692 - lr: 6.3928e-05\n",
            "Epoch 52/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 5.9205e-04 - MAE: 0.0159 - MAPE: 2.6573 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5888 - lr: 4.9787e-05\n",
            "Epoch 53/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 5.9060e-04 - MAE: 0.0158 - MAPE: 2.6455 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5724 - lr: 3.8774e-05\n",
            "Epoch 54/60\n",
            "3/3 [==============================] - 0s 30ms/step - loss: 5.8850e-04 - MAE: 0.0158 - MAPE: 2.6337 - val_loss: 0.0869 - val_MAE: 0.2541 - val_MAPE: 67.5731 - lr: 3.0197e-05\n",
            "Epoch 55/60\n",
            "3/3 [==============================] - 0s 32ms/step - loss: 5.8711e-04 - MAE: 0.0157 - MAPE: 2.6251 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5800 - lr: 2.3518e-05\n",
            "Epoch 56/60\n",
            "3/3 [==============================] - 0s 23ms/step - loss: 5.8600e-04 - MAE: 0.0157 - MAPE: 2.6183 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5740 - lr: 1.8316e-05\n",
            "Epoch 57/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 5.8485e-04 - MAE: 0.0157 - MAPE: 2.6118 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5700 - lr: 1.4264e-05\n",
            "Epoch 58/60\n",
            "3/3 [==============================] - 0s 31ms/step - loss: 5.8446e-04 - MAE: 0.0156 - MAPE: 2.6089 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5715 - lr: 1.1109e-05\n",
            "Epoch 59/60\n",
            "3/3 [==============================] - 0s 24ms/step - loss: 5.8389e-04 - MAE: 0.0156 - MAPE: 2.6063 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5700 - lr: 8.6517e-06\n",
            "Epoch 60/60\n",
            "3/3 [==============================] - 0s 25ms/step - loss: 5.8362e-04 - MAE: 0.0156 - MAPE: 2.6041 - val_loss: 0.0869 - val_MAE: 0.2542 - val_MAPE: 67.5698 - lr: 6.7379e-06\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4/4 [00:31<00:00,  7.83s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here I find the averages of the results per season from the four iterations\n",
        "\n"
      ],
      "metadata": {
        "id": "EiNERHe1SWVO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "average_mae_history = [\n",
        "    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]\n",
        "average_loss_history = [\n",
        "    np.mean([x[i] for x in all_loss_histories]) for i in range(num_epochs)]\n",
        "average_Tmae_history = [\n",
        "    np.mean([x[i] for x in all_Tmae_histories]) for i in range(num_epochs)]\n",
        "average_Tloss_history = [\n",
        "    np.mean([x[i] for x in all_Tloss_histories]) for i in range(num_epochs)]\n"
      ],
      "metadata": {
        "id": "p2fByrfzSW1E"
      },
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I save them to external text files so I can have them and print out whatever chart I need later\n",
        "\n"
      ],
      "metadata": {
        "id": "0HkfAVSVSZvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/drive/MyDrive/Thesis/Results/No Smoothing/ValMae.txt', \"w\") as file:\n",
        "    file.write(str(average_mae_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/No Smoothing/ValLoss.txt', \"w\") as file:\n",
        "    file.write(str(average_loss_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/No Smoothing/TrainMae.txt', \"w\") as file:\n",
        "    file.write(str(average_Tmae_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/No Smoothing/TrainLoss.txt', \"w\") as file:\n",
        "    file.write(str(average_Tloss_history))\n"
      ],
      "metadata": {
        "id": "94qFQhOnSber"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the list containing the Validation mae to find the appropriate training season\n",
        "\n"
      ],
      "metadata": {
        "id": "OIpB81zuS1OP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/drive/MyDrive/Thesis/Results/No Smoothing/ValMae.txt', \"r\") as file:\n",
        "    average_mae_history = eval(file.readline())\n"
      ],
      "metadata": {
        "id": "04OcqBGYS2PK"
      },
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am printing the result\n",
        "\n"
      ],
      "metadata": {
        "id": "7VNS9SHOTCx0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def smooth_curve(points, factor=0.5):\n",
        "  smoothed_points = []\n",
        "  for point in points:\n",
        "    if smoothed_points:\n",
        "      previous = smoothed_points[-1]\n",
        "      smoothed_points.append(previous * factor + point * (1 - factor))\n",
        "    else:\n",
        "      smoothed_points.append(point)\n",
        "  return smoothed_points\n",
        "\n",
        "smooth_mae_history = smooth_curve(average_mae_history[0:])\n",
        "\n",
        "plt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history)\n",
        "plt.title('4-Fold Cross Validation')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Validation_Mae')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "aV1S4KmvTDG9",
        "outputId": "9e1d24d3-7c31-4680-f18f-d0cfce3d7c20"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkkAAAHHCAYAAACr0swBAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABs0UlEQVR4nO3deVxUVf8H8M/MwAz7sAkDyKaiuGuoiGsliWamaaVmqVTaYrnQU+mvRM0Mt9Q007JSK9cs0zQxwyVN3PcFd0VBVmXfZ87vD2RyYlCGbWD4vF+veYA7d+79zo2H+XjOuedIhBACRERERKRDauwCiIiIiGojhiQiIiIiPRiSiIiIiPRgSCIiIiLSgyGJiIiISA+GJCIiIiI9GJKIiIiI9GBIIiIiItKDIYmIiIhID4YkIjKYRCLBtGnTHrnftGnTIJFIqr8gE6bvGvr4+GDUqFGPfO3KlSshkUhw48aNKqvnxo0bkEgkWLlyZZUdk6i2YkgiqoNmzpwJiUSCVq1alfs1EolE70OlUlVjpYbZs2cPBg0aBJVKBblcDhcXF/Tv3x+//vqrsUt7pKSkJJiZmeHll18uc5/MzExYWlpi0KBBNVhZxaxZswYLFy40dhlERmVm7AKIyDC3b9/GZ599Bmtra4Nf+9RTT2HEiBE62ywtLauqtEqZOnUqPvnkE/j5+eGNN96At7c3UlNT8ccff2Dw4MFYvXo1XnrpJWOXWSYXFxc89dRT2Lx5M3JycmBlZVVqn19//RV5eXkPDVLlcfHiRUil1ftv3DVr1uDs2bOYMGGCznZvb2/k5ubC3Ny8Ws9PVBswJBHVMf/73//QuXNnqNVqpKSkGPTapk2bVvoDujps3LgRn3zyCZ5//nmsWbNG5wP4/fffx44dO1BYWFjm6/Py8iCXy6s9ODzK8OHDERkZiS1btmDo0KGlnl+zZg2USiX69etXqfMoFIpKvb4yJBIJLCwsjHZ+oprE7jaiOuTvv//Gxo0bq60bJCkpCa+99hpcXV1hYWGBtm3bYtWqVeV67f79+9GxY0dYWFigcePG+Prrr8t93ilTpsDR0RHff/+93haKkJAQPPPMMwCKu+QkEgnWrVuHjz/+GB4eHrCyskJGRgYA4Oeff0ZAQAAsLS3h7OyMl19+GXFxcTrHS0hIQGhoKBo2bAiFQgE3NzcMGDBAZ+zO0aNHERISAmdnZ1haWsLX1xevvvrqQ9/Hc889B2tra6xZs6bUc0lJSYiKisLzzz8PhUKBffv24YUXXoCXlxcUCgU8PT0xceJE5ObmPvJ66RuTdO7cOTz55JOwtLREw4YN8emnn0Kj0ZR67ebNm9GvXz+4u7tDoVCgcePGmDFjBtRqtXafxx9/HNu2bcPNmze13bI+Pj4Ayh6TtGvXLnTv3h3W1tawt7fHgAEDcOHCBZ19SsZXXblyBaNGjYK9vT2USiVCQ0ORk5PzyPdNVNPYkkRUR6jVarz77rt4/fXX0bp16wodIy8vr1Trk62tLRQKBXJzc/H444/jypUreOedd+Dr64uff/4Zo0aNQlpaGsaPH1/mcc+cOYPevXujQYMGmDZtGoqKijB16lS4uro+sqbLly8jJiYGr776Kmxtbcv9XmbMmAG5XI7//e9/yM/Ph1wux8qVKxEaGoqOHTsiIiICiYmJ+OKLL/DPP//gxIkTsLe3BwAMHjwY586dw7vvvgsfHx8kJSVh586diI2N1f5c8n4mTZoEe3t73Lhx45Fjo6ytrTFgwABs3LgRd+/ehaOjo/a59evXQ61WY/jw4QCKw1xOTg7eeustODk54fDhw1i8eDFu376Nn3/+udzXASgOfU888QSKioowadIkWFtb45tvvtHblbpy5UrY2NggLCwMNjY22LVrF8LDw5GRkYG5c+cCAD766COkp6fj9u3bWLBgAQDAxsamzPP/9ddf6Nu3Lxo1aoRp06YhNzcXixcvRteuXXH8+HFtwCrx4osvwtfXFxERETh+/Di+/fZbuLi4YPbs2Qa9b6JqJ4ioTvjyyy+FUqkUSUlJQgghevbsKVq2bFnu1wPQ+1ixYoUQQoiFCxcKAOKnn37SvqagoEAEBQUJGxsbkZGRoXOsqVOnan8eOHCgsLCwEDdv3tRuO3/+vJDJZOJRf2Y2b94sAIgFCxaU633s3r1bABCNGjUSOTk5OrW6uLiIVq1aidzcXO32rVu3CgAiPDxcCCHEvXv3BAAxd+7cMs+xadMmAUAcOXKkXDU9aNu2bQKA+Prrr3W2d+7cWXh4eAi1Wi2EEDq1l4iIiBASiUTnOk6dOrXUNfT29hYjR47U/jxhwgQBQBw6dEi7LSkpSSiVSgFAXL9+Xbtd33nfeOMNYWVlJfLy8rTb+vXrJ7y9vUvte/36dZ3fGyGEaNeunXBxcRGpqanabadOnRJSqVSMGDGi1Ht59dVXdY753HPPCScnp1LnIjI2drcR1QGpqakIDw/HlClT0KBBgwofZ8CAAdi5c6fOIyQkBADwxx9/QKVSYdiwYdr9zc3NMW7cOGRlZWHv3r16j6lWq7Fjxw4MHDgQXl5e2u3NmzfXHvthSrrJDGlFAoCRI0fqtJQcPXoUSUlJePvtt3XGzPTr1w/+/v7Ytm0bgOKB6nK5HHv27MG9e/f0HrukxWnr1q0PHQulT0kL1INdbtevX8fBgwcxbNgw7bipB2vPzs5GSkoKunTpAiEETpw4YdA5//jjD3Tu3BmdOnXSbmvQoIG21epBD543MzMTKSkp6N69O3JychATE2PQeQHgzp07OHnyJEaNGqXTctamTRs89dRT+OOPP0q95s0339T5uXv37khNTdX+LhDVFgxJRHXAxx9/DEdHR7z77rsP3e/u3btISEjQPtLT03Web9iwIYKDg3Uebm5uAICbN2/Cz8+v1ODn5s2ba5/XJzk5Gbm5ufDz8yv1XLNmzR753uzs7AAUf2AbwtfXV+fnkvr0ndPf31/7vEKhwOzZs7F9+3a4urqiR48emDNnDhISErT79+zZE4MHD8b06dPh7OyMAQMGYMWKFcjPz39kXWZmZhgyZAj27dunHQtVEpgeDC2xsbHaYGFjY4MGDRqgZ8+eAFDqv9ujlPy3+y991+LcuXN47rnnoFQqYWdnhwYNGmgH8xt63pJzl3Wu5s2bIyUlBdnZ2TrbHwzTAODg4AAAZYZWImNhSCKq5S5fvoxvvvkG48aNQ3x8PG7cuIEbN24gLy8PhYWFuHHjBu7evQsAGDRoENzc3LSPh40jqi38/f0BFI9rMkRlpi6YMGECLl26hIiICFhYWGDKlClo3ry5tgVHIpFg48aNiI6OxjvvvIO4uDi8+uqrCAgIQFZW1iOP//LLL0Oj0WDt2rUAgLVr16JFixZo164dgOLWt6eeegrbtm3Dhx9+iN9++w07d+7UDobWN+C6KqSlpaFnz544deoUPvnkE/z+++/YuXOndixQdZ33v2Qymd7tQogaOT9ReXHgNlEtFxcXB41Gg3HjxmHcuHGlnvf19cX48eOxcOFCfP755zr/Gnd3dy/3eby9vXH69GloNBqd1qSSLhhvb2+9r2vQoAEsLS1x+fLlUs9dvHjxkedt2rQpmjVrhs2bN+OLL7546ADhR9Vfcs4nn3yyVB3/rb9x48Z477338N577+Hy5cto164dPv/8c/z000/afTp37ozOnTtj5syZWLNmDYYPH45169bh9ddff2gtgYGBaNy4MdasWYOnnnoK586dw8yZM7XPnzlzBpcuXcKqVat05q3auXNnhd97ea7/nj17kJqail9//RU9evTQbr9+/Xqp15Z3pvQHr/t/xcTEwNnZuUJzehHVBmxJIqrlWrVqhU2bNpV6tGzZEl5eXti0aRNee+01AEBAQIBOV1qLFi3KfZ6nn34aCQkJWL9+vXZbUVERFi9eDBsbG21X0H/JZDKEhITgt99+Q2xsrHb7hQsXsGPHjnKde/r06UhNTcXrr7+OoqKiUs//+eef2Lp160OP0aFDB7i4uGDZsmU63WLbt2/HhQsXtHMT5eTkIC8vT+e1jRs3hq2trfZ19+7dK9WqUdIKVJ4uN6C4a+3EiROYOnUqJBKJzkSYJS0pD55DCIEvvviiXMf+r6effhoHDx7E4cOHtduSk5OxevVqnf30nbegoABfffVVqWNaW1uXq/vNzc0N7dq1w6pVq5CWlqbdfvbsWfz55594+umnDX07RLUGW5KIajlnZ2cMHDiw1PaSuZL0PVcRY8aMwddff41Ro0bh2LFj8PHxwcaNG/HPP/9g4cKFDx1YPX36dERGRqJ79+54++23teGqZcuWOH369CPPPWTIEJw5cwYzZ87EiRMnMGzYMO2M25GRkYiKitI799CDzM3NMXv2bISGhqJnz54YNmyYdgoAHx8fTJw4EQBw6dIl9OrVCy+++CJatGgBMzMzbNq0CYmJidoJIFetWoWvvvoKzz33HBo3bozMzEwsX74cdnZ25f7Qf/nll/HJJ59g8+bN6Nq1q85t8P7+/mjcuDH+97//IS4uDnZ2dvjll18qPCbngw8+wI8//og+ffpg/Pjx2ikASloHS3Tp0gUODg4YOXIkxo0bB4lEgh9//FFvN1dAQADWr1+PsLAwdOzYETY2Nujfv7/e88+dOxd9+/ZFUFAQXnvtNe0UAEqlslxr/BHVWka8s46IKqEiUwCMHTv2ofskJiaK0NBQ4ezsLORyuWjdurXOrd4PHuvBKQCEEGLv3r0iICBAyOVy0ahRI7Fs2TK9t68/TFRUlBgwYIBwcXERZmZmokGDBqJ///5i8+bN2n1KpgD4+eef9R5j/fr1on379kKhUAhHR0cxfPhwcfv2be3zKSkpYuzYscLf319YW1sLpVIpAgMDxYYNG7T7HD9+XAwbNkx4eXkJhUIhXFxcxDPPPCOOHj1a7vcihBAdO3YUAMRXX31V6rnz58+L4OBgYWNjI5ydncXo0aPFqVOnSt1eX54pAIQQ4vTp06Jnz57CwsJCeHh4iBkzZojvvvuu1BQA//zzj+jcubOwtLQU7u7u4oMPPhA7duwQAMTu3bu1+2VlZYmXXnpJ2NvbCwDa6QD0TQEghBB//fWX6Nq1q7C0tBR2dnaif//+4vz58zr7lLyX5ORkne0rVqwoVSdRbSARgiPliIiIiP6LY5KIiIiI9GBIIiIiItKDIYmIiIhID4YkIiIiIj0YkoiIiIj0YEgiIiIi0oOTSVaQRqNBfHw8bG1tyz19PxERERmXEAKZmZlwd3cvtaD3fzEkVVB8fDw8PT2NXQYRERFVwK1bt9CwYcOH7sOQVEElSzTcunULdnZ2Rq6GiIiIyiMjIwOenp4PXWqpBENSBZV0sdnZ2TEkERER1THlGSrDgdtEREREejAkEREREenBkERERESkB0MSERERkR4MSURERER6MCQRERER6cGQRERERKQHQxIRERGRHgxJRERERHowJBERERHpwZBEREREpAdDEhEREZEeDEl1jEYjoNEIY5dBRERk8hiS6pjJv55B62k7EJ+Wa+xSiIiITBpDUh2SnV+ETSfikF2gxpEbd41dDhERkUljSKpDDl5LRYFaAwC4fY8tSURERNWJIakO+ftSsvb72/dyjFgJERGR6WNIqkP+vpyi/Z4tSURERNWLIamOiE3NwfWUbO3PcQxJRERE1YohqY7Ye7m4q83D3hIAcDstl1MBEBERVSOGpDqiZDzSCx0aQioBCoo0SMnKN3JVREREposhqQ4oKNLgwJXi8Ui9/F3hpixuTbrFLjciIqJqw5BUBxyPvYfsAjWcrOVo6W4HD4fikBTHCSWJiIiqDUNSHbD3fldbNz9nSKUSNLwfkjgNABERUfVhSKoDSsYj9WzaAADQ0MEKAKcBICIiqk4MSbVccmY+zsVnAAC6+90PSSV3uDEkERERVRuGpFpu3/1b/1u626GBrQIA2N1GRERUAxiSarmSrrYe97vagH+72+Lu5UIIzpVERERUHRiSajGNRmDf/aVIevj9G5JUSgtIJUB+kQYpWQXGKo+IiMikMSTVYufiM5CaXQBruQwB3g7a7XIzKVR2FgDY5UZERFRdGJJqsb/vj0cKauwMuZnufyoPBw7eJiIiqk4MSbVYyfxIPZs1KPUcpwEgIiKqXgxJtVRmXiGO37wHAOjppy8klcy6ze42IiKi6sCQVEsduJqKIo2Aj5MVvJysSj3fkN1tRERE1YohqZba+59Ztv/Lw57dbURERNWJIakWEkLonR/pQQ9OKMm5koiIiKoeQ1ItdD0lG7fv5cJcJkHnRk5693Gzt4BEAuQVapCazbmSiIiIqhpDUi1U0tXW0ccR1gozvfsozGRwtS2ZK4ldbkRERFWNIakWelRXWwntHW4MSURERFWuVoSkJUuWwMfHBxYWFggMDMThw4fL3Hf58uXo3r07HBwc4ODggODg4FL7//rrr+jduzecnJwgkUhw8uTJUsfJy8vD2LFj4eTkBBsbGwwePBiJiYlV/dYMlleoxsFrdwGUPWi7hAcXuiUiIqo2Rg9J69evR1hYGKZOnYrjx4+jbdu2CAkJQVJSkt799+zZg2HDhmH37t2Ijo6Gp6cnevfujbi4OO0+2dnZ6NatG2bPnl3meSdOnIjff/8dP//8M/bu3Yv4+HgMGjSoyt+foY7euIfcQjVcbBXwV9k+dF9OA0BERFR99A94qUHz58/H6NGjERoaCgBYtmwZtm3bhu+//x6TJk0qtf/q1at1fv7222/xyy+/ICoqCiNGjAAAvPLKKwCAGzdu6D1neno6vvvuO6xZswZPPvkkAGDFihVo3rw5Dh48iM6dO1fV2zNYyVIk3f0aQCKRPHTff2fdZksSERFRVTNqSCooKMCxY8cwefJk7TapVIrg4GBER0eX6xg5OTkoLCyEo6Njuc977NgxFBYWIjg4WLvN398fXl5eiI6O1huS8vPzkZ+fr/05IyOj3OczxKtdfdG4gTUaNbB55L5sSSIiIqo+Ru1uS0lJgVqthqurq852V1dXJCQklOsYH374Idzd3XUCz6MkJCRALpfD3t6+3OeNiIiAUqnUPjw9Pct9PkOolBYY0tELHX0eHfpKWpLi0nI5VxIREVEVM/qYpMqYNWsW1q1bh02bNsHCwqJazzV58mSkp6drH7du3arW85WHm7L4PecUqHEvp9DI1RAREZkWo3a3OTs7QyaTlbqrLDExESqV6qGvnTdvHmbNmoW//voLbdq0Mei8KpUKBQUFSEtL02lNeth5FQoFFAqFQeepbhbmMrjYKpCUmY/b93LgaC03dklEREQmw6gtSXK5HAEBAYiKitJu02g0iIqKQlBQUJmvmzNnDmbMmIHIyEh06NDB4PMGBATA3Nxc57wXL15EbGzsQ89bG3FcEhERUfUw+t1tYWFhGDlyJDp06IBOnTph4cKFyM7O1t7tNmLECHh4eCAiIgIAMHv2bISHh2PNmjXw8fHRjiGysbGBjU3xYOe7d+8iNjYW8fHxAIoDEFDcgqRSqaBUKvHaa68hLCwMjo6OsLOzw7vvvougoCCj3tlWEQ0drHA8No13uBEREVUxo4ekIUOGIDk5GeHh4UhISEC7du0QGRmpHcwdGxsLqfTfBq+lS5eioKAAzz//vM5xpk6dimnTpgEAtmzZog1ZADB06NBS+yxYsABSqRSDBw9Gfn4+QkJC8NVXX1XjO60enHWbiIioekgEb4uqkIyMDCiVSqSnp8POzs5odaw+dBMfbTqLXv4u+G5UR6PVQUREVBcY8vldp+9uowcnlGRLEhERUVViSKrjGj6wfhsbBYmIiKoOQ1Id52FfHJKyC9RI41xJREREVYYhqY6zMJehgW3x/E1xaexyIyIiqioMSSagpDWJ0wAQERFVHYYkE8AJJYmIiKoeQ5IJ4B1uREREVY8hyQQ8eIcbERERVQ2GJBPgwe42IiKiKseQZAI8H1iahHMlERERVQ2GJBPgYV88JikzvwgZuUVGroaIiMg0MCSZAEu5DM42cgDALY5LIiIiqhIMSSbCg3e4ERERVSmGJBPR8P6Ekpx1m4iIqGowJJkITgNARERUtRiSTARn3SYiIqpaDEkmgrNuExERVS2GJBPB7jYiIqKqxZBkIkpm3c7MK0J6bqGRqyEiIqr7GJJMhJXcDI7WxXMlxbHLjYiIqNIYkkwIu9yIiIiqDkOSCeEdbkRERFWHIcmE8A43IiKiqsOQZEI8tLNus7uNiIioshiSTAi724iIiKoOQ5IJ8XQs7m6LTc2BEMLI1RAREdVtDEkmxMfJGmZSCTLzixCfnmfscoiIiOo0hiQTIjeTolEDawDApYRMI1dDRERUtzEkmZhmKjsAQAxDEhERUaUwJJkYf5UtAOBiQoaRKyEiIqrbGJJMTFPX4pDEliQiIqLKYUgyMSUtSVeTs1Co1hi5GiIiorqLIcnEeNhbwlouQ6Fa4HpKtrHLISIiqrMYkkyMVCpBU+24JHa5ERERVRRDkgnyZ0giIiKqNIYkE8TB20RERJXHkGSCmpW0JCVyGgAiIqKKYkgyQf73J5S8dTcXWflFRq6GiIiobqoVIWnJkiXw8fGBhYUFAgMDcfjw4TL3Xb58Obp37w4HBwc4ODggODi41P5CCISHh8PNzQ2WlpYIDg7G5cuXdfbx8fGBRCLRecyaNata3l9Nc7SWo4GtAgBwOZFdbkRERBVh9JC0fv16hIWFYerUqTh+/Djatm2LkJAQJCUl6d1/z549GDZsGHbv3o3o6Gh4enqid+/eiIuL0+4zZ84cLFq0CMuWLcOhQ4dgbW2NkJAQ5OXpLvr6ySef4M6dO9rHu+++W63vtSZx8DYREVHlGD0kzZ8/H6NHj0ZoaChatGiBZcuWwcrKCt9//73e/VevXo23334b7dq1g7+/P7799ltoNBpERUUBKG5FWrhwIT7++GMMGDAAbdq0wQ8//ID4+Hj89ttvOseytbWFSqXSPqytrav77daYZhy8TUREVClGDUkFBQU4duwYgoODtdukUimCg4MRHR1drmPk5OSgsLAQjo6OAIDr168jISFB55hKpRKBgYGljjlr1iw4OTmhffv2mDt3LoqKyh6/k5+fj4yMDJ1Hbca5koiIiCrHzJgnT0lJgVqthqurq852V1dXxMTElOsYH374Idzd3bWhKCEhQXuM/x6z5DkAGDduHB577DE4OjriwIEDmDx5Mu7cuYP58+frPU9ERASmT59e7vdmbNrutsRMCCEgkUiMXBEREVHdYtSQVFmzZs3CunXrsGfPHlhYWBj02rCwMO33bdq0gVwuxxtvvIGIiAgoFIpS+0+ePFnnNRkZGfD09Kx48dXMz8UWEglwN7sAyVn5cLE17PoQERHVd0btbnN2doZMJkNiYqLO9sTERKhUqoe+dt68eZg1axb+/PNPtGnTRru95HWGHjMwMBBFRUW4ceOG3ucVCgXs7Ox0HrWZpVwGH6fiMVaXErKMXA0REVHdY9SQJJfLERAQoB10DUA7CDsoKKjM182ZMwczZsxAZGQkOnTooPOcr68vVCqVzjEzMjJw6NChhx7z5MmTkEqlcHFxqcQ7ql3+Hbxdu8dPERER1UZG724LCwvDyJEj0aFDB3Tq1AkLFy5EdnY2QkNDAQAjRoyAh4cHIiIiAACzZ89GeHg41qxZAx8fH+04IxsbG9jY2EAikWDChAn49NNP4efnB19fX0yZMgXu7u4YOHAgACA6OhqHDh3CE088AVtbW0RHR2PixIl4+eWX4eDgYJTrUB2aqWwReS6Bg7eJiIgqwOghaciQIUhOTkZ4eDgSEhLQrl07REZGagdex8bGQir9t8Fr6dKlKCgowPPPP69znKlTp2LatGkAgA8++ADZ2dkYM2YM0tLS0K1bN0RGRmrHLSkUCqxbtw7Tpk1Dfn4+fH19MXHiRJ0xR6ag2QODt4mIiMgwEiGEMHYRdVFGRgaUSiXS09Nr7fikq8lZ6PX5XliYS3Fueh/IpLzDjYiI6jdDPr+NPpkkVR8fJ2sozKTIK9Tg1t0cY5dDRERUpzAkmTCZVAI/VxsAnHmbiIjIUAxJJq6Za3FTIgdvExERGYYhycT9O/M2pwEgIiIyBEOSiStZw43dbURERIZhSDJxJS1JN1KykVeoNnI1REREdQdDkolzsVXA3socGgFcSeLyJEREROXFkGTiJBKJdnkSDt4mIiIqP4akesCfM28TEREZjCGpHmimKp4GgIO3iYiIyo8hqR5opiqeUPJiAqcBICIiKi+GpHqg6f0xSYkZ+UjLKTByNURERHUDQ1I9YGthDg97SwAcvE1ERFReDEn1BAdvExERGYYhqZ5oxpm3iYiIDMKQVE+UhCR2txEREZUPQ1I9URKSLiVkQghh5GqIiIhqP4akeqKRsw3MpBJk5hchPj3P2OUQERHVegxJ9YTcTIrGDThfEhERUXkxJNUjHLxNRERUfgxJ9YifS3FL0vXkbCNXQkREVPsxJNUjXk5WAIDYuzlGroSIiKj2Y0iqRzwdi0PSLYYkIiKiR2JIqke87oekOxl5yC9SG7kaIiKi2o0hqR5xspbDSi6DEEDcvVxjl0NERFSrMSTVIxKJRNuaxHFJRERED8eQVM9wXBIREVH5MCTVM2xJIiIiKh+GpHqGIYmIiKh8GJLqmX9DEgduExERPQxDUj3z4JgkIYSRqyEiIqq9GJLqmYYOlgCArPwi3MspNHI1REREtRdDUj1jYS6Dys4CAMclERERPUyFQ9KVK1ewY8cO5OYWj21h103dwcHbREREj2ZwSEpNTUVwcDCaNm2Kp59+Gnfu3AEAvPbaa3jvvfeqvECqepwriYiI6NEMDkkTJ06EmZkZYmNjYWVlpd0+ZMgQREZGVmlxVD20LUmpDElERERlMTP0BX/++Sd27NiBhg0b6mz38/PDzZs3q6wwqj5eTsWDt9ndRkREVDaDW5Kys7N1WpBK3L17FwqFokJFLFmyBD4+PrCwsEBgYCAOHz5c5r7Lly9H9+7d4eDgAAcHBwQHB5faXwiB8PBwuLm5wdLSEsHBwbh8+XKpeocPHw47OzvY29vjtddeQ1ZWVoXqr2s4JomIiOjRDA5J3bt3xw8//KD9WSKRQKPRYM6cOXjiiScMLmD9+vUICwvD1KlTcfz4cbRt2xYhISFISkrSu/+ePXswbNgw7N69G9HR0fD09ETv3r0RFxen3WfOnDlYtGgRli1bhkOHDsHa2hohISHIy8vT7jN8+HCcO3cOO3fuxNatW/H3339jzJgxBtdfF5WMSbqTnouCIo2RqyEiIqqlhIHOnDkjXFxcRJ8+fYRcLhfPP/+8aN68uXB1dRVXrlwx9HCiU6dOYuzYsdqf1Wq1cHd3FxEREeV6fVFRkbC1tRWrVq0SQgih0WiESqUSc+fO1e6TlpYmFAqFWLt2rRBCiPPnzwsA4siRI9p9tm/fLiQSiYiLiyvXedPT0wUAkZ6eXq79axONRiOaffyH8P5wq7ienGXscoiIiGqMIZ/fBrcktWrVCpcuXUK3bt0wYMAAZGdnY9CgQThx4gQaN25s0LEKCgpw7NgxBAcHa7dJpVIEBwcjOjq6XMfIyclBYWEhHB0dAQDXr19HQkKCzjGVSiUCAwO1x4yOjoa9vT06dOig3Sc4OBhSqRSHDh3Se578/HxkZGToPOoqiUTCLjciIqJHMHjgNlAcOj766KNKnzwlJQVqtRqurq46211dXRETE1OuY3z44Ydwd3fXhqKEhATtMf57zJLnEhIS4OLiovO8mZkZHB0dtfv8V0REBKZPn16umuoCL0crXErMwq17DElERET6VCgkAcUtOLGxsSgoKNDZ3qZNm0oXVV6zZs3CunXrsGfPHlhYWFTruSZPnoywsDDtzxkZGfD09KzWc1YnT7YkERERPZTBISk5ORmhoaHYvn273ufVanW5j+Xs7AyZTIbExESd7YmJiVCpVA997bx58zBr1iz89ddfOsGs5HWJiYlwc3PTOWa7du20+/x3YHhRURHu3r1b5nkVCkWF796rjbw4oSQREdFDGTwmacKECUhLS8OhQ4dgaWmJyMhIrFq1Cn5+ftiyZYtBx5LL5QgICEBUVJR2m0ajQVRUFIKCgsp83Zw5czBjxgxERkbqjCsCAF9fX6hUKp1jZmRk4NChQ9pjBgUFIS0tDceOHdPus2vXLmg0GgQGBhr0HuoqTwe2JBERET2MwS1Ju3btwubNm9GhQwdIpVJ4e3vjqaeegp2dHSIiItCvXz+DjhcWFoaRI0eiQ4cO6NSpExYuXIjs7GyEhoYCAEaMGAEPDw9EREQAAGbPno3w8HCsWbMGPj4+2jFENjY2sLGxgUQiwYQJE/Dpp5/Cz88Pvr6+mDJlCtzd3TFw4EAAQPPmzdGnTx+MHj0ay5YtQ2FhId555x0MHToU7u7uhl6SOsnLibNuExERPYzBISk7O1s76NnBwQHJyclo2rQpWrdujePHjxtcwJAhQ5CcnIzw8HAkJCSgXbt2iIyM1A68jo2NhVT6b4PX0qVLUVBQgOeff17nOFOnTsW0adMAAB988AGys7MxZswYpKWloVu3boiMjNQZt7R69Wq888476NWrF6RSKQYPHoxFixYZXH9dVdKSlJFXhPScQiitzI1cERERUe0iEUIIQ17QsWNHfPrppwgJCcGzzz4Le3t7REREYNGiRdi4cSOuXr1aXbXWKhkZGVAqlUhPT4ednZ2xy6mQjjP/QnJmPn5/pxtaN1QauxwiIqJqZ8jnt8EtSePHj8edO3cAFLfe9OnTB6tXr4ZcLsfKlSsrVDAZh5ejFZIz8xF7N4chiYiI6D8MDkkvv/yy9vuAgADcvHkTMTEx8PLygrOzc5UWR9XLy9EKx27e4+BtIiIiPSo8T1IJKysrPPbYY1VRC9UwzpVERERUtnKHpE8++aRc+4WHh1e4GKpZnCuJiIiobOUOSdOmTYO7uztcXFxQ1lhviUTCkFSHcP02IiKispU7JPXt2xe7du1Chw4d8Oqrr+KZZ57RuTWf6p6SkBSXlositQZmMv73JCIiKlHuT8Vt27bh6tWrCAwMxPvvvw8PDw98+OGHuHjxYnXWR9XIxVYBuZkUao3AnfQ8Y5dDRERUqxjUdODu7o7Jkyfj4sWLWL9+PZKSktCxY0d07doVubm51VUjVROpVAJPB0sA7HIjIiL6rwr3r3Ts2BFPPPEEmjdvjhMnTqCwsLAq66IawnFJRERE+hkckqKjozF69GioVCosXrwYI0eORHx8fJ2ddbq+Y0giIiLSr9wDt+fMmYOVK1ciJSUFw4cPx759+9CmTZvqrI1qAOdKIiIi0q/cIWnSpEnw8vLCiy++CIlEUuYSJPPnz6+q2qgGcK4kIiIi/codknr06AGJRIJz586VuY9EIqmSoqjmeDmxJYmIiEifcoekPXv2VGMZZCyeDsUhKS2nEOm5hVBamhu5IiIiotqh2mYPtLOzw7Vr16rr8FRFrBVmcLaRA2CXGxER0YOqLSSVtXQJ1T6eHJdERERUCtehoH8Hb99jSCIiIirBkEScK4mIiEgPhiR6YK4kLi1DRERUotpCEqcDqDtK7nDjmCQiIqJ/ceA2aedKun0vB2oN/7sREREB1RiStm/fDg8Pj+o6PFUhlZ0FzGUSFKoFEjLyjF0OERFRrVDuySRLqNVqrFy5ElFRUUhKSoJGo9F5fteuXQCAbt26VU2FVO1kUgkaOljheko2YlNz4GFvaeySiIiIjM7gkDR+/HisXLkS/fr1Q6tWrTj2yER4OhaHpFt3cxDU2MnY5RARERmdwSFp3bp12LBhA55++unqqIeMxMuxuPWI0wAQEREVM3hMklwuR5MmTaqjFjIizpVERESky+CQ9N577+GLL77g3WsmhiGJiIhIl8Hdbfv378fu3buxfft2tGzZEubmuqvG//rrr1VWHNUcrt9GRESky+CQZG9vj+eee646aiEjKglJqdkFyMovgo3C4F8NIiIik2LwJ+GKFSuqow4yMjsLczhYmeNeTiFupmajpbvS2CUREREZVYUnk0xOTsb+/fuxf/9+JCcnV2VNZCRNXGwAAJcTs4xcCRERkfEZHJKys7Px6quvws3NDT169ECPHj3g7u6O1157DTk5HM9SlzVT2QIAYhIyjVwJERGR8RkcksLCwrB37178/vvvSEtLQ1paGjZv3oy9e/fivffeq44aqYY0U9kBAGISMoxcCRERkfEZPCbpl19+wcaNG/H4449rtz399NOwtLTEiy++iKVLl1ZlfVSDmt9vSbrIliQiIiLDW5JycnLg6upaaruLiwu72+q4pvdD0p30PKTnFBq5GiIiIuMyOCQFBQVh6tSpyMv7d7X43NxcTJ8+HUFBQVVaHNUsOwtz7eK27HIjIqL6zuDuti+++AIhISFo2LAh2rZtCwA4deoULCwssGPHjiovkGqWv8oWcWm5uJiYicBGXOiWiIjqL4NDUqtWrXD58mWsXr0aMTExAIBhw4Zh+PDhsLS0rPICqWY1U9kiKiaJd7gREVG9V6F5kqysrDB69Gh8/vnn+Pzzz/H6669XKiAtWbIEPj4+sLCwQGBgIA4fPlzmvufOncPgwYPh4+MDiUSChQsXltonMzMTEyZMgLe3NywtLdGlSxccOXJEZ59Ro0ZBIpHoPPr06VPh92AqtNMA3GF3GxER1W/laknasmUL+vbtC3Nzc2zZsuWh+z777LMGFbB+/XqEhYVh2bJlCAwMxMKFCxESEoKLFy/CxcWl1P45OTlo1KgRXnjhBUycOFHvMV9//XWcPXsWP/74I9zd3fHTTz8hODgY58+fh4eHh3a/Pn366MwgrlAoDKrdFDV3K54G4FJiFoQQkEgkRq6IiIjIOCRCCPGonaRSKRISEuDi4gKptOzGJ4lEArVabVABgYGB6NixI7788ksAgEajgaenJ959911MmjTpoa/18fHBhAkTMGHCBO223Nxc2NraYvPmzejXr592e0BAAPr27YtPP/0UQHFLUlpaGn777TeD6i2RkZEBpVKJ9PR02NnZVegYtVGhWoMW4ZEoVAvs++AJ7ZpuREREpsCQz+9ydbdpNBptq45GoynzYWhAKigowLFjxxAcHPxvQVIpgoODER0dbdCxShQVFUGtVsPCwkJnu6WlJfbv36+zbc+ePXBxcUGzZs3w1ltvITU1tczj5ufnIyMjQ+dhisxlUjRuULw8CedLIiKi+szgMUk//PAD8vPzS20vKCjADz/8YNCxUlJSoFarS8275OrqioSEBENLAwDY2toiKCgIM2bMQHx8PNRqNX766SdER0fjzp072v369OmDH374AVFRUZg9ezb27t2Lvn37lhn0IiIioFQqtQ9PT88K1VcXlHS5cRoAIiKqzwwOSaGhoUhPTy+1PTMzE6GhoVVSVGX9+OOPEELAw8MDCoUCixYtwrBhw3S6CocOHYpnn30WrVu3xsCBA7F161YcOXIEe/bs0XvMyZMnIz09Xfu4detWDb2bmsc13IiIiCoQksoazHv79m0olUqDjuXs7AyZTIbExESd7YmJiVCpVIaWptW4cWPs3bsXWVlZuHXrFg4fPozCwkI0atSozNc0atQIzs7OuHLlit7nFQoF7OzsdB6mqhmXJyEiIir/PEnt27fX3irfq1cvmJn9+1K1Wo3r168bfAu9XC5HQEAAoqKiMHDgQADFY56ioqLwzjvvGHQsfaytrWFtbY179+5hx44dmDNnTpn73r59G6mpqXBzc6v0ees6//sh6VpKNvKL1FCYyYxcERERUc0rd0gqCTEnT55ESEgIbGxstM/J5XL4+Phg8ODBBhcQFhaGkSNHokOHDujUqRMWLlyI7OxsbdfdiBEj4OHhgYiICADFY5/Onz+v/T4uLg4nT56EjY0NmjRpAgDYsWMHhBBo1qwZrly5gvfffx/+/v7aY2ZlZWH69OkYPHgwVCoVrl69ig8++ABNmjRBSEiIwe/B1KjsLKC0NEd6biGuJGWhpbthLYRERESmoNwhaerUqQCKb7sfMmRIqbvHKmrIkCFITk5GeHg4EhIS0K5dO0RGRmoHc8fGxuqMJYqPj0f79u21P8+bNw/z5s1Dz549teOJ0tPTMXnyZNy+fRuOjo4YPHgwZs6cCXNzcwCATCbD6dOnsWrVKqSlpcHd3R29e/fGjBkzOFcSiqdyaKayxeHrd3ExIZMhiYiI6qVyzZNEpZnqPEklwjefxQ/RNzGmRyP839PNjV0OERFRlTDk89vgtdvUajUWLFiADRs2IDY2FgUFBTrP371719BDUi3kryqZBoCDt4mIqH4y+O626dOnY/78+RgyZAjS09MRFhaGQYMGQSqVYtq0adVQIhnDv3e4ca4kIiKqnwwOSatXr8by5cvx3nvvwczMDMOGDcO3336L8PBwHDx4sDpqJCMoCUmJGfm4l13wiL2JiIhMj8EhKSEhAa1btwYA2NjYaCeWfOaZZ7Bt27aqrY6MxkZhBk9HSwDsciMiovrJ4JDUsGFD7fIejRs3xp9//gkAOHLkCO8MMzHNXIvHJbHLjYiI6iODQ9Jzzz2HqKgoAMC7776LKVOmwM/PDyNGjMCrr75a5QWS8ZRMKnkxkS1JRERU/xh8d9usWbO03w8ZMgReXl6Ijo6Gn58f+vfvX6XFkXH5uxWHpAt3GJKIiKj+MTgk/VdQUBCCgoKqohaqZUpaki4lZkKjEZBKS6/ZR0REZKrKFZK2bNlS7gM+++yzFS6GahcfJ2vIzaTIKVDj9r1ceDlZGbskIiKiGlOukFSyblsJiUSC/07ULZEUtzKo1eqqqYyMzkwmhZ+LDc7FZ+BCQgZDEhER1SvlGrit0Wi0jz///BPt2rXD9u3bkZaWhrS0NGzfvh2PPfYYIiMjq7teqmH/TirJcUlERFS/GDwmacKECVi2bBm6deum3RYSEgIrKyuMGTMGFy5cqNICybj8GZKIiKieMngKgKtXr8Le3r7UdqVSiRs3blRBSVSbNLu/htsFzpVERET1jMEhqWPHjggLC0NiYqJ2W2JiIt5//3106tSpSosj42t+vyXpRko28go53oyIiOoPg0PS999/jzt37sDLywtNmjRBkyZN4OXlhbi4OHz33XfVUSMZUQNbBRyszKERwJWkLGOXQ0REVGMMHpPUpEkTnD59Gjt37kRMTAwAoHnz5ggODtbe4UamQyKRoJnKFgev3cWFOxlo5aE0dklEREQ1okKTSUokEvTu3Ru9e/eu6nqoFvJX2eHgtbscvE1ERPVKuULSokWLMGbMGFhYWGDRokUP3XfcuHFVUhjVHlzDjYiI6qNyhaQFCxZg+PDhsLCwwIIFC8rcTyKRMCSZoJK5kmLYkkRERPVIuULS9evX9X5P9UNTV1tIJEByZj5Ss/LhZKMwdklERETVzuC726j+sVaYwcuxeEkSjksiIqL6olwtSWFhYeU+4Pz58ytcDNVezVxtcTM1BzEJmejSxNnY5RAREVW7coWkEydOlOtgnALAdPm72eHP84mI4czbRERUT5QrJO3evbu666Bajmu4ERFRfcMxSVQuPk7WAIDb93KNXAkREVHNqNBkkkePHsWGDRsQGxuLgoICned+/fXXKimMahc3pQUAIDW7AHmFaliYy4xcERERUfUyuCVp3bp16NKlCy5cuIBNmzahsLAQ586dw65du6BUcskKU2VvZQ6FWfGvS1JGvpGrISIiqn4Gh6TPPvsMCxYswO+//w65XI4vvvgCMTExePHFF+Hl5VUdNVItIJFItK1Jd9LZ5UZERKbP4JB09epV9OvXDwAgl8uRnZ0NiUSCiRMn4ptvvqnyAqn2UN0PSQkZeUauhIiIqPoZHJIcHByQmVl8h5OHhwfOnj0LAEhLS0NOTk7VVke1ipvSEgCQkM6QREREpq/cIakkDPXo0QM7d+4EALzwwgsYP348Ro8ejWHDhqFXr17VUyXVCiptdxtDEhERmb5y393Wpk0bdOzYEQMHDsQLL7wAAPjoo49gbm6OAwcOYPDgwfj444+rrVAyvpIxSWxJIiKi+qDcIWnv3r1YsWIFIiIiMHPmTAwePBivv/46Jk2aVJ31US2isrvfksQxSUREVA+Uu7ute/fu+P7773Hnzh0sXrwYN27cQM+ePdG0aVPMnj0bCQkJ1Vkn1QL/jkni3W1ERGT6DB64bW1tjdDQUOzduxeXLl3CCy+8gCVLlsDLywvPPvtsddRItUTJmKSkzHwUqjVGroaIiKh6VWpZkiZNmuD//u//8PHHH8PW1hbbtm2rqrqoFnKylsNcJoEQQHImJ5QkIiLTVuGQ9Pfff2PUqFFQqVR4//33MWjQIPzzzz9VWRvVMlKpBC62vMONiIjqB4NCUnx8PD777DM0bdoUjz/+OK5cuYJFixYhPj4ey5cvR+fOnStUxJIlS+Dj4wMLCwsEBgbi8OHDZe577tw5DB48GD4+PpBIJFi4cGGpfTIzMzFhwgR4e3vD0tISXbp0wZEjR3T2EUIgPDwcbm5usLS0RHBwMC5fvlyh+usT3uFGRET1RblDUt++feHt7Y3Fixfjueeew4ULF7B//36EhobC2tq6wgWsX78eYWFhmDp1Ko4fP462bdsiJCQESUlJevfPyclBo0aNMGvWLKhUKr37vP7669i5cyd+/PFHnDlzBr1790ZwcDDi4uK0+8yZMweLFi3CsmXLcOjQIVhbWyMkJAR5efzwfxgVlyYhIqL6QpRT//79xW+//SaKiorK+5Jy6dSpkxg7dqz2Z7VaLdzd3UVERMQjX+vt7S0WLFigsy0nJ0fIZDKxdetWne2PPfaY+Oijj4QQQmg0GqFSqcTcuXO1z6elpQmFQiHWrl1brrrT09MFAJGenl6u/U3Fp1vPCe8Pt4pPt54zdilEREQGM+Tzu9wtSVu2bMGAAQMgk8mqLKAVFBTg2LFjCA4O1m6TSqUIDg5GdHR0hY5ZVFQEtVoNCwsLne2WlpbYv38/AOD69etISEjQOa9SqURgYGCZ583Pz0dGRobOoz5S3Z8GgGOSiIjI1FXq7rbKSklJgVqthqurq852V1fXCs+7ZGtri6CgIMyYMQPx8fFQq9X46aefEB0djTt37gCA9tiGnDciIgJKpVL78PT0rFB9dR3HJBERUX1h1JBUXX788UcIIeDh4QGFQoFFixZh2LBhkEor/nYnT56M9PR07ePWrVtVWHHdwfXbiIiovjBqSHJ2doZMJkNiYqLO9sTExDIHZZdH48aNsXfvXmRlZeHWrVs4fPgwCgsL0ahRIwDQHtuQ8yoUCtjZ2ek86qOSlqTEjDxoNMLI1RAREVUfo4YkuVyOgIAAREVFabdpNBpERUUhKCio0se3traGm5sb7t27hx07dmDAgAEAAF9fX6hUKp3zZmRk4NChQ1VyXlPWwEYBqQQo0gikZHNCSSIiMl3lXuC2uoSFhWHkyJHo0KEDOnXqhIULFyI7OxuhoaEAgBEjRsDDwwMREREAigd7nz9/Xvt9XFwcTp48CRsbGzRp0gQAsGPHDggh0KxZM1y5cgXvv/8+/P39tceUSCSYMGECPv30U/j5+cHX1xdTpkyBu7s7Bg4cWPMXoQ4xk0nhYmuBhIw8JKTnaSeXJCIiMjVGD0lDhgxBcnIywsPDkZCQgHbt2iEyMlI7qDo2NlZnLFF8fDzat2+v/XnevHmYN28eevbsiT179gAA0tPTMXnyZNy+fRuOjo4YPHgwZs6cCXNzc+3rPvjgA2RnZ2PMmDFIS0tDt27dEBkZWequOCrNVVkcku6k56FNQ2NXQ0REVD0kQggOLKmAjIwMKJVKpKen17vxSW/+eAyR5xIw/dmWGNnFx9jlEBERlZshn98meXcbVS/e4UZERPUBQxIZ7N+5krg0CRERmS6GJDJYSUtSQgZbkoiIyHQxJJHB3O4vTcJZt4mIyJQxJJHB3B4Yk8Rx/0REZKoYkshgLnYKAEB+kQZpOYVGroaIiKh6MCSRwRRmMjjbyAHwDjciIjJdDElUIf8O3uYdbkREZJoYkqhCVHbFg7fZkkRERKaKIYkqRKUsHpfEO9yIiMhUMSRRhZRMA8CWJCIiMlUMSVQhKruSWbcZkoiIyDQxJFGF/DtXEgduExGRaWJIogrR3t3GliQiIjJRDElUISUhKbtAjcw8TihJRESmhyGJKsRKbgalpTkAtiYREZFpYkiiCntwDTciIiJTw5BEFcZxSUREZMoYkqjC2JJERESmjCGJKszVjuu3ERGR6WJIogpjSxIREZkyhiSqMNX9pUk4JomIiEwRQxJVGFuSiIjIlDEkUYWV3N2WnluInIIiI1dDRERUtRiSqMJsFWawlssAsMuNiIhMD0MSVZhEIvl3rqQMhiQiIjItDElUKW4cvE1ERCaKIYkqRcXB20REZKIYkqhS3Lg0CRERmSgzYxdAdRtbkojov64kZWHr6XioNQIaISAEIID7X4t/6NmsAbo0djZ2qUQPxZBElaLi0iRE9AAhBN5efQyXErMeut83+65hZWgn9GzaoIYqIzIcQxJViordbUT0gL8vp+BSYhas5TK80METACCRABJI7n8FLiZmYt/lFIxbewJb3ukKbydr4xZNVAaGJKqUkrvbUrIKkF+khsJMZuSKiMiYvt13DQAwtJMXpjzTQu8++UVqDPn6IE7eSsMbPx7Dr293gZWcH0dU+3DgNlWKg5U55GbFv0ZJGflGroaIjOliQnELkVQCjOriU+Z+CjMZlr0cAGcbBWISMvH+xtMQQtRcoUTlxJBElSKRSLiGGxEBAL7bX9yK1LeVGzwdrR66r0ppgaUvPwYzqQTbTt/BN39fq4kSiQzC9k2qNJWdBW6m5uBOOgdvE9VXyZn5+O1EPADgte6+5XpNRx9HTH22Jab8dhazI2PQwt0O3f2qbyB3alY+9l5KRnZ+EfKLNMgv0qDgga8FajXMZVJ4OljBy9EKXk5W8HSwgqWcwwjqK4YkqrSSlqRELk1CVG/9ePAmCtQatPeyx2NeDuV+3cuBXjhzOw0bjt7GO2tO4Pd3usHL6eGtUIaKScjAiv03sOlkHAqKNAa/3tlGAS9HS3g5WsHP1RYt3O3Q0t0OLrYWVVon1T4MSVRpqvuDt9ndRlQ/5RWq8dPBmwCA17s1Mui1EokEnwxohYuJWTh1Kw1jfjxaJQO5NRqBXTFJWHHgOv65kqrd3sLNDj7OVpDLpJCb3X/IZFCYSyGXSZFXqMatezmIvZuD2NQcZOQVISUrHylZ+Tgem6Zzjga2CrS8H5hauivRws0Ono5WkEkllaq9NhJCIL9Ig5wCNXIKipBToEZ2fhFyC9TIL9Igr1B9v3Xu/tfCf7/Xttap77fYaVvuNCjSCBTd/6r+7/cagSEdPDG6h2G/U1WpVoSkJUuWYO7cuUhISEDbtm2xePFidOrUSe++586dQ3h4OI4dO4abN29iwYIFmDBhgs4+arUa06ZNw08//YSEhAS4u7tj1KhR+PjjjyGRFP/yjho1CqtWrdJ5XUhICCIjI6vlPZoyzrpNVL9tOhGHu9kF8LC3REhLV4Nfb2Euw7KXH0P/xfsRk5CJD385g0VD22n/XhsiK78IG4/ewsoDN3AjNQcAIJUUj5MK7eqDAG8Hg46bnlOoDU03U3MQk5CBc/EZuJacheTMfOy5mIw9F5O1+5vLJPB0tIKvkzV8nIsfxd9bwU1pWaMBqqBIoxNoMvOLkJVXhKz7X//9uRBZ+cX75BQUP5+dr0Z2QVHxtvvfa4wwtj45y7g3BBk9JK1fvx5hYWFYtmwZAgMDsXDhQoSEhODixYtwcXEptX9OTg4aNWqEF154ARMnTtR7zNmzZ2Pp0qVYtWoVWrZsiaNHjyI0NBRKpRLjxo3T7tenTx+sWLFC+7NCoaj6N1gPcNZtovpLCIHv9l8HAIR29YGZrGL3A7kpLfHV8AC8tPwgfj8VjyK1BmOfaIJWHspyvT4lKx8r/rmOH6JvIjOvCABgZ2GGYZ288EqQNxo6VKwLT2llDqWVslQdOQVFuHAnE+fj03Euvjg4XUzMREGRBteSs3EtObvUsSQSwEZuBjtLc9haFH+1szCHnaUZ7CzMYSa9P5fU/RAnuf8/EkggIO63zmiQX6jbepNXqEZuoRq5BeriQFRQ3MJTVE2pRmEmhbXCDJbmMljJZbCUy6Awk0Jhdv+r+QPfm+m22P37vQRyMynMZVLIpBKYSYu/msskOj972FtWy3soL6OHpPnz52P06NEIDQ0FACxbtgzbtm3D999/j0mTJpXav2PHjujYsSMA6H0eAA4cOIABAwagX79+AAAfHx+sXbsWhw8f1tlPoVBApVJV5dupl9iSRFR/7b2UjCtJWbBRmGFIR89KHauTryOmD2iJjzadxfazCdh+NgHd/ZzxZs/G6NLYSW8L0O17OVj+9zWsO3IL+ffHGzVytkZoN18Mfsyj2uZfspKbIcDbAQHe/46/UmsE7qTn4kZKDq6nZuNGSvHjemo2bt3NQaFaIPN+i05NksuksLEwg7VCBhuFOWwVZrCxMIPNA1+t5cXPWyvMYK0wg41CBit58XNW8uLtVvLibabYnVgWo4akgoICHDt2DJMnT9Zuk0qlCA4ORnR0dIWP26VLF3zzzTe4dOkSmjZtilOnTmH//v2YP3++zn579uyBi4sLHBwc8OSTT+LTTz+Fk5OT3mPm5+cjP//fZr+MjIwK12dqSpYmScrMQ5FaU+F/SRJR3VPSijS0oydsLcwrfbzhgd5o52mPb/6+hq2n72Df5RTsu5yC1h5KvNGzEfq2coNMKsGVpEx8tecqtpyM17aYtG2oxFuPN0HvFq6QGuGDXCaVoKGDFRo6WKGbn+66dEVqDdJyC5GRW4iMvCJk5hUiI7cIGXkl2wqL34d2nTvdNe8kEmhbayzMpbAwL26psTAv/llhLoO1vCTIFIcZy/vfm/NvcoUZNSSlpKRArVbD1VW3D9vV1RUxMTEVPu6kSZOQkZEBf39/yGQyqNVqzJw5E8OHD9fu06dPHwwaNAi+vr64evUq/u///g99+/ZFdHQ0ZLLSt3tGRERg+vTpFa7JlDnZKGAmlaBII5Ccla+dhZuITFtMQsa/k0d29amy47Z0V+KLoe3xv97N8O2+a1h/9BbOxKXjnTUn4O10EU0a2GDXxSSUzD/ZtYkT3n68SZmtTbWBmUwKZxsFnG04rKMuMXp3W3XYsGEDVq9ejTVr1qBly5Y4efIkJkyYAHd3d4wcORIAMHToUO3+rVu3Rps2bdC4cWPs2bMHvXr1KnXMyZMnIywsTPtzRkYGPD0r17RsKmRSCVztLBCXlos76XkMSUT1xHf7iluR+rZ2q/CYn4fxdLTC9AGtMD64KVYduIEfom/gZmrxAGoA6N3CFW8/0QTtPO2r/NxEgJFDkrOzM2QyGRITE3W2JyYmVmqs0Pvvv49JkyZpg1Dr1q1x8+ZNREREaEPSfzVq1AjOzs64cuWK3pCkUCg4sPshVMrikMRxSUT1Q1JmHjafvD95ZLfyTR5ZUY7Wckx8qine6NkIvxy7jfj0PAxq7wE/V9tqPS+RUTsq5XI5AgICEBUVpd2m0WgQFRWFoKCgCh83JycHUqnuW5PJZNBoyp5E7Pbt20hNTYWbm1uFz1ufldzhdvj6Xa7BRFSFMvIKq+W4mXmF2H0xCYVqwydXBICfoosnj3zMwMkjK8NKboZXgnzwYR9/BiSqEUYfzRUWFobly5dj1apVuHDhAt566y1kZ2dr73YbMWKEzsDugoICnDx5EidPnkRBQQHi4uJw8uRJXLlyRbtP//79MXPmTGzbtg03btzApk2bMH/+fDz33HMAgKysLLz//vs4ePAgbty4gaioKAwYMABNmjRBSEhIzV4AE9GzafFSAisP3MAnW89DbYwJNYhMzGd/XEC76X9qB0dXlbxCNYYtP4jQFUcw9JuDBrcA5xWq8WPJ5JHdjTfRH1F1k4ha8M/+L7/8UjuZZLt27bBo0SIEBgYCAB5//HH4+Phg5cqVAIAbN27A17d0027Pnj2xZ88eAEBmZiamTJmCTZs2ISkpCe7u7hg2bBjCw8Mhl8uRm5uLgQMH4sSJE0hLS4O7uzt69+6NGTNmlBpEXpaMjAwolUqkp6fDzs6uSq5DXSaEwLf7rmPmHxcAAH1bqbBgSDtYmHPNI6KK2Hk+EaN/OAqgeNzfmtcDEdhI/923hpry21ltyAEAZxs5Fg1tjy5NnB/yqmIX7mRg8q9ncPJWGho6WGLP/x7nHa1Upxjy+V0rQlJdxJCk35ZT8fjfhlMoUGvQwdsBy0d0gIO13NhlEdUpiRl56LPwb9zLKYSrnQKJGflwsVVg27juaGBbubGRv5+Kx7trTwAAZj7XCj9G30RMQiakEuC93s3wVs/Gem+fzytU44uoy1j+9zUUaQRsFWZYNKw9nvAvPekvUW1myOc34z9VqWfbumPVq51ga2GGozfvYfCyA7h1N8fYZRHVGRqNQNiGk7iXU4iW7nb4c0JPNHW1QVJmPsatPVGpruzrKdmY/OsZAMDYJxpjeKA3Nr3dFc8HNIRGAHN3XMToH44iPUd3HNS+y8noveBvLN1zFUUagT4tVdgZ1pMBiUweQxJVuaDGTvjlrS5wU1rgWnI2Bi09gLNx6cYui6hOWL7vGv65kgpLcxkWDWsPpZU5vhr+GKzkMkRfS8WCnZcqdNy8QjXeXn0cWflFCPR1xMTgpgAAS7kMc59vg1mDWkNuJkVUTBKe+XIfzsalIzUrH2HrT+KV7w4j9m4OVHYW+OaVACx7JUB7swaRKWN3WwWxu+3REtLzMGrFYcQkZMJaLsNXLwdoB3gTUWmnb6dh0FcHUKQRmDWoNYZ28tI+t+VUPMbd7yZbEdoRTzQzrBVn8q9nsPZwLJys5fhjfHe42pUOOWfj0vHmT8dw+14u5GZSWMllSMsphEQCjAzywXu9m1bJrNpExsTuNqoVVEoLbHgzCF2bOCG7QI3XVx1hixJRGbLzizB+3UkUaQT6tlKVWgft2bbueKWzNwBg4vqTiEvLLfexN5+Mw9rDsZBIgC+GttcbkACglYcS297tjl7+Ligo0iAtpxD+Klv8+lYXTHu2JQMS1TtsSaogtiSVX0GRBm/+dAy7YpLQ1NUGW97pxrveyKRUxZqFH2w8hQ1Hb8NNaYHt47vD3qr0DQ/5RWq8sCwap2+no62nPX5+Iwhys4ef90pSFp79cj9yCtQY18sPYU81fWQtGo3A+qO3UKQRGNrRk2t/kUlhSxLVKnIzKeY+3wbONnJcSszC/AqOqSCqjX4+egvNwyMxft0JpGblP/oFemw9HY8NR29DIgEWDGmnNyABgMJMhiUvPQalpTlO3UrDZ/en3ChLboEaY1cfR06BGkGNnDC+l1+56pFKJRjWyQuvdPZmQKJ6jb/9VCOcbBSIGNQGQPHA1EPXUo1cEVHlpecWYuYfF1CoFth8Mh5PLfgbm0/GGTTr/O17Odo7zt55ogk6P2IuJE9HK8x/sS2A4slb1x6OxYU7GTgXn44zt9Nx8lYajt28hyM37uL/Np3BxcRMONso8MWwdpDpubWfiMrG7rYKYndbxZR0KTR0sETkhB6wUZjkGstUT0Rsv4Cv916Dr7M1FGZSxCRkAgB6+bvg0+daPXSxZyEEzt/JwJTfzuJ4bBrae9ljwxtB5W65mR0Zg6V7rj5yP6kE+Om1wHJNFElUHxjy+c1PKKpRU55pgX+upOL2vVx8uvU8Zg1uY+ySiCrk9r0crPjnBgBgyjPN0a1JAyzbexWLd11GVEwSDs//G5Ofbo6hHT21kzOqNQLHbt7DjnMJ+PN8Am7dLR58baMwwxdD2hvUtfXeU02RmpWPnecTIZNKIJVIdL7KpBLIZVK81t2XAYmogtiSVEFsSaq4g9dSMWz5QQgBfDeyA3o1L99SMES1ycT1J7HpRBw6N3LE2tGdIZEUB6FLiZn4YONpnLyVBgDo3MgRL3f2xr5LKfjrQiJSswu0x1CYSdGjaQO82bMxArxrZpFYovqOy5LUAIakyvl063l8u/86nG0U+HNiDzhy6ZIqVfJ/65IP7vrg9r0cKMxklV62ozzOxqXjmcX7AQC/v9MNrRsqdZ5XawRWHriBeTsuIrdQrfOcnYUZgpu7ondLFXo0dYaVnA36RDWJ3W1U6/0vpBn2XkrG5aQsfLTpDL4a/li9+kCvTvFpuXj2y3+gEQLtPe3xmLcD2nvZo21De1ib6BiwA1dTMOr7IzCTSTD/xbbo08qt2s4lhEDE9uK7yga0cy8VkIDiBWlf6+aLp5q74pOt53E1OQvdmjgjpKUKgY0ceccYUR3BlqQKYktS5Z2NS8fAJf+gSCOwcEg7DGzvYeySTMLcHTFYsrv0gF6pBPBX2eExb3t08HbEUy1cTSI0xSRk4IWl0cjML9JuG9/LD+N7+eldqLWydl9MQuiKI5DLpIh6ryc8Ha2q/BxEVH04TxLVCa08lNp5W6ZsPos76eWfQZj0K1JrsPHYbQDAB32aYcozLdCvjRvclRbQCOD8nQz8dDAWE9afRFBEFCK2X0C8ATM31zZ30nMRuuIIMvOL0MnHEaFdfQAAX0RdxlurjyH7geBUFdQagVl/xAAARnbxZkAiMnFsSaogtiRVjSK1BoOXRePUrTSEtHTF1690MHZJddrumCSErjwCBytzHPy/XlCY/TuzeUJ6Ho7H3sPxm/fw14VE3EjNAVDcNdSvtRte6+aLtp72Dz1+Vn4RbqZmo3EDG6PPmp6RV4gXl0UjJiETTVxssPHNINhbybHh6C18vOksCtQaNHO1xfIRHeDlVDVhZsORW/jgl9NQWprj7/efgNKKy3QQ1TUcuF0DGJKqzsWETIQs/BtSCbD/wyfhbl/23DL0cG/+eAyR5xLwaldfhPdvUeZ+Go3ArpgkfLf/OqIfmNizg7cDXu/ui6BGzriWkoXLiVm4nJSJS4lZuJyYifj0PABA24ZKrB3T2WiDjguKNBi14jAOXE1FA1sFNr3dBQ0d/g1Cx2Pv4Y0fjyE5Mx/2Vub46qXHKn0bfE5BEZ6YtweJGfn46OnmGN2jUWXfBhEZAUNSDWBIqlpDv4nGwWt3y722FJWWkpWPzp9FoUgjsGNCDzRT2Zbrdefi0/Hd/uv4/VQ8CtWP/nMgk0qg1gj08nfB168EVHrNMkMJITBx/Un8djIe1nIZ1r8RhFYepQdPJ6Tn4Y0fj+LU7XTIpBJM6dccI7v4VPgGgS93Xca8Py+hoYMlot7rqdNKR0R1B8ckUZ3zUmDx6ubrj8SiSK0xcjV1028n4lCkEWjbUFnugAQALd2VmP9iO/zz4ZN454kmcLjfheRiq0C3Js4I7eqDz55rjY1vBuFUeG9seCMICjMpomKSMP338wYtwVEV5u64iN9OxsNMKsHSlwP0BiQAUCktsP6NIAxq7wG1RmDa7+exeNeVCp0zJSsfy/ZeAwC8H9KMAYmonqj7t7aQSQhp6QpHazkSM/KxKyYJvVuqjF1SnSKEwPojtwAAL3b0rNAxXOws8L+QZhgf7IfcQjXsLPSPtwnwdsAXQ9vhrdXH8ePBm/B0tMSYHo0rXLshfjx4E1/dX4ojYlBr9Gja4KH7W5jL8PmLbdFUZYtZ22Ow8K9L6ObnjMe8DJu48Yu/LiMrvwitPZTo38a9wvUTUd3CkES1gsJMhhcCGuLrv69hzeFYhiQDnbiVhstJWbAwl6J/28p9iJvLpI+cx6dPKzd83K8FZmw9j8/+iIG7vSWeqWR4SM3Kx/qjt5CeUwi1RqBII6AR979qBPKLNNh8Mg4AEPZUU7zQoXxhUCKR4M2ejXExIRObTsRh4vqT+GNc93JPf3Ds5l2sORwLAJj8tH+1TCtARLUTQxLVGsM6eeHrv69h76Vk3Lqbw9urDfDz0eJWpKdbuZXZAlTVXuvmi1t3c7DywA2EbTgFVzsLdPRxNPg4RWoNfjx4E/N3XkJm3qNv2R/WyRPvPtnE4PNMe7YlDl1Lxc3UHHy67QIiBrV+5Gtu3c3BmB+OQa0R6NfGDV0acw00ovqEIYlqDR9na3Rt4oR/rqRi/ZFb+F9IM2OXVCfkFBTh91N3AFS8q62ipjzTAvFpufjzfCJG/3AUv7zVBY0b2JT79dFXUzFtyzlcTMwEALRws0PXJk6QSaWQSVH8VSKBmax44VYPB0s83UpVocHXSktzzHuxLYZ/ewhrD8ciuLnLQ9cNzMwrxOurjiI1uwAt3Owwh4sxE9U7DElUq7zUybs4JB29hfHBfly+oRy2nb6DrPwi+DhZIdDX8JacypBJJfhiaHsMW34QJ2+lYdSKw9j0dlc42zx8/bT4tFzM/OMCtp0uDnf2VuZ4P6QZhnb0gqwau7O6NHbG6918sXzfdXz4y2lETuiht1a1RmD8upO4mJiJBrYKfDeqg0nMTk5EhuH/66lWeaqFK5xt5EjOzMdf5xPRt3X1rcFlKn4+WjzD9gsdPI2y/p2lXIZvR3bAoK8OIPZuDkJXHMELHRrCzsIcthZmsLO8/9XCHJbmMqw+dBNLdl9FbqEaUgkwPNAb7/VuCnurmlnk+L3ezfD3pRRcTMzE5F/P4JtXAkpdt8/+uIBdMUlQmEnx7YgOcFNy7i6i+oghiWoVuZkUL3TwxNI9V7HmcCxD0iNcS87C4Rt3IZUAgx9raLQ6nG0UWBnaEYOWHsCZuHSciUt/5Gs6+jhg2rMt0dJd/y381cXCXIYFQ9phwJL92Hk+ET8fva3TTbn2cCy+238dAPD5i20fOQs5EZku9mVQrTOsoxcAYN/lFNxMzTZyNbXbhvutSI83c4FKaWHUWho1sMG6MZ3xUqAX+rZSoWsTJ7RpqISPkxWcrOUwlxW31qjsLLBwSDtseCOoxgNSiRbudnivd/GYt+m/n0Ps/SVaDlxNwZTfzgIAJgY3rfQde0RUt7EliWodLycrdPdzxr7LKVh7+BYm9fUvc9/8IjU+//MSUjLz0aNpA/Rs2gAO1jXTbWNsRWoNfjleHJJe7GC8VqQH+avs8Nlz+u8aE6L4Nn65TForbqMf3b0Rdl1IwuEbdzFxw0nMHtwab/10HEUagWfbumNcL8PvoCMi08KQRLXS8EAv7Lucgo3HbiHsqaaQm5Vu9EzLKcAbPx7Doet3AQC/noiDVAK093LAk/4ueNLfBf4qW6OM06kJey4mIzkzH07WcjzpX/ZdWrWFRCIx+qK4D5JJJfj8xbbo+8U+HLt5D89++Q9yCtRo52mPOc+3MdnfGyIqP3a3Ua3Uq7krGtgqkJJVgD/PJ5R6/mZqNgZ9dQCHrt+FjcIMo7r4oJmrLTQCOHbzHubuuIi+X+xDl1m78H+bzphkt936+3MjDXrMQ2+IpEfzdLTCtGdbAgByCtRwV1rgmxEBtSrMEZHxsCWJaiVzmRRDOnjiy91XsOZQrM7YkGM372L0D8dwN7sA7koLfB/aEf6q4kUK49JysTsmCbtjkvDP1RTcSc/DmkOxuJmajdWvdzbW26lySZl52BWTBAB4sZwzT5N+gx/zwJnbadh3OQVfvvQYXGyNO7aLiGoPhiSqtYZ28sSSPVdw4Goqrqdkw9fZGr+fisd7P59CQZEGrT2U+G5kB7jY/fuh5mFviZc7e+Plzt7IK1Rjd0wS3lp9HNFXU5GalQ+nR8zfU1dsOh4HtUagvZc9/FzLv5gtlSaRSDB9QCsIIdjFRkQ62EZPtVZDBys8fn8B07WHY7Fk9xW8u/YECoo0eKqFK9a/0VknIP2XhbkMfVu7oaW7HTQC2Hk+saZKf6SE9Dy8tvIIIrZfgBDCoNdm5Rfhh+ibAIAhbEWqMgxIRPRfDElUq70U6A0A+HbfNczdcREA8Ho3Xyx7OQBW8vI1hD59f66lP86WHttkDLGpOXjh6wOIiknC13uv4ceDNw16ffjms4hLy4W70qLSi9kSEVHZGJKoVnuiWQOo7CygEYBUAswY0BIfP9PCoKUr+rRSAQAOXElBek5hdZVaLpcSM/H8sgO4dTcXthbFIe/TrRdw5vajJ18EgE0nbuPX48V38X0xrD2XyiAiqkYMSVSrmcmkeD+kGZq52uK7kR3xSpCPwcdo3MAGTV1tUKQR+OuC8brcTt1Kw4tfRyMpMx/NXG0RFdYTT7VwRYFag7FrjiMj7+EB7mZqNj7eVDzR4fheTdHRp2bXaSMiqm8YkqjWGxzQEDsm9sAT/i4VPkbfVsVdbtvP3qmqsgxy8Foqhn97CGk5hWjraa8dTzXv+bbwsLdE7N0cTPrldJnjkwqKNBi39gSyC9To5OOId57kRIdERNWNIYnqhb6ti7vc/r6cgqz8oho9966YRIz8/jCy8osQ1MgJq18P1C7mqrQyx5Lhj8FcJsEfZxLKHJ80f+clnLqdDqWlORYMbWdQdyMREVVMrQhJS5YsgY+PDywsLBAYGIjDhw+Xue+5c+cwePBg+Pj4QCKRYOHChaX2UavVmDJlCnx9fWFpaYnGjRtjxowZOv9KF0IgPDwcbm5usLS0RHBwMC5fvlwdb49qgWautvB1tkZBkUY7v1BN+P1UPMb8cAz5RRr08nfBitCOsPnPOKJ2nvaY1Lc5AP3jk/ZdTsayvVcBALMHt4aHPVekJyKqCUYPSevXr0dYWBimTp2K48ePo23btggJCUFSkv4PspycHDRq1AizZs2CSqXSu8/s2bOxdOlSfPnll7hw4QJmz56NOXPmYPHixdp95syZg0WLFmHZsmU4dOgQrK2tERISgry8vGp5n2RcEokEfe8P4N5+pma63H45dhvj1p1AkUagf1t3LHul7JmcX+3qo3d8UkpWPsI2nAIAvBTohT73uw2JiKj6GT0kzZ8/H6NHj0ZoaChatGiBZcuWwcrKCt9//73e/Tt27Ii5c+di6NChUCj0Twx44MABDBgwAP369YOPjw+ef/559O7dW9tCJYTAwoUL8fHHH2PAgAFo06YNfvjhB8THx+O3336rrrdKRlYyLmnPxWTkFqir9VzJmfkI33wWQgDDOnlh4ZB2MJeV/X83iUSCec+3RUOH4vFJH248DY1G4P2fTyE5Mx9+LjaY0q9FtdZMRES6jBqSCgoKcOzYMQQHB2u3SaVSBAcHIzo6usLH7dKlC6KionDp0iUAwKlTp7B//3707dsXAHD9+nUkJCTonFepVCIwMLBS56XarZWHHRo6WCK3UI29l6q3y21R1GVkF6jRpqESMwe2KtcYIqWVOb58qXh80vazCXj5u0PYfTEZcjMpFr/UHpZyridGRFSTjBqSUlJSoFar4eqqu4K5q6srEhIqPvHfpEmTMHToUPj7+8Pc3Bzt27fHhAkTMHz4cADQHtuQ8+bn5yMjI0PnQXXLg11uf5ypvoklryVnYe3hWADApL7+kBowyLqdpz0m3x+fdOBqKgDg437NtWvTERFRzTF6d1t12LBhA1avXo01a9bg+PHjWLVqFebNm4dVq1ZV+JgRERFQKpXah6cnl4Ooi0rG9OyKSUJ+UfV0uc3dcRFFGoEn/V3QpbGzwa8P7eqDkJbFAT64uSte6exd1SUSEVE5GDUkOTs7QyaTITFRd4K/xMTEMgdll8f777+vbU1q3bo1XnnlFUycOBEREREAoD22IeedPHky0tPTtY9bt25VuD4ynvae9lDZWSArvwj7L6dU+fGPx97D9rMJkEqAD/v4V+gYEokEXwxtj6XDH8OXL7XnmmJEREZi1JAkl8sREBCAqKgo7TaNRoOoqCgEBQVV+Lg5OTmQSnXfmkwmg0ajAQD4+vpCpVLpnDcjIwOHDh0q87wKhQJ2dnY6D6p7pFKJdpmSqu5yE0Ig4o8LAIDnAxqimcq2wscqWZy3rLvhiIio+hl94aewsDCMHDkSHTp0QKdOnbBw4UJkZ2cjNDQUADBixAh4eHhoW4EKCgpw/vx57fdxcXE4efIkbGxs0KRJ8SzE/fv3x8yZM+Hl5YWWLVvixIkTmD9/Pl599VUAxf9SnzBhAj799FP4+fnB19cXU6ZMgbu7OwYOHFjzF4FqVJ9WKqw8cAN/XUhEoVrz0LvODPHXhSQcuXEPFuZSTHyqaZUck4iIjMfoIWnIkCFITk5GeHg4EhIS0K5dO0RGRmoHVcfGxuq0CsXHx6N9+/ban+fNm4d58+ahZ8+e2LNnDwBg8eLFmDJlCt5++20kJSXB3d0db7zxBsLDw7Wv++CDD5CdnY0xY8YgLS0N3bp1Q2RkJCwsLGrmjZPRdPRxhLONHClZBYi+mooeTRtU+phFag1mbS9uRXq1qy/clJzwkYiorpOIshaLoofKyMiAUqlEeno6u97qoP/bdAZrDsViWCdPRAxqU+njrT0ci8m/noGDlTn2fvAE7CzMq6BKIiKqaoZ8fpvk3W1Ej1IyFcCf5xKh1lTu3wk5BUWYv7N4Tq53n/RjQCIiMhEMSVQvdW7kBHsrc6RmF+Dw9buVOta3+64jOTMfXo5WeJm36xMRmQyGJKqXzGVSPNW8eNzb9rMVX8stJSsfX99ffPb9kGaQm/H/UkREpoJ/0ane6tu6uMst8mwCNBXscntw+ZF+rbn4LBGRKWFIonqraxNn2CrMkJSZj+m/n0NKVn65XyuEwO6LSVhzqGLLjxARUe3HkET1lsJMhhFdiscQrYq+iR5zdmN2ZAzScgrKfE2RWoPfT8Wj/5f7EbriSKWWHyEiotqNUwBUEKcAMA1CCOy5lIwFOy/h9O10AICNwgyvdfPFa919tXeq5RaosfHYLSzfdx2xd3MAAJbmMgzp6ImJwU2htOIdbUREdYEhn98MSRXEkGRahBDYeT4R83deQkxCJgDAzsIMY3o0gkYAKw/cwN3s4hYmR2s5Rgb5YESQNxys5cYsm4iIDMSQVAMYkkyTRiMQeS4B83dewpWkLJ3nGjpYYkyPRnghwBOWcq6pRkRUFxny+W30ZUmIahOpVIKnW7shpKUKW0/H47v91yGTSjCqiw/6tXaDWRWt80ZERLUfQxKRHjKpBAPaeWBAOw9jl0JEREbCfxYTERER6cGQRERERKQHQxIRERGRHgxJRERERHowJBERERHpwZBEREREpAdDEhEREZEeDElEREREejAkEREREenBkERERESkB0MSERERkR4MSURERER6MCQRERER6cGQRERERKSHmbELqKuEEACAjIwMI1dCRERE5VXyuV3yOf4wDEkVlJmZCQDw9PQ0ciVERERkqMzMTCiVyofuIxHliVJUikajQXx8PGxtbSGRSAx6bUZGBjw9PXHr1i3Y2dlVU4Wmg9fLcLxmhuH1MhyvmWF4vQxTnddLCIHMzEy4u7tDKn34qCO2JFWQVCpFw4YNK3UMOzs7/p/FALxehuM1Mwyvl+F4zQzD62WY6rpej2pBKsGB20RERER6MCQRERER6cGQZAQKhQJTp06FQqEwdil1Aq+X4XjNDMPrZTheM8PwehmmtlwvDtwmIiIi0oMtSURERER6MCQRERER6cGQRERERKQHQxIRERGRHgxJNWzJkiXw8fGBhYUFAgMDcfjwYWOXVGv8/fff6N+/P9zd3SGRSPDbb7/pPC+EQHh4ONzc3GBpaYng4GBcvnzZOMXWAhEREejYsSNsbW3h4uKCgQMH4uLFizr75OXlYezYsXBycoKNjQ0GDx6MxMREI1VsfEuXLkWbNm20E9QFBQVh+/bt2ud5vR5u1qxZkEgkmDBhgnYbr9m/pk2bBolEovPw9/fXPs9rpV9cXBxefvllODk5wdLSEq1bt8bRo0e1zxvzbz9DUg1av349wsLCMHXqVBw/fhxt27ZFSEgIkpKSjF1arZCdnY22bdtiyZIlep+fM2cOFi1ahGXLluHQoUOwtrZGSEgI8vLyarjS2mHv3r0YO3YsDh48iJ07d6KwsBC9e/dGdna2dp+JEyfi999/x88//4y9e/ciPj4egwYNMmLVxtWwYUPMmjULx44dw9GjR/Hkk09iwIABOHfuHABer4c5cuQIvv76a7Rp00ZnO6+ZrpYtW+LOnTvax/79+7XP8VqVdu/ePXTt2hXm5ubYvn07zp8/j88//xwODg7afYz6t19QjenUqZMYO3as9me1Wi3c3d1FRESEEauqnQCITZs2aX/WaDRCpVKJuXPnarelpaUJhUIh1q5da4QKa5+kpCQBQOzdu1cIUXx9zM3Nxc8//6zd58KFCwKAiI6ONlaZtY6Dg4P49ttveb0eIjMzU/j5+YmdO3eKnj17ivHjxwsh+Dv2X1OnThVt27bV+xyvlX4ffvih6NatW5nPG/tvP1uSakhBQQGOHTuG4OBg7TapVIrg4GBER0cbsbK64fr160hISNC5fkqlEoGBgbx+96WnpwMAHB0dAQDHjh1DYWGhzjXz9/eHl5cXrxkAtVqNdevWITs7G0FBQbxeDzF27Fj069dP59oA/B3T5/Lly3B3d0ejRo0wfPhwxMbGAuC1KsuWLVvQoUMHvPDCC3BxcUH79u2xfPly7fPG/tvPkFRDUlJSoFar4erqqrPd1dUVCQkJRqqq7ii5Rrx++mk0GkyYMAFdu3ZFq1atABRfM7lcDnt7e5196/s1O3PmDGxsbKBQKPDmm29i06ZNaNGiBa9XGdatW4fjx48jIiKi1HO8ZroCAwOxcuVKREZGYunSpbh+/Tq6d++OzMxMXqsyXLt2DUuXLoWfnx927NiBt956C+PGjcOqVasAGP9vv1m1n4GIqt3YsWNx9uxZnfEPpF+zZs1w8uRJpKenY+PGjRg5ciT27t1r7LJqpVu3bmH8+PHYuXMnLCwsjF1Orde3b1/t923atEFgYCC8vb2xYcMGWFpaGrGy2kuj0aBDhw747LPPAADt27fH2bNnsWzZMowcOdLI1bElqcY4OztDJpOVupMhMTERKpXKSFXVHSXXiNevtHfeeQdbt27F7t270bBhQ+12lUqFgoICpKWl6exf36+ZXC5HkyZNEBAQgIiICLRt2xZffPEFr5cex44dQ1JSEh577DGYmZnBzMwMe/fuxaJFi2BmZgZXV1des4ewt7dH06ZNceXKFf5+lcHNzQ0tWrTQ2da8eXNtN6Wx//YzJNUQuVyOgIAAREVFabdpNBpERUUhKCjIiJXVDb6+vlCpVDrXLyMjA4cOHaq3108IgXfeeQebNm3Crl274Ovrq/N8QEAAzM3Nda7ZxYsXERsbW2+vmT4ajQb5+fm8Xnr06tULZ86cwcmTJ7WPDh06YPjw4drvec3KlpWVhatXr8LNzY2/X2Xo2rVrqalLLl26BG9vbwC14G9/tQ8NJ61169YJhUIhVq5cKc6fPy/GjBkj7O3tRUJCgrFLqxUyMzPFiRMnxIkTJwQAMX/+fHHixAlx8+ZNIYQQs2bNEvb29mLz5s3i9OnTYsCAAcLX11fk5uYauXLjeOutt4RSqRR79uwRd+7c0T5ycnK0+7z55pvCy8tL7Nq1Sxw9elQEBQWJoKAgI1ZtXJMmTRJ79+4V169fF6dPnxaTJk0SEolE/Pnnn0IIXq/yePDuNiF4zR703nvviT179ojr16+Lf/75RwQHBwtnZ2eRlJQkhOC10ufw4cPCzMxMzJw5U1y+fFmsXr1aWFlZiZ9++km7jzH/9jMk1bDFixcLLy8vIZfLRadOncTBgweNXVKtsXv3bgGg1GPkyJFCiOJbQadMmSJcXV2FQqEQvXr1EhcvXjRu0Uak71oBECtWrNDuk5ubK95++23h4OAgrKysxHPPPSfu3LljvKKN7NVXXxXe3t5CLpeLBg0aiF69emkDkhC8XuXx35DEa/avIUOGCDc3NyGXy4WHh4cYMmSIuHLlivZ5Xiv9fv/9d9GqVSuhUCiEv7+/+Oabb3SeN+bffokQQlR/exURERFR3cIxSURERER6MCQRERER6cGQRERERKQHQxIRERGRHgxJRERERHowJBERERHpwZBEREREpAdDEhFRJUgkEvz222/GLoOIqgFDEhHVWaNGjYJEIin16NOnj7FLIyITYGbsAoiIKqNPnz5YsWKFzjaFQmGkaojIlLAliYjqNIVCAZVKpfNwcHAAUNwVtnTpUvTt2xeWlpZo1KgRNm7cqPP6M2fO4Mknn4SlpSWcnJwwZswYZGVl6ezz/fffo2XLllAoFHBzc8M777yj83xKSgqee+45WFlZwc/PD1u2bNE+d+/ePQwfPhwNGjSApaUl/Pz8SoU6IqqdGJKIyKRNmTIFgwcPxqlTpzB8+HAMHToUFy5cAABkZ2cjJCQEDg4OOHLkCH7++Wf89ddfOiFo6dKlGDt2LMaMGYMzZ85gy5YtaNKkic45pk+fjhdffBGnT5/G008/jeHDh+Pu3bva858/fx7bt2/HhQsXsHTpUjg7O9fcBSCiiquRZXSJiKrByJEjhUwmE9bW1jqPmTNnCiGEACDefPNNndcEBgaKt956SwghxDfffCMcHBxEVlaW9vlt27YJqVQqEhIShBBCuLu7i48++qjMGgCIjz/+WPtzVlaWACC2b98uhBCif//+IjQ0tGreMBHVKI5JIqI67YknnsDSpUt1tjk6Omq/DwoK0nkuKCgIJ0+eBABcuHABbdu2hbW1tfb5rl27QqPR4OLFi5BIJIiPj0evXr0eWkObNm2031tbW8POzg5JSUkAgLfeeguDBw/G8ePH0bt3bwwcOBBdunSp0HsloprFkEREdZq1tXWp7q+qYmlpWa79zM3NdX6WSCTQaDQAgL59++LmzZv4448/sHPnTvTq1Qtjx47FvHnzqrxeIqpaHJNERCbt4MGDpX5u3rw5AKB58+Y4deoUsrOztc//888/kEqlaNasGWxtbeHj44OoqKhK1dCgQQOMHDkSP/30ExYuXIhvvvmmUscjoprBliQiqtPy8/ORkJCgs83MzEw7OPrnn39Ghw4d0K1bN6xevRqHDx/Gd999BwAYPnw4pk6dipEjR2LatGlITk7Gu+++i1deeQWurq4AgGnTpuHNN9+Ei4sL+vbti8zMTPzzzz949913y1VfeHg4AgIC0LJlS+Tn52Pr1q3akEZEtRtDEhHVaZGRkXBzc9PZ1qxZM8TExAAovvNs3bp1ePvtt+Hm5oa1a9eiRYsWAAArKyvs2LED48ePR8eOHWFlZYXBgwdj/vz52mONHDkSeXl5WLBgAf73v//B2dkZzz//fLnrk8vlmDx5Mm7cuAFLS0t0794d69atq4J3TkTVTSKEEMYugoioOkgkEmzatAkDBw40dilEVAdxTBIRERGRHgxJRERERHpwTBIRmSyOJiCiymBLEhEREZEeDElEREREejAkEREREenBkERERESkB0MSERERkR4MSURERER6MCQRERER6cGQRERERKQHQxIRERGRHv8P5YgCX8gaahsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I find what is the best season. That is, the one with the youngest Mae\n",
        "\n"
      ],
      "metadata": {
        "id": "qKWxAeYDTIvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Min_Mae=min(smooth_mae_history)\n",
        "Best_Epoch=smooth_mae_history.index(Min_Mae)\n",
        "Best_Epoch\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2juDxo_cTJKo",
        "outputId": "eeeb853f-805e-4735-e816-6aa0543642cb"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now knowing the best training time I train the model and check it with the test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "4tZIJ09nTM9U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "test_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Test.csv',sep=',',index_col=0)\n",
        "\n",
        "#Calls the function to make the final changes to the dataset so that it is ready for training\n",
        "TestDF=Prepare_Dataset(test_data)\n",
        "TrainDF=Prepare_Dataset(train_data)\n",
        "\n",
        "#It is divided into target and features\n",
        "train_targets=TrainDF['Real_Rate']\n",
        "train_data=TrainDF.drop(['Real_Rate'], axis=1)\n",
        "test_targets=TestDF['Real_Rate']\n",
        "test_data=TestDF.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "#Calls the function to make the final changes to the dataset so that it is ready for training\n",
        "test_targets = Normalization(test_targets)\n",
        "train_targets = Normalization(train_targets)\n",
        "\n",
        "#Finds the mean of the targets and uses it to initialize the biases when the model is built\n",
        "Target=train_targets\n",
        "Bias_Initial_Out=Target.mean()\n",
        "Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "#Calls the function to do standardization\n",
        "train_data,test_data=Scaller(train_data,test_data)\n"
      ],
      "metadata": {
        "id": "vtrdsmjeTNhb"
      },
      "execution_count": 170,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I have been training for 44 epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "Qk89nYrUTa6K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = Residual_NN(gnn=train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "model.fit(train_data,train_targets,callbacks=callback,\n",
        "          epochs=44, batch_size=16, verbose=1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L0E-C6zjTbVc",
        "outputId": "e1d76504-71ce-44b1-a95a-0e292d15f3d8"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/44\n",
            "4/4 [==============================] - 7s 9ms/step - loss: 0.0996 - MAE: 0.2571 - MAPE: 52.9624 - lr: 0.0010\n",
            "Epoch 2/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0511 - MAE: 0.1877 - MAPE: 35.6996 - lr: 0.0010\n",
            "Epoch 3/44\n",
            "4/4 [==============================] - 0s 10ms/step - loss: 0.0301 - MAE: 0.1405 - MAPE: 25.1524 - lr: 0.0010\n",
            "Epoch 4/44\n",
            "4/4 [==============================] - 0s 20ms/step - loss: 0.0274 - MAE: 0.1302 - MAPE: 27.1706 - lr: 0.0010\n",
            "Epoch 5/44\n",
            "4/4 [==============================] - 0s 15ms/step - loss: 0.0204 - MAE: 0.1097 - MAPE: 22.5393 - lr: 0.0010\n",
            "Epoch 6/44\n",
            "4/4 [==============================] - 0s 11ms/step - loss: 0.0186 - MAE: 0.1121 - MAPE: 21.2779 - lr: 0.0010\n",
            "Epoch 7/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0150 - MAE: 0.0978 - MAPE: 19.3422 - lr: 0.0010\n",
            "Epoch 8/44\n",
            "4/4 [==============================] - 0s 14ms/step - loss: 0.0139 - MAE: 0.0970 - MAPE: 18.2552 - lr: 0.0010\n",
            "Epoch 9/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0093 - MAE: 0.0786 - MAPE: 15.4562 - lr: 0.0010\n",
            "Epoch 10/44\n",
            "4/4 [==============================] - 0s 14ms/step - loss: 0.0086 - MAE: 0.0743 - MAPE: 14.4009 - lr: 0.0010\n",
            "Epoch 11/44\n",
            "4/4 [==============================] - 0s 15ms/step - loss: 0.0075 - MAE: 0.0686 - MAPE: 12.8589 - lr: 0.0010\n",
            "Epoch 12/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0064 - MAE: 0.0652 - MAPE: 12.6805 - lr: 0.0010\n",
            "Epoch 13/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0057 - MAE: 0.0597 - MAPE: 11.1846 - lr: 0.0010\n",
            "Epoch 14/44\n",
            "4/4 [==============================] - 0s 10ms/step - loss: 0.0053 - MAE: 0.0570 - MAPE: 10.9063 - lr: 0.0010\n",
            "Epoch 15/44\n",
            "4/4 [==============================] - 0s 12ms/step - loss: 0.0047 - MAE: 0.0509 - MAPE: 9.9906 - lr: 0.0010\n",
            "Epoch 16/44\n",
            "4/4 [==============================] - 0s 15ms/step - loss: 0.0041 - MAE: 0.0483 - MAPE: 9.0399 - lr: 0.0010\n",
            "Epoch 17/44\n",
            "4/4 [==============================] - 0s 12ms/step - loss: 0.0038 - MAE: 0.0465 - MAPE: 8.5252 - lr: 0.0010\n",
            "Epoch 18/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0038 - MAE: 0.0464 - MAPE: 9.0775 - lr: 0.0010\n",
            "Epoch 19/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0035 - MAE: 0.0449 - MAPE: 8.9939 - lr: 0.0010\n",
            "Epoch 20/44\n",
            "4/4 [==============================] - 0s 17ms/step - loss: 0.0033 - MAE: 0.0425 - MAPE: 7.6768 - lr: 0.0010\n",
            "Epoch 21/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0031 - MAE: 0.0416 - MAPE: 7.5601 - lr: 0.0010\n",
            "Epoch 22/44\n",
            "4/4 [==============================] - 0s 12ms/step - loss: 0.0029 - MAE: 0.0407 - MAPE: 7.6989 - lr: 0.0010\n",
            "Epoch 23/44\n",
            "4/4 [==============================] - 0s 12ms/step - loss: 0.0028 - MAE: 0.0414 - MAPE: 7.7939 - lr: 0.0010\n",
            "Epoch 24/44\n",
            "4/4 [==============================] - 0s 19ms/step - loss: 0.0025 - MAE: 0.0378 - MAPE: 7.0306 - lr: 0.0010\n",
            "Epoch 25/44\n",
            "4/4 [==============================] - 0s 15ms/step - loss: 0.0024 - MAE: 0.0369 - MAPE: 6.4200 - lr: 0.0010\n",
            "Epoch 26/44\n",
            "4/4 [==============================] - 0s 14ms/step - loss: 0.0022 - MAE: 0.0347 - MAPE: 6.1314 - lr: 0.0010\n",
            "Epoch 27/44\n",
            "4/4 [==============================] - 0s 12ms/step - loss: 0.0022 - MAE: 0.0349 - MAPE: 6.4154 - lr: 0.0010\n",
            "Epoch 28/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0021 - MAE: 0.0355 - MAPE: 6.5528 - lr: 0.0010\n",
            "Epoch 29/44\n",
            "4/4 [==============================] - 0s 11ms/step - loss: 0.0019 - MAE: 0.0315 - MAPE: 5.6542 - lr: 0.0010\n",
            "Epoch 30/44\n",
            "4/4 [==============================] - 0s 11ms/step - loss: 0.0019 - MAE: 0.0331 - MAPE: 5.9613 - lr: 0.0010\n",
            "Epoch 31/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0019 - MAE: 0.0326 - MAPE: 5.9071 - lr: 0.0010\n",
            "Epoch 32/44\n",
            "4/4 [==============================] - 0s 14ms/step - loss: 0.0018 - MAE: 0.0300 - MAPE: 5.5730 - lr: 0.0010\n",
            "Epoch 33/44\n",
            "4/4 [==============================] - 0s 10ms/step - loss: 0.0018 - MAE: 0.0326 - MAPE: 6.0458 - lr: 0.0010\n",
            "Epoch 34/44\n",
            "4/4 [==============================] - 0s 10ms/step - loss: 0.0017 - MAE: 0.0304 - MAPE: 5.5287 - lr: 0.0010\n",
            "Epoch 35/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0017 - MAE: 0.0310 - MAPE: 5.6834 - lr: 0.0010\n",
            "Epoch 36/44\n",
            "4/4 [==============================] - 0s 14ms/step - loss: 0.0015 - MAE: 0.0288 - MAPE: 5.0330 - lr: 0.0010\n",
            "Epoch 37/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0015 - MAE: 0.0287 - MAPE: 4.9531 - lr: 0.0010\n",
            "Epoch 38/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0015 - MAE: 0.0278 - MAPE: 4.7146 - lr: 0.0010\n",
            "Epoch 39/44\n",
            "4/4 [==============================] - 0s 13ms/step - loss: 0.0014 - MAE: 0.0283 - MAPE: 4.8785 - lr: 0.0010\n",
            "Epoch 40/44\n",
            "4/4 [==============================] - 0s 12ms/step - loss: 0.0014 - MAE: 0.0267 - MAPE: 4.8292 - lr: 0.0010\n",
            "Epoch 41/44\n",
            "4/4 [==============================] - 0s 24ms/step - loss: 0.0013 - MAE: 0.0249 - MAPE: 4.3226 - lr: 7.7880e-04\n",
            "Epoch 42/44\n",
            "4/4 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0240 - MAPE: 4.1747 - lr: 6.0653e-04\n",
            "Epoch 43/44\n",
            "4/4 [==============================] - 0s 11ms/step - loss: 0.0012 - MAE: 0.0237 - MAPE: 4.1281 - lr: 4.7237e-04\n",
            "Epoch 44/44\n",
            "4/4 [==============================] - 0s 11ms/step - loss: 0.0011 - MAE: 0.0231 - MAPE: 4.0936 - lr: 3.6788e-04\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ca9bd4fa470>"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "test with test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "3EjhcNrcTpn6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_mse_score, test_mae_score, test_mape_score = model.evaluate(test_data, test_targets)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oAiZEpLMTrDp",
        "outputId": "062d4afe-a713-4eaa-9afe-471ae6718446"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 658ms/step - loss: 0.0994 - MAE: 0.2490 - MAPE: 33.5130\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Smoothing\n",
        "\n",
        "Here I do the above procedure by applying smoothing to both the train-set and the validation/test-set\n",
        "\n",
        ".\n",
        "\n",
        "The following function accepts a dataset and returns a smoothed-dataset. Essentially using one data sample creates three, that is, it triples the data set. I have described the process in detail in the report."
      ],
      "metadata": {
        "id": "5Iqh2KxqTvZp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Smouth(Legal_illegal):\n",
        "    #Takes the recorded time-slots and converts them so that they are displayed with their center \"eg: 7:00->7:30\"\n",
        "    Time_Slots=[21600,25200,28800,32400,36000,39600,43200,46800,50400,54000,57600,61200,64800,68400,72000]\n",
        "    Time_SlotsCenter=[]\n",
        "    for i in range (0,len(Time_Slots)):\n",
        "        Time_SlotsCenter.append((Time_Slots[i]+1800)/timedelta(days=1).total_seconds())\n",
        "    Time_Slots=Time_SlotsCenter\n",
        "\n",
        "\n",
        "    Scan_List2=Legal_illegal.values.tolist()\n",
        "    NewData=[]\n",
        "    Slots=[]\n",
        "    for i in range(0,len(Scan_List2)):\n",
        "        Helper=[]\n",
        "        Helper2=[]\n",
        "        Rate=Scan_List2[i][6] #Actual rate of parking violations\n",
        "        Real_Time=Scan_List2[i][5] #Real time of the check\n",
        "\n",
        "        #It measures the distances from all time slots for each control\n",
        "        #By measuring the distance from the actual time of the control with the centers of the timeslots\n",
        "        #It finds the three closest time-slots for each check\n",
        "        Distances=[]\n",
        "        for j in range (0,len(Time_Slots)):\n",
        "            Distances.append(abs(Time_Slots[j]-Real_Time))\n",
        "        Slots=np.column_stack((Time_Slots, Distances))\n",
        "        Slots = sorted(Slots, key=lambda x: x[1])\n",
        "        Slot1,Slot2,Slot3=Slots[0][0],Slots[1][0],Slots[2][0] #3 nearest time-slots\n",
        "        D1,D2,D3=Slots[0][1],Slots[1][1],Slots[2][1] #Time Distances from the 3 nearest time-slots\n",
        "\n",
        "        #Creates a data sample with all the characteristics from the original setting the closest \"Slot1\" as a time slot\n",
        "        #Puts the actual 'Rate' as the delinquency rate\n",
        "        #Like a distance of 0, because after we put the actual percentage it is as if we consider it to be exactly at\n",
        "        #center of the time-slot. I explain the formula in more detail in the paper.\n",
        "        Helper=Scan_List2[i][:11]\n",
        "        Helper.append(Slot1)\n",
        "        Helper.append(Rate)\n",
        "        Helper.append(0)\n",
        "        NewData.append(Helper)\n",
        "\n",
        "        #Creates a second data sample with all the attributes from the original one\n",
        "        #as the second closest time slot\n",
        "        #Puts as delinquency rate what is obtained by applying the Gaussian\n",
        "        #Sets the distance 'D2' from the second closest timeslot\n",
        "        Helper=Scan_List2[i][:11]\n",
        "        Helper.append(Slot2)\n",
        "        #Formula is \"-distance in minutes/210 minutes\"\n",
        "        #'0.14583' is 210 minutes, according to my time normalization\n",
        "        X1=(-D2/0.14583)\n",
        "        X2=np.exp(X1)\n",
        "        Helper.append(X2*Rate)\n",
        "        Helper.append(D2)\n",
        "        NewData.append(Helper)\n",
        "\n",
        "        #Creates a third data sample with all the characteristics from the original one by setting it as a time slot\n",
        "        #the third closest\n",
        "        #Puts as delinquency rate what is obtained by applying the Gaussian\n",
        "        #Sets the distance 'D3' from the third closest timeslot\n",
        "        Helper=Scan_List2[i][:11]\n",
        "        Helper.append(Slot3)\n",
        "        X1=(-D3/0.14583)\n",
        "        X2=np.exp(X1)\n",
        "        Helper.append(X2*Rate)\n",
        "        Helper.append(D3)\n",
        "        NewData.append(Helper)\n",
        "\n",
        "    Col=['Slot_id','Key','Date_Sin','Slot_Timeint','Covid','Time_Int','Ilegality_Rate','Holidays','Capacity','Week_Day_Sin','Month_Sin','Real_Time','Real_Rate','Time_Distance']\n",
        "    Legal_illegal = pd.DataFrame (NewData, columns = Col)\n",
        "\n",
        "\n",
        "    #Create the final dataset by deleting the features that are not needed.\n",
        "    #Repositions an attribute to be in the correct position.\n",
        "    Legal_illegal=Legal_illegal.drop(['Slot_Timeint'], axis=1)\n",
        "    Legal_illegal=Legal_illegal.drop(['Time_Int'], axis=1)\n",
        "    Legal_illegal=Legal_illegal.drop(['Ilegality_Rate'], axis=1)\n",
        "    a=Legal_illegal['Time_Distance']\n",
        "    Legal_illegal=Legal_illegal.drop(['Time_Distance'], axis=1)\n",
        "    Legal_illegal.insert(8, \"Time_Distance\", a, True)\n",
        "    return Legal_illegal"
      ],
      "metadata": {
        "id": "6Urm2QxzTy2g"
      },
      "execution_count": 174,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since we used one sample above to create 2 more and gave the same characteristics apart from the delinquency rate and the timeslot. We have also given a 'Key', the key is datetime and I use it afterwards to merge the hourly weather values. Since the 2 new samples represent another time the 'Key' must also be changed. In the following function we find the correct keys.\n",
        "\n"
      ],
      "metadata": {
        "id": "uhyC4mXsT7r4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Get_Weather(Legal_illegal):\n",
        "    #Converts time to normal format\n",
        "    Time=Legal_illegal['Real_Time']*timedelta(days=1).total_seconds()\n",
        "    Time=Time/3600\n",
        "    Time=Time.astype(int)\n",
        "    Time=Time.values.tolist()\n",
        "    NewT=[]\n",
        "    #If the time is 9:00, it converts it to 09:00 to have the same format as the weather key\n",
        "    for i in range (0,len(Time)):\n",
        "        Str=str(Time[i])\n",
        "        if Time[i]>=10:\n",
        "            NewT.append(Str)\n",
        "        else:\n",
        "            NewT.append('0'+Str)\n",
        "\n",
        "    #Puts \":00\" at the end of each hour to have the same format as the weather key\n",
        "    Time=pd.DataFrame(NewT,columns=[\"Hour\"])\n",
        "    Time= Time[\"Hour\"].map(str)+ ':00'\n",
        "    #Also takes the date\n",
        "    T_List=Legal_illegal.values.tolist()\n",
        "    Date=[]\n",
        "    for i in range (0,len(Legal_illegal)):\n",
        "        D,H=T_List[i][1].split(' ')\n",
        "        Date.append(D)\n",
        "\n",
        "    #Sets the date as a new key\n",
        "    Legal_illegal=Legal_illegal.drop(['Key'], axis=1)\n",
        "    Legal_illegal.insert(1, \"Key\", Date, True)\n",
        "\n",
        "    #Adds the time to the new key\n",
        "    Key_Weather=Legal_illegal['Key'].map(str) + ' ' + Time\n",
        "    Legal_illegal=Legal_illegal.drop(['Key'], axis=1)\n",
        "    Legal_illegal.insert(1, \"Key\", Key_Weather, True)\n",
        "\n",
        "    #Merge with the weather data\n",
        "    Legal_illegal=pd.merge(Legal_illegal, Final_Weather_Data, on='Key')\n",
        "\n",
        "    Legal_illegal=Legal_illegal.drop(['Key'], axis=1)\n",
        "    return Legal_illegal"
      ],
      "metadata": {
        "id": "3p_gXaTlTwBu"
      },
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The function below merges the file from the field distances from the 19 points of interest and deletes the slot id because we don't use it in training\n",
        "\n"
      ],
      "metadata": {
        "id": "s2tkNJq9T_uf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Get_Slot_Distances(Legal_illegal):\n",
        "    Legal_illegal['Slot_id'] = Legal_illegal['Slot_id'].astype(float)\n",
        "    Legal_illegal['Slot_id'] = Legal_illegal['Slot_id'].astype(int)\n",
        "    Legal_illegal=pd.merge(Legal_illegal, Distance_Data, on='Slot_id')\n",
        "    Legal_illegal=Legal_illegal.drop(['Slot_id'], axis=1)\n",
        "    return Legal_illegal\n"
      ],
      "metadata": {
        "id": "3Vt3tjmYUFN7"
      },
      "execution_count": 176,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The function below essentially combines the three functions above and these constitute the smoothing process. Where having as input the data-set I created in the previous notebook I get the smoothed dataset as output\n",
        "\n"
      ],
      "metadata": {
        "id": "t0xAVgxAUKdH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Apply_Smoothing(Legal_illegal):\n",
        "    Legal_illegal=Smouth(Legal_illegal)\n",
        "    Legal_illegal=Get_Weather(Legal_illegal)\n",
        "    Legal_illegal=Get_Slot_Distances(Legal_illegal)\n",
        "    return Legal_illegal\n"
      ],
      "metadata": {
        "id": "c_bHhxrzUK4A"
      },
      "execution_count": 177,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the files I use as train/test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "1pZ7TTSdUPD-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "test_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Test.csv',sep=',',index_col=0)\n"
      ],
      "metadata": {
        "id": "P3rCBWK0URvn"
      },
      "execution_count": 178,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The function below applies an exponential decay technique to the learning rate after epoch 20\n",
        "\n"
      ],
      "metadata": {
        "id": "L3BLnjZCUchb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def scheduler(epoch, lr):\n",
        "    if epoch < 20:\n",
        "        return lr\n",
        "    else:\n",
        "        return lr * tf.math.exp(-0.25)\n",
        "\n",
        "callback = tf.keras.callbacks.LearningRateScheduler(scheduler)\n"
      ],
      "metadata": {
        "id": "dxNj4al0Uefk"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I do the same process as I did before, just in each iteration I apply smoothing to both the validation and the training set\n",
        "\n"
      ],
      "metadata": {
        "id": "G9EJeR-yUguz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "TrainDF=train_data\n",
        "k = 4\n",
        "num_val_samples = len(train_data) // k\n",
        "num_epochs = 60\n",
        "all_mae_histories = []\n",
        "all_loss_histories = []\n",
        "all_Tmae_histories = []\n",
        "all_Tloss_histories = []\n",
        "\n",
        "for i in tqdm(range(0,k)):\n",
        "        print('processing fold #', i)\n",
        "        TrainDF=shuffle(TrainDF)\n",
        "        Train,Val = train_test_split(TrainDF,test_size=0.2,random_state=42)\n",
        "\n",
        "\n",
        "        Val=Apply_Smoothing(Val) #smoothing\n",
        "        Train=Apply_Smoothing(Train) #smoothing\n",
        "\n",
        "        Final_Train_targets=Train['Real_Rate']\n",
        "        Final_Train_data=Train.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "        Final_val_targets=Val['Real_Rate']\n",
        "        Final_val_data=Val.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "\n",
        "        Final_Train_data,Final_val_data=Scaller(Final_Train_data,Final_val_data)\n",
        "\n",
        "        Final_Train_targets = Normalization(Final_Train_targets)\n",
        "        Final_val_targets = Normalization(Final_val_targets)\n",
        "\n",
        "        Target=Final_Train_targets\n",
        "        Target.append(Final_val_targets)\n",
        "        Bias_Initial_Out=Target.mean()\n",
        "        Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "\n",
        "        # Build the Keras model (already compiled)\n",
        "        model = Residual_NN(gnn=Final_Train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "        # Train the model (in silent mode, verbose=0)\n",
        "        history = model.fit(Final_Train_data, Final_Train_targets,\n",
        "                            validation_data=(Final_val_data, Final_val_targets),\n",
        "                            epochs=num_epochs,callbacks=callback,batch_size=16, verbose=1)\n",
        "        mae_history = history.history['val_MAE']\n",
        "        loss_history = history.history['val_loss']\n",
        "        Tmae_history = history.history['MAE']\n",
        "        Tloss_history = history.history['loss']\n",
        "        all_mae_histories.append(mae_history)\n",
        "        all_loss_histories.append(loss_history)\n",
        "        all_Tmae_histories.append(Tmae_history)\n",
        "        all_Tloss_histories.append(Tloss_history)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FptJFuWaUlFY",
        "outputId": "50e6fa9b-c3d3-4f08-9c1b-5d20c2e8ca72"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  0%|          | 0/4 [00:00<?, ?it/s]<ipython-input-181-42df49900e67>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "9/9 [==============================] - 5s 121ms/step - loss: 0.0619 - MAE: 0.2040 - MAPE: 48.2970 - val_loss: 0.0456 - val_MAE: 0.1792 - val_MAPE: 38.5825 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 24ms/step - loss: 0.0302 - MAE: 0.1390 - MAPE: 32.5582 - val_loss: 0.0328 - val_MAE: 0.1578 - val_MAPE: 36.5519 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 31ms/step - loss: 0.0223 - MAE: 0.1207 - MAPE: 28.9371 - val_loss: 0.0450 - val_MAE: 0.1481 - val_MAPE: 27.0275 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0168 - MAE: 0.0986 - MAPE: 23.6395 - val_loss: 0.0265 - val_MAE: 0.1419 - val_MAPE: 32.0861 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 30ms/step - loss: 0.0122 - MAE: 0.0922 - MAPE: 20.8572 - val_loss: 0.0282 - val_MAE: 0.1333 - val_MAPE: 28.7736 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 29ms/step - loss: 0.0096 - MAE: 0.0782 - MAPE: 18.9350 - val_loss: 0.0198 - val_MAE: 0.1206 - val_MAPE: 26.4011 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 28ms/step - loss: 0.0081 - MAE: 0.0723 - MAPE: 16.0677 - val_loss: 0.0303 - val_MAE: 0.1470 - val_MAPE: 31.5074 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 25ms/step - loss: 0.0067 - MAE: 0.0655 - MAPE: 15.0800 - val_loss: 0.0210 - val_MAE: 0.1225 - val_MAPE: 27.0067 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 30ms/step - loss: 0.0063 - MAE: 0.0611 - MAPE: 14.7512 - val_loss: 0.0230 - val_MAE: 0.1261 - val_MAPE: 27.8177 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 23ms/step - loss: 0.0056 - MAE: 0.0577 - MAPE: 12.1109 - val_loss: 0.0260 - val_MAE: 0.1344 - val_MAPE: 30.3083 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 20ms/step - loss: 0.0051 - MAE: 0.0544 - MAPE: 12.7055 - val_loss: 0.0246 - val_MAE: 0.1273 - val_MAPE: 27.3299 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0054 - MAE: 0.0544 - MAPE: 12.3714 - val_loss: 0.0269 - val_MAE: 0.1333 - val_MAPE: 31.2524 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0046 - MAE: 0.0519 - MAPE: 11.4822 - val_loss: 0.0262 - val_MAE: 0.1312 - val_MAPE: 29.3403 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0039 - MAE: 0.0464 - MAPE: 10.8203 - val_loss: 0.0249 - val_MAE: 0.1348 - val_MAPE: 30.1249 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0031 - MAE: 0.0422 - MAPE: 9.6443 - val_loss: 0.0289 - val_MAE: 0.1371 - val_MAPE: 31.5531 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0032 - MAE: 0.0423 - MAPE: 9.6042 - val_loss: 0.0243 - val_MAE: 0.1278 - val_MAPE: 28.6810 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0027 - MAE: 0.0395 - MAPE: 8.5180 - val_loss: 0.0274 - val_MAE: 0.1345 - val_MAPE: 31.5788 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0026 - MAE: 0.0379 - MAPE: 8.5828 - val_loss: 0.0298 - val_MAE: 0.1410 - val_MAPE: 31.6102 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0023 - MAE: 0.0364 - MAPE: 8.2304 - val_loss: 0.0273 - val_MAE: 0.1334 - val_MAPE: 30.4287 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0023 - MAE: 0.0347 - MAPE: 7.4134 - val_loss: 0.0297 - val_MAE: 0.1368 - val_MAPE: 32.3761 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0020 - MAE: 0.0336 - MAPE: 7.6271 - val_loss: 0.0285 - val_MAE: 0.1394 - val_MAPE: 31.7511 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0017 - MAE: 0.0315 - MAPE: 6.7449 - val_loss: 0.0299 - val_MAE: 0.1401 - val_MAPE: 32.5671 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0016 - MAE: 0.0296 - MAPE: 6.8150 - val_loss: 0.0298 - val_MAE: 0.1388 - val_MAPE: 32.1046 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0015 - MAE: 0.0277 - MAPE: 6.2995 - val_loss: 0.0293 - val_MAE: 0.1393 - val_MAPE: 32.1441 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0014 - MAE: 0.0266 - MAPE: 5.9118 - val_loss: 0.0294 - val_MAE: 0.1390 - val_MAPE: 32.1629 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0014 - MAE: 0.0266 - MAPE: 5.9015 - val_loss: 0.0299 - val_MAE: 0.1405 - val_MAPE: 32.5377 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0259 - MAPE: 5.8287 - val_loss: 0.0299 - val_MAE: 0.1406 - val_MAPE: 32.4652 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0256 - MAPE: 5.6999 - val_loss: 0.0298 - val_MAE: 0.1403 - val_MAPE: 32.4074 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0253 - MAPE: 5.6507 - val_loss: 0.0297 - val_MAE: 0.1399 - val_MAPE: 32.3391 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0254 - MAPE: 5.6854 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4914 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6230 - val_loss: 0.0299 - val_MAE: 0.1402 - val_MAPE: 32.4254 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0250 - MAPE: 5.6058 - val_loss: 0.0299 - val_MAE: 0.1405 - val_MAPE: 32.5142 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0248 - MAPE: 5.5398 - val_loss: 0.0298 - val_MAE: 0.1402 - val_MAPE: 32.4398 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0013 - MAE: 0.0247 - MAPE: 5.5240 - val_loss: 0.0298 - val_MAE: 0.1402 - val_MAPE: 32.4435 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0247 - MAPE: 5.5257 - val_loss: 0.0299 - val_MAE: 0.1403 - val_MAPE: 32.4727 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0247 - MAPE: 5.5212 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4803 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0247 - MAPE: 5.5199 - val_loss: 0.0299 - val_MAE: 0.1403 - val_MAPE: 32.4630 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0247 - MAPE: 5.5128 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4855 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0012 - MAE: 0.0247 - MAPE: 5.5137 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4822 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.5095 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4998 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.5052 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4898 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.5033 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4910 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.5011 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4918 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.5004 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4928 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.5002 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4961 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4996 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4960 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4985 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4936 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4977 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4955 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4974 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4952 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4969 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4952 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4966 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4953 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4965 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4953 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4965 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4954 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4963 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4952 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4963 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4954 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4962 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4954 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4962 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4954 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4961 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4954 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4961 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4954 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0012 - MAE: 0.0246 - MAPE: 5.4961 - val_loss: 0.0299 - val_MAE: 0.1404 - val_MAPE: 32.4955 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 25%|██▌       | 1/4 [00:13<00:39, 13.13s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-181-42df49900e67>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "9/9 [==============================] - 2s 38ms/step - loss: 0.0553 - MAE: 0.1870 - MAPE: 45.1278 - val_loss: 0.0205 - val_MAE: 0.1092 - val_MAPE: 22.2651 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0194 - MAE: 0.1136 - MAPE: 26.1618 - val_loss: 0.0195 - val_MAE: 0.1081 - val_MAPE: 23.2707 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0124 - MAE: 0.0865 - MAPE: 22.1243 - val_loss: 0.0336 - val_MAE: 0.1442 - val_MAPE: 27.6583 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0110 - MAE: 0.0851 - MAPE: 20.7661 - val_loss: 0.0243 - val_MAE: 0.1176 - val_MAPE: 26.0143 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0080 - MAE: 0.0708 - MAPE: 15.8273 - val_loss: 0.0296 - val_MAE: 0.1306 - val_MAPE: 27.3591 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0055 - MAE: 0.0586 - MAPE: 14.4433 - val_loss: 0.0321 - val_MAE: 0.1439 - val_MAPE: 28.9751 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0039 - MAE: 0.0491 - MAPE: 11.2041 - val_loss: 0.0312 - val_MAE: 0.1370 - val_MAPE: 29.0365 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0040 - MAE: 0.0490 - MAPE: 11.6496 - val_loss: 0.0400 - val_MAE: 0.1618 - val_MAPE: 31.6586 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0036 - MAE: 0.0449 - MAPE: 9.9197 - val_loss: 0.0344 - val_MAE: 0.1451 - val_MAPE: 30.9648 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0030 - MAE: 0.0406 - MAPE: 9.1714 - val_loss: 0.0343 - val_MAE: 0.1495 - val_MAPE: 30.2698 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0025 - MAE: 0.0374 - MAPE: 8.8359 - val_loss: 0.0380 - val_MAE: 0.1551 - val_MAPE: 31.6363 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0025 - MAE: 0.0378 - MAPE: 8.6012 - val_loss: 0.0343 - val_MAE: 0.1462 - val_MAPE: 30.7350 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0021 - MAE: 0.0348 - MAPE: 7.7318 - val_loss: 0.0359 - val_MAE: 0.1503 - val_MAPE: 31.4874 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0018 - MAE: 0.0314 - MAPE: 7.4516 - val_loss: 0.0359 - val_MAE: 0.1517 - val_MAPE: 31.2735 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0016 - MAE: 0.0289 - MAPE: 6.7693 - val_loss: 0.0340 - val_MAE: 0.1459 - val_MAPE: 30.2801 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0014 - MAE: 0.0268 - MAPE: 6.2172 - val_loss: 0.0365 - val_MAE: 0.1525 - val_MAPE: 31.5676 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0267 - MAPE: 6.2833 - val_loss: 0.0316 - val_MAE: 0.1387 - val_MAPE: 28.9087 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0014 - MAE: 0.0262 - MAPE: 5.9990 - val_loss: 0.0363 - val_MAE: 0.1531 - val_MAPE: 31.3943 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0260 - MAPE: 5.8980 - val_loss: 0.0340 - val_MAE: 0.1441 - val_MAPE: 30.3467 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0257 - MAPE: 5.7922 - val_loss: 0.0365 - val_MAE: 0.1523 - val_MAPE: 31.4634 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0011 - MAE: 0.0239 - MAPE: 5.5832 - val_loss: 0.0345 - val_MAE: 0.1451 - val_MAPE: 30.4691 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 9.4133e-04 - MAE: 0.0222 - MAPE: 5.1908 - val_loss: 0.0346 - val_MAE: 0.1472 - val_MAPE: 30.4861 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 8.4873e-04 - MAE: 0.0197 - MAPE: 4.4788 - val_loss: 0.0350 - val_MAE: 0.1473 - val_MAPE: 30.6117 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6973e-04 - MAE: 0.0185 - MAPE: 4.3675 - val_loss: 0.0346 - val_MAE: 0.1460 - val_MAPE: 30.5341 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2569e-04 - MAE: 0.0183 - MAPE: 4.2214 - val_loss: 0.0352 - val_MAE: 0.1485 - val_MAPE: 30.8916 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.1735e-04 - MAE: 0.0179 - MAPE: 4.1376 - val_loss: 0.0349 - val_MAE: 0.1477 - val_MAPE: 30.7161 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.7498e-04 - MAE: 0.0170 - MAPE: 3.9625 - val_loss: 0.0346 - val_MAE: 0.1462 - val_MAPE: 30.6016 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.6402e-04 - MAE: 0.0170 - MAPE: 4.0449 - val_loss: 0.0347 - val_MAE: 0.1466 - val_MAPE: 30.6236 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.5540e-04 - MAE: 0.0167 - MAPE: 3.9400 - val_loss: 0.0347 - val_MAE: 0.1472 - val_MAPE: 30.6728 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 6.4672e-04 - MAE: 0.0166 - MAPE: 3.8955 - val_loss: 0.0349 - val_MAE: 0.1475 - val_MAPE: 30.7423 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.4146e-04 - MAE: 0.0165 - MAPE: 3.8650 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6546 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.3628e-04 - MAE: 0.0164 - MAPE: 3.8509 - val_loss: 0.0347 - val_MAE: 0.1467 - val_MAPE: 30.6373 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.3276e-04 - MAE: 0.0163 - MAPE: 3.8380 - val_loss: 0.0347 - val_MAE: 0.1467 - val_MAPE: 30.6113 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.2847e-04 - MAE: 0.0163 - MAPE: 3.8238 - val_loss: 0.0347 - val_MAE: 0.1468 - val_MAPE: 30.6378 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 6.2754e-04 - MAE: 0.0163 - MAPE: 3.8274 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6465 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.2618e-04 - MAE: 0.0162 - MAPE: 3.8205 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6631 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.2464e-04 - MAE: 0.0162 - MAPE: 3.8185 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6627 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.2342e-04 - MAE: 0.0162 - MAPE: 3.8139 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6570 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.2283e-04 - MAE: 0.0162 - MAPE: 3.8132 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6646 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.2199e-04 - MAE: 0.0162 - MAPE: 3.8085 - val_loss: 0.0347 - val_MAE: 0.1468 - val_MAPE: 30.6539 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.2129e-04 - MAE: 0.0161 - MAPE: 3.8051 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6580 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.2111e-04 - MAE: 0.0161 - MAPE: 3.8065 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6611 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.2083e-04 - MAE: 0.0161 - MAPE: 3.8057 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6575 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 6.2053e-04 - MAE: 0.0161 - MAPE: 3.8031 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6597 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.2030e-04 - MAE: 0.0161 - MAPE: 3.8018 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6584 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.2013e-04 - MAE: 0.0161 - MAPE: 3.8012 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6589 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.1999e-04 - MAE: 0.0161 - MAPE: 3.8012 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6587 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.1988e-04 - MAE: 0.0161 - MAPE: 3.8011 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6591 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.1980e-04 - MAE: 0.0161 - MAPE: 3.8008 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6590 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.1974e-04 - MAE: 0.0161 - MAPE: 3.8004 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6589 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 6.1973e-04 - MAE: 0.0161 - MAPE: 3.8003 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6587 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 6.1971e-04 - MAE: 0.0161 - MAPE: 3.8002 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6587 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.1967e-04 - MAE: 0.0161 - MAPE: 3.8000 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6586 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 6.1965e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6587 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.1964e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6588 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.1963e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6588 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.1963e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6588 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 22ms/step - loss: 6.1962e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6588 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 6.1962e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6588 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 6.1962e-04 - MAE: 0.0161 - MAPE: 3.7999 - val_loss: 0.0347 - val_MAE: 0.1469 - val_MAPE: 30.6588 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 50%|█████     | 2/4 [00:22<00:21, 10.96s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-181-42df49900e67>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "9/9 [==============================] - 2s 55ms/step - loss: 0.0562 - MAE: 0.1936 - MAPE: 41.7197 - val_loss: 0.0579 - val_MAE: 0.1924 - val_MAPE: 44.1890 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0349 - MAE: 0.1517 - MAPE: 38.9258 - val_loss: 0.0401 - val_MAE: 0.1586 - val_MAPE: 33.3545 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0174 - MAE: 0.1040 - MAPE: 25.9932 - val_loss: 0.0353 - val_MAE: 0.1438 - val_MAPE: 31.6602 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0134 - MAE: 0.0917 - MAPE: 21.4169 - val_loss: 0.0422 - val_MAE: 0.1523 - val_MAPE: 33.8172 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0109 - MAE: 0.0789 - MAPE: 18.0733 - val_loss: 0.0310 - val_MAE: 0.1313 - val_MAPE: 28.3085 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 27ms/step - loss: 0.0088 - MAE: 0.0726 - MAPE: 16.6249 - val_loss: 0.0360 - val_MAE: 0.1496 - val_MAPE: 33.1855 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 52ms/step - loss: 0.0072 - MAE: 0.0659 - MAPE: 15.8969 - val_loss: 0.0263 - val_MAE: 0.1283 - val_MAPE: 27.7263 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 24ms/step - loss: 0.0057 - MAE: 0.0571 - MAPE: 12.5298 - val_loss: 0.0302 - val_MAE: 0.1383 - val_MAPE: 29.6332 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0050 - MAE: 0.0536 - MAPE: 12.0808 - val_loss: 0.0341 - val_MAE: 0.1450 - val_MAPE: 31.5911 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0045 - MAE: 0.0520 - MAPE: 11.4802 - val_loss: 0.0285 - val_MAE: 0.1351 - val_MAPE: 28.5748 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0038 - MAE: 0.0458 - MAPE: 10.3281 - val_loss: 0.0349 - val_MAE: 0.1488 - val_MAPE: 32.7467 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0034 - MAE: 0.0446 - MAPE: 10.3120 - val_loss: 0.0303 - val_MAE: 0.1428 - val_MAPE: 30.4559 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0030 - MAE: 0.0405 - MAPE: 8.8534 - val_loss: 0.0328 - val_MAE: 0.1426 - val_MAPE: 31.1277 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0028 - MAE: 0.0399 - MAPE: 9.1244 - val_loss: 0.0317 - val_MAE: 0.1461 - val_MAPE: 31.3643 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0025 - MAE: 0.0364 - MAPE: 8.1301 - val_loss: 0.0307 - val_MAE: 0.1401 - val_MAPE: 30.2222 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0021 - MAE: 0.0336 - MAPE: 7.2630 - val_loss: 0.0329 - val_MAE: 0.1471 - val_MAPE: 31.9702 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0018 - MAE: 0.0317 - MAPE: 6.9125 - val_loss: 0.0310 - val_MAE: 0.1433 - val_MAPE: 30.8876 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0017 - MAE: 0.0300 - MAPE: 6.4660 - val_loss: 0.0321 - val_MAE: 0.1461 - val_MAPE: 31.4997 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0016 - MAE: 0.0285 - MAPE: 6.2792 - val_loss: 0.0346 - val_MAE: 0.1530 - val_MAPE: 33.2017 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0014 - MAE: 0.0276 - MAPE: 6.3056 - val_loss: 0.0314 - val_MAE: 0.1451 - val_MAPE: 31.0085 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0016 - MAE: 0.0294 - MAPE: 6.4177 - val_loss: 0.0338 - val_MAE: 0.1489 - val_MAPE: 32.3182 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0245 - MAPE: 5.1557 - val_loss: 0.0325 - val_MAE: 0.1481 - val_MAPE: 31.9025 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0011 - MAE: 0.0236 - MAPE: 5.0590 - val_loss: 0.0334 - val_MAE: 0.1502 - val_MAPE: 32.4228 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0011 - MAE: 0.0224 - MAPE: 4.8703 - val_loss: 0.0324 - val_MAE: 0.1480 - val_MAPE: 31.8399 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 9.5130e-04 - MAE: 0.0210 - MAPE: 4.6504 - val_loss: 0.0325 - val_MAE: 0.1481 - val_MAPE: 31.9304 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.9258e-04 - MAE: 0.0199 - MAPE: 4.3173 - val_loss: 0.0329 - val_MAE: 0.1495 - val_MAPE: 32.1985 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.4105e-04 - MAE: 0.0197 - MAPE: 4.2795 - val_loss: 0.0329 - val_MAE: 0.1496 - val_MAPE: 32.2078 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.7085e-04 - MAE: 0.0200 - MAPE: 4.4950 - val_loss: 0.0328 - val_MAE: 0.1492 - val_MAPE: 32.1291 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.2903e-04 - MAE: 0.0193 - MAPE: 4.2568 - val_loss: 0.0327 - val_MAE: 0.1494 - val_MAPE: 32.1312 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.2578e-04 - MAE: 0.0194 - MAPE: 4.1508 - val_loss: 0.0327 - val_MAE: 0.1496 - val_MAPE: 32.1943 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.0001e-04 - MAE: 0.0189 - MAPE: 4.0813 - val_loss: 0.0329 - val_MAE: 0.1499 - val_MAPE: 32.2897 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 7.9104e-04 - MAE: 0.0189 - MAPE: 4.1071 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.3076 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.8393e-04 - MAE: 0.0187 - MAPE: 4.0721 - val_loss: 0.0329 - val_MAE: 0.1498 - val_MAPE: 32.2715 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.8169e-04 - MAE: 0.0186 - MAPE: 4.0649 - val_loss: 0.0329 - val_MAE: 0.1499 - val_MAPE: 32.2745 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.7710e-04 - MAE: 0.0185 - MAPE: 4.0464 - val_loss: 0.0329 - val_MAE: 0.1499 - val_MAPE: 32.2739 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.7505e-04 - MAE: 0.0185 - MAPE: 4.0269 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2838 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.7448e-04 - MAE: 0.0185 - MAPE: 4.0261 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2835 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.7314e-04 - MAE: 0.0185 - MAPE: 4.0181 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2784 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.6998e-04 - MAE: 0.0184 - MAPE: 4.0096 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2923 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6927e-04 - MAE: 0.0184 - MAPE: 4.0113 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2893 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6795e-04 - MAE: 0.0184 - MAPE: 4.0067 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2918 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.6791e-04 - MAE: 0.0184 - MAPE: 4.0053 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2917 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.6706e-04 - MAE: 0.0184 - MAPE: 4.0025 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2923 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.6672e-04 - MAE: 0.0184 - MAPE: 4.0024 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2944 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6631e-04 - MAE: 0.0184 - MAPE: 4.0007 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2942 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.6609e-04 - MAE: 0.0184 - MAPE: 3.9994 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2943 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.6606e-04 - MAE: 0.0184 - MAPE: 3.9992 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2951 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 7.6580e-04 - MAE: 0.0184 - MAPE: 3.9987 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2956 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.6573e-04 - MAE: 0.0184 - MAPE: 3.9989 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2965 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6569e-04 - MAE: 0.0184 - MAPE: 3.9988 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2961 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 7.6557e-04 - MAE: 0.0184 - MAPE: 3.9984 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2963 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6554e-04 - MAE: 0.0184 - MAPE: 3.9983 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2964 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.6551e-04 - MAE: 0.0184 - MAPE: 3.9983 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2965 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.6548e-04 - MAE: 0.0184 - MAPE: 3.9982 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2966 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.6546e-04 - MAE: 0.0184 - MAPE: 3.9981 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2966 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.6545e-04 - MAE: 0.0184 - MAPE: 3.9981 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2966 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.6544e-04 - MAE: 0.0184 - MAPE: 3.9980 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2966 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.6543e-04 - MAE: 0.0184 - MAPE: 3.9980 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2966 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.6542e-04 - MAE: 0.0184 - MAPE: 3.9980 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2967 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 7.6543e-04 - MAE: 0.0184 - MAPE: 3.9980 - val_loss: 0.0329 - val_MAE: 0.1500 - val_MAPE: 32.2967 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 75%|███████▌  | 3/4 [00:32<00:10, 10.60s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-181-42df49900e67>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "9/9 [==============================] - 2s 37ms/step - loss: 0.0893 - MAE: 0.2340 - MAPE: 54.6262 - val_loss: 0.0535 - val_MAE: 0.1723 - val_MAPE: 29.0508 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0270 - MAE: 0.1356 - MAPE: 34.1630 - val_loss: 0.0398 - val_MAE: 0.1633 - val_MAPE: 25.4753 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0177 - MAE: 0.1069 - MAPE: 24.4920 - val_loss: 0.0291 - val_MAE: 0.1303 - val_MAPE: 21.9875 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0146 - MAE: 0.0946 - MAPE: 20.9754 - val_loss: 0.0452 - val_MAE: 0.1595 - val_MAPE: 25.2188 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0103 - MAE: 0.0792 - MAPE: 19.4649 - val_loss: 0.0386 - val_MAE: 0.1435 - val_MAPE: 22.9338 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0078 - MAE: 0.0690 - MAPE: 15.7840 - val_loss: 0.0385 - val_MAE: 0.1474 - val_MAPE: 23.3374 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0069 - MAE: 0.0648 - MAPE: 15.6892 - val_loss: 0.0383 - val_MAE: 0.1481 - val_MAPE: 23.0362 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0066 - MAE: 0.0629 - MAPE: 13.5532 - val_loss: 0.0304 - val_MAE: 0.1352 - val_MAPE: 21.8555 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0052 - MAE: 0.0561 - MAPE: 12.9790 - val_loss: 0.0359 - val_MAE: 0.1470 - val_MAPE: 23.0397 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0045 - MAE: 0.0482 - MAPE: 10.6586 - val_loss: 0.0383 - val_MAE: 0.1507 - val_MAPE: 23.8717 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0040 - MAE: 0.0471 - MAPE: 10.8255 - val_loss: 0.0317 - val_MAE: 0.1379 - val_MAPE: 21.6550 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0034 - MAE: 0.0433 - MAPE: 9.5570 - val_loss: 0.0339 - val_MAE: 0.1454 - val_MAPE: 23.0666 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0031 - MAE: 0.0408 - MAPE: 8.6110 - val_loss: 0.0330 - val_MAE: 0.1443 - val_MAPE: 23.2171 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0028 - MAE: 0.0397 - MAPE: 8.8825 - val_loss: 0.0353 - val_MAE: 0.1475 - val_MAPE: 23.3030 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0025 - MAE: 0.0378 - MAPE: 8.3342 - val_loss: 0.0329 - val_MAE: 0.1430 - val_MAPE: 22.8677 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0024 - MAE: 0.0374 - MAPE: 8.3207 - val_loss: 0.0374 - val_MAE: 0.1551 - val_MAPE: 24.5637 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0025 - MAE: 0.0389 - MAPE: 8.5917 - val_loss: 0.0336 - val_MAE: 0.1454 - val_MAPE: 23.1201 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0021 - MAE: 0.0339 - MAPE: 7.1077 - val_loss: 0.0331 - val_MAE: 0.1426 - val_MAPE: 23.0208 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0023 - MAE: 0.0370 - MAPE: 8.8079 - val_loss: 0.0361 - val_MAE: 0.1511 - val_MAPE: 23.6121 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0020 - MAE: 0.0331 - MAPE: 7.0570 - val_loss: 0.0337 - val_MAE: 0.1458 - val_MAPE: 23.5557 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0016 - MAE: 0.0306 - MAPE: 6.6253 - val_loss: 0.0350 - val_MAE: 0.1483 - val_MAPE: 23.5328 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0015 - MAE: 0.0279 - MAPE: 6.1690 - val_loss: 0.0334 - val_MAE: 0.1432 - val_MAPE: 23.1481 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0014 - MAE: 0.0280 - MAPE: 5.9486 - val_loss: 0.0362 - val_MAE: 0.1519 - val_MAPE: 24.2614 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0256 - MAPE: 5.3785 - val_loss: 0.0345 - val_MAE: 0.1474 - val_MAPE: 23.5714 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0012 - MAE: 0.0247 - MAPE: 5.4795 - val_loss: 0.0337 - val_MAE: 0.1456 - val_MAPE: 23.3311 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0012 - MAE: 0.0239 - MAPE: 5.2467 - val_loss: 0.0345 - val_MAE: 0.1474 - val_MAPE: 23.5941 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0011 - MAE: 0.0234 - MAPE: 5.0742 - val_loss: 0.0345 - val_MAE: 0.1476 - val_MAPE: 23.6127 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0011 - MAE: 0.0231 - MAPE: 5.0253 - val_loss: 0.0346 - val_MAE: 0.1476 - val_MAPE: 23.6499 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0011 - MAE: 0.0229 - MAPE: 4.9749 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6784 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0011 - MAE: 0.0227 - MAPE: 4.9294 - val_loss: 0.0348 - val_MAE: 0.1483 - val_MAPE: 23.7145 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0011 - MAE: 0.0228 - MAPE: 4.9420 - val_loss: 0.0346 - val_MAE: 0.1477 - val_MAPE: 23.6565 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0011 - MAE: 0.0226 - MAPE: 4.9457 - val_loss: 0.0346 - val_MAE: 0.1477 - val_MAPE: 23.6663 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0010 - MAE: 0.0225 - MAPE: 4.9100 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6864 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0010 - MAE: 0.0224 - MAPE: 4.8792 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6797 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0010 - MAE: 0.0223 - MAPE: 4.8630 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6849 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0010 - MAE: 0.0223 - MAPE: 4.8561 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6801 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0010 - MAE: 0.0223 - MAPE: 4.8494 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6738 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0223 - MAPE: 4.8504 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6743 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0010 - MAE: 0.0223 - MAPE: 4.8485 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6728 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0223 - MAPE: 4.8468 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6786 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8406 - val_loss: 0.0347 - val_MAE: 0.1480 - val_MAPE: 23.6780 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8420 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6763 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 19ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8410 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6766 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8406 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6767 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8401 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6775 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8398 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6767 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8391 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6765 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8387 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6766 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8381 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6773 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8379 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6772 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8377 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6769 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8376 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6769 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8375 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6770 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8374 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8373 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8373 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8372 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8372 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8372 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0010 - MAE: 0.0222 - MAPE: 4.8372 - val_loss: 0.0347 - val_MAE: 0.1479 - val_MAPE: 23.6771 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4/4 [00:42<00:00, 10.50s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here I find the averages of the results per season from the four iterations\n",
        "\n"
      ],
      "metadata": {
        "id": "cZsCg0HnVD-a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "average_mae_history = [\n",
        "    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]\n",
        "average_loss_history = [\n",
        "    np.mean([x[i] for x in all_loss_histories]) for i in range(num_epochs)]\n",
        "average_Tmae_history = [\n",
        "    np.mean([x[i] for x in all_Tmae_histories]) for i in range(num_epochs)]\n",
        "average_Tloss_history = [\n",
        "    np.mean([x[i] for x in all_Tloss_histories]) for i in range(num_epochs)]\n"
      ],
      "metadata": {
        "id": "zjNs_F8yVEUd"
      },
      "execution_count": 182,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I save them to external text files so I can have them and print out whatever chart I need later\n",
        "\n"
      ],
      "metadata": {
        "id": "HCL1YVvCVI15"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/drive/MyDrive/Thesis/Results/Full Smoothing/ValMae.txt', \"w\") as file:\n",
        "    file.write(str(average_mae_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Full Smoothing/ValLoss.txt', \"w\") as file:\n",
        "    file.write(str(average_loss_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Full Smoothing/TrainMae.txt', \"w\") as file:\n",
        "    file.write(str(average_Tmae_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Full Smoothing/TrainLoss.txt', \"w\") as file:\n",
        "    file.write(str(average_Tloss_history))\n"
      ],
      "metadata": {
        "id": "dRLhBMYZVJXg"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the list containing the Validation mae to find the appropriate training season\n",
        "\n"
      ],
      "metadata": {
        "id": "RU2pMG3dVa_d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/drive/MyDrive/Thesis/Results/Full Smoothing/ValMae.txt', \"r\") as file:\n",
        "    average_mae_history = eval(file.readline())\n"
      ],
      "metadata": {
        "id": "juDjTltBVbd6"
      },
      "execution_count": 184,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am printing the result\n",
        "\n"
      ],
      "metadata": {
        "id": "JxzIE6wvVjE5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def smooth_curve(points, factor=0.6):\n",
        "  smoothed_points = []\n",
        "  for point in points:\n",
        "    if smoothed_points:\n",
        "      previous = smoothed_points[-1]\n",
        "      smoothed_points.append(previous * factor + point * (1 - factor))\n",
        "    else:\n",
        "      smoothed_points.append(point)\n",
        "  return smoothed_points\n",
        "\n",
        "smooth_mae_history = smooth_curve(average_mae_history[0:])\n",
        "\n",
        "plt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history,label='Smoothed Train set on Validation set')\n",
        "plt.title('Full Smoothing 4-Fold Cross Validation')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Validation Mae')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "SC_9JBQWVjlB",
        "outputId": "5d475049-5fd3-4a4f-c9a9-0820b0653f61"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I find what is the best season. That is, the one with the youngest Mae\n",
        "\n"
      ],
      "metadata": {
        "id": "Z-5sOPFaVonw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "Min_Mae=min(smooth_mae_history)\n",
        "Best_Epoch=smooth_mae_history.index(Min_Mae)\n",
        "Best_Epoch\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lh4K4HRxVpMt",
        "outputId": "cae22856-357f-4990-f36a-49804ecde03a"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now knowing the best training time I train the model and check it with the test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "lMvdNwQcVuR6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "test_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Test.csv',sep=',',index_col=0)\n",
        "TestDF=Apply_Smoothing(test_data) #smoothing\n",
        "TrainDF=Apply_Smoothing(train_data) #smoothing\n",
        "\n",
        "train_targets=TrainDF['Real_Rate']\n",
        "train_data=TrainDF.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "test_targets=TestDF['Real_Rate']\n",
        "test_data=TestDF.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "test_targets = Normalization(test_targets)\n",
        "train_targets = Normalization(train_targets)\n",
        "\n",
        "Target=test_targets\n",
        "Target.append(train_targets)\n",
        "Bias_Initial_Out=Target.mean()\n",
        "Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "train_data,test_data=Scaller(train_data,test_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAFew24sVuzw",
        "outputId": "ca3f0deb-05f8-47bb-c5d9-d68d248f58bb"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-187-ae97792724c4>:16: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(train_targets)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I have been training for 24 epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "mg8x62Y_V6sy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a fresh, compiled model.\n",
        "model = Residual_NN(gnn=train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "# Train it on the entirety of the data.\n",
        "model.fit(train_data,train_targets,callbacks=callback,\n",
        "          epochs=24, batch_size=16, verbose=1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_EuCyDA8V7Qx",
        "outputId": "6d8b54db-5613-45c1-b822-b99835f59c95"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/24\n",
            "12/12 [==============================] - 4s 9ms/step - loss: 0.0513 - MAE: 0.1704 - MAPE: 38.4481 - lr: 0.0010\n",
            "Epoch 2/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0263 - MAE: 0.1297 - MAPE: 31.5331 - lr: 0.0010\n",
            "Epoch 3/24\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0160 - MAE: 0.1013 - MAPE: 22.8609 - lr: 0.0010\n",
            "Epoch 4/24\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0140 - MAE: 0.0950 - MAPE: 21.7870 - lr: 0.0010\n",
            "Epoch 5/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0133 - MAE: 0.0917 - MAPE: 19.6636 - lr: 0.0010\n",
            "Epoch 6/24\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0099 - MAE: 0.0778 - MAPE: 17.5454 - lr: 0.0010\n",
            "Epoch 7/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0088 - MAE: 0.0730 - MAPE: 16.5543 - lr: 0.0010\n",
            "Epoch 8/24\n",
            "12/12 [==============================] - 0s 12ms/step - loss: 0.0075 - MAE: 0.0675 - MAPE: 14.7316 - lr: 0.0010\n",
            "Epoch 9/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0063 - MAE: 0.0611 - MAPE: 13.4069 - lr: 0.0010\n",
            "Epoch 10/24\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0059 - MAE: 0.0576 - MAPE: 12.4100 - lr: 0.0010\n",
            "Epoch 11/24\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0051 - MAE: 0.0557 - MAPE: 12.7683 - lr: 0.0010\n",
            "Epoch 12/24\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0048 - MAE: 0.0536 - MAPE: 12.3316 - lr: 0.0010\n",
            "Epoch 13/24\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0047 - MAE: 0.0535 - MAPE: 11.8171 - lr: 0.0010\n",
            "Epoch 14/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0050 - MAE: 0.0532 - MAPE: 12.8658 - lr: 0.0010\n",
            "Epoch 15/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0047 - MAE: 0.0490 - MAPE: 11.6834 - lr: 0.0010\n",
            "Epoch 16/24\n",
            "12/12 [==============================] - 0s 12ms/step - loss: 0.0056 - MAE: 0.0532 - MAPE: 11.5507 - lr: 0.0010\n",
            "Epoch 17/24\n",
            "12/12 [==============================] - 0s 12ms/step - loss: 0.0052 - MAE: 0.0524 - MAPE: 11.8444 - lr: 0.0010\n",
            "Epoch 18/24\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0046 - MAE: 0.0528 - MAPE: 12.0603 - lr: 0.0010\n",
            "Epoch 19/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0042 - MAE: 0.0469 - MAPE: 10.2279 - lr: 0.0010\n",
            "Epoch 20/24\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0040 - MAE: 0.0475 - MAPE: 10.8642 - lr: 0.0010\n",
            "Epoch 21/24\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0036 - MAE: 0.0467 - MAPE: 9.8707 - lr: 7.7880e-04\n",
            "Epoch 22/24\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0034 - MAE: 0.0461 - MAPE: 11.0657 - lr: 6.0653e-04\n",
            "Epoch 23/24\n",
            "12/12 [==============================] - 0s 13ms/step - loss: 0.0036 - MAE: 0.0446 - MAPE: 9.5339 - lr: 4.7237e-04\n",
            "Epoch 24/24\n",
            "12/12 [==============================] - 0s 12ms/step - loss: 0.0029 - MAE: 0.0387 - MAPE: 8.3288 - lr: 3.6788e-04\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ca9b42cc880>"
            ]
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I check with the smoothed test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "WDCWPUAdWBci"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_mse_score, test_mae_score, test_mape_score = model.evaluate(test_data, test_targets)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DEDFt3OPWCFz",
        "outputId": "e1a3bfb9-2cf2-4213-d1f0-44c9a090acb1"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 1s 12ms/step - loss: 0.0648 - MAE: 0.1993 - MAPE: 32.2893\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Smoothing On Train evaluate on non-smouthed validation set\n",
        "As I mentioned in the paper, I also did experiments with a smoothed train-set but a non-smoothed validation/test-set\n",
        "\n",
        ".\n",
        "\n",
        "The following function takes the data set I created in the previous notebook and converts it into a format so that it can be a validation/test-set to test with the smoothed train set. It does not cause data augmentation or smoothing. It's pretty much the same as the first \"Prepare_Dataset\" function that formatted our data just adds a 'Time_Distance' attribute used in smoothing.\n",
        "\n"
      ],
      "metadata": {
        "id": "B3wiYQ__WGkg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Prepare_Test(Test):\n",
        "    Test['Time_Distance']=0\n",
        "    Test=Test.drop(['Time_Int'], axis=1)\n",
        "    a=Test['Slot_Timeint']\n",
        "    b=Test['Ilegality_Rate']\n",
        "    Test=Test.drop(['Slot_Timeint'], axis=1)\n",
        "    Test=Test.drop(['Ilegality_Rate'], axis=1)\n",
        "    Test.insert(9, \"Real_Time\", a, True)\n",
        "    Test.insert(10, \"Real_Rate\", b, True)\n",
        "\n",
        "    Test=pd.merge(Test, Final_Weather_Data, on='Key')\n",
        "    Test=Test.drop(['Key'], axis=1)\n",
        "\n",
        "    Test=pd.merge(Test, Distance_Data, on='Slot_id')\n",
        "    Test=Test.drop(['Slot_id'], axis=1)\n",
        "    return Test\n"
      ],
      "metadata": {
        "id": "JWcGXNVFWG3u"
      },
      "execution_count": 191,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The function below applies an exponential decay technique to the learning rate after epoch 20\n",
        "\n"
      ],
      "metadata": {
        "id": "Wr7_ZJe-WLKQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def scheduler(epoch, lr):\n",
        "    if epoch < 20:\n",
        "        return lr\n",
        "    else:\n",
        "        return lr * tf.math.exp(-0.25)\n",
        "\n",
        "callback = tf.keras.callbacks.LearningRateScheduler(scheduler)\n"
      ],
      "metadata": {
        "id": "mNADFxCNWLun"
      },
      "execution_count": 192,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I do the same process as I did previously, simply in each iteration I apply smoothing only to the training set\n",
        "\n"
      ],
      "metadata": {
        "id": "q0qRTK4wWOnX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "TrainDF=train_data\n",
        "k = 4\n",
        "num_val_samples = len(train_data) // k\n",
        "num_epochs = 60\n",
        "all_mae_histories = []\n",
        "all_loss_histories = []\n",
        "all_Tmae_histories = []\n",
        "all_Tloss_histories = []\n",
        "\n",
        "for i in tqdm(range(0,k)):\n",
        "        print('processing fold #', i)\n",
        "        TrainDF=shuffle(TrainDF)\n",
        "        Train,Val = train_test_split(TrainDF,test_size=0.2,random_state=42)\n",
        "\n",
        "\n",
        "        Val=Prepare_Test(Val)\n",
        "        Train=Apply_Smoothing(Train)\n",
        "\n",
        "        Final_Train_targets=Train['Real_Rate']\n",
        "        Final_Train_data=Train.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "        Final_val_targets=Val['Real_Rate']\n",
        "        Final_val_data=Val.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "\n",
        "        Final_Train_data,Final_val_data=Scaller(Final_Train_data,Final_val_data)\n",
        "\n",
        "        Final_Train_targets = Normalization(Final_Train_targets)\n",
        "        Final_val_targets = Normalization(Final_val_targets)\n",
        "\n",
        "        Target=Final_Train_targets\n",
        "        Target.append(Final_val_targets)\n",
        "        Bias_Initial_Out=Target.mean()\n",
        "        Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "\n",
        "        # Build the Keras model (already compiled)\n",
        "        model = Residual_NN(gnn=Final_Train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "        # Train the model (in silent mode, verbose=0)\n",
        "        history = model.fit(Final_Train_data, Final_Train_targets,\n",
        "                            validation_data=(Final_val_data, Final_val_targets),\n",
        "                            epochs=num_epochs,callbacks=callback,batch_size=16, verbose=1)\n",
        "        mae_history = history.history['val_MAE']\n",
        "        loss_history = history.history['val_loss']\n",
        "        Tmae_history = history.history['MAE']\n",
        "        Tloss_history = history.history['loss']\n",
        "        all_mae_histories.append(mae_history)\n",
        "        all_loss_histories.append(loss_history)\n",
        "        all_Tmae_histories.append(Tmae_history)\n",
        "        all_Tloss_histories.append(Tloss_history)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3fZPigzWWQPK",
        "outputId": "5835d583-e0ab-4325-e81b-98e8faecf722"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  0%|          | 0/4 [00:00<?, ?it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-194-266662638fbf>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "9/9 [==============================] - 3s 62ms/step - loss: 0.0780 - MAE: 0.2207 - MAPE: 48.8768 - val_loss: 0.0313 - val_MAE: 0.1425 - val_MAPE: 39.1051 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0270 - MAE: 0.1310 - MAPE: 28.7881 - val_loss: 0.0351 - val_MAE: 0.1466 - val_MAPE: 44.0471 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0185 - MAE: 0.1080 - MAPE: 24.1823 - val_loss: 0.0300 - val_MAE: 0.1390 - val_MAPE: 40.6533 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0127 - MAE: 0.0895 - MAPE: 20.5113 - val_loss: 0.0364 - val_MAE: 0.1524 - val_MAPE: 42.2679 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0102 - MAE: 0.0801 - MAPE: 17.3526 - val_loss: 0.0384 - val_MAE: 0.1547 - val_MAPE: 43.1780 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0086 - MAE: 0.0721 - MAPE: 15.9385 - val_loss: 0.0448 - val_MAE: 0.1698 - val_MAPE: 46.9482 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0073 - MAE: 0.0652 - MAPE: 15.3354 - val_loss: 0.0391 - val_MAE: 0.1705 - val_MAPE: 43.5998 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0071 - MAE: 0.0681 - MAPE: 14.6367 - val_loss: 0.0456 - val_MAE: 0.1739 - val_MAPE: 47.4039 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0054 - MAE: 0.0569 - MAPE: 13.3785 - val_loss: 0.0464 - val_MAE: 0.1785 - val_MAPE: 48.7344 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0054 - MAE: 0.0578 - MAPE: 12.4033 - val_loss: 0.0487 - val_MAE: 0.1788 - val_MAPE: 47.8676 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0050 - MAE: 0.0543 - MAPE: 12.0226 - val_loss: 0.0465 - val_MAE: 0.1765 - val_MAPE: 48.7512 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0046 - MAE: 0.0532 - MAPE: 12.1046 - val_loss: 0.0533 - val_MAE: 0.1918 - val_MAPE: 51.3855 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0038 - MAE: 0.0487 - MAPE: 10.9612 - val_loss: 0.0464 - val_MAE: 0.1844 - val_MAPE: 48.4069 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0032 - MAE: 0.0420 - MAPE: 8.8954 - val_loss: 0.0546 - val_MAE: 0.1941 - val_MAPE: 52.4151 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0029 - MAE: 0.0403 - MAPE: 8.8458 - val_loss: 0.0549 - val_MAE: 0.1909 - val_MAPE: 52.8198 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0027 - MAE: 0.0380 - MAPE: 8.3951 - val_loss: 0.0533 - val_MAE: 0.1873 - val_MAPE: 51.6709 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0023 - MAE: 0.0344 - MAPE: 7.4934 - val_loss: 0.0519 - val_MAE: 0.1885 - val_MAPE: 51.2740 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0020 - MAE: 0.0309 - MAPE: 6.8051 - val_loss: 0.0537 - val_MAE: 0.1894 - val_MAPE: 51.9241 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0019 - MAE: 0.0305 - MAPE: 6.6912 - val_loss: 0.0533 - val_MAE: 0.1916 - val_MAPE: 52.2272 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0019 - MAE: 0.0296 - MAPE: 5.9991 - val_loss: 0.0569 - val_MAE: 0.1928 - val_MAPE: 52.8518 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0022 - MAE: 0.0326 - MAPE: 7.1087 - val_loss: 0.0521 - val_MAE: 0.1929 - val_MAPE: 51.6472 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0017 - MAE: 0.0282 - MAPE: 5.9853 - val_loss: 0.0561 - val_MAE: 0.1923 - val_MAPE: 53.1873 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0015 - MAE: 0.0256 - MAPE: 5.5844 - val_loss: 0.0547 - val_MAE: 0.1935 - val_MAPE: 52.7053 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0015 - MAE: 0.0248 - MAPE: 5.2380 - val_loss: 0.0559 - val_MAE: 0.1928 - val_MAPE: 53.0030 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0015 - MAE: 0.0262 - MAPE: 5.7057 - val_loss: 0.0555 - val_MAE: 0.1926 - val_MAPE: 52.8376 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.2850 - val_loss: 0.0542 - val_MAE: 0.1934 - val_MAPE: 52.5677 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0014 - MAE: 0.0241 - MAPE: 5.1070 - val_loss: 0.0553 - val_MAE: 0.1928 - val_MAPE: 52.9485 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0013 - MAE: 0.0234 - MAPE: 5.1013 - val_loss: 0.0556 - val_MAE: 0.1932 - val_MAPE: 53.0569 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0234 - MAPE: 5.0371 - val_loss: 0.0552 - val_MAE: 0.1936 - val_MAPE: 52.9267 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0013 - MAE: 0.0232 - MAPE: 5.0164 - val_loss: 0.0554 - val_MAE: 0.1934 - val_MAPE: 53.0045 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0230 - MAPE: 4.9662 - val_loss: 0.0554 - val_MAE: 0.1937 - val_MAPE: 53.0151 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0230 - MAPE: 4.9286 - val_loss: 0.0553 - val_MAE: 0.1938 - val_MAPE: 52.9985 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0228 - MAPE: 4.9013 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0060 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0013 - MAE: 0.0228 - MAPE: 4.9223 - val_loss: 0.0554 - val_MAE: 0.1937 - val_MAPE: 53.0214 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0228 - MAPE: 4.9130 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0030 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0227 - MAPE: 4.8972 - val_loss: 0.0553 - val_MAE: 0.1938 - val_MAPE: 52.9872 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0013 - MAE: 0.0227 - MAPE: 4.8906 - val_loss: 0.0553 - val_MAE: 0.1938 - val_MAPE: 52.9999 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0227 - MAPE: 4.8895 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0048 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0013 - MAE: 0.0227 - MAPE: 4.8882 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0054 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8848 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0066 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8816 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0066 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8794 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0071 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8780 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0049 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8765 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0064 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8756 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0069 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8752 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0066 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8744 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0063 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8744 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0068 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8743 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0064 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8737 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0064 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8736 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8736 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0065 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8735 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8734 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8733 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8733 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8733 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8732 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8732 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0067 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0013 - MAE: 0.0226 - MAPE: 4.8732 - val_loss: 0.0554 - val_MAE: 0.1938 - val_MAPE: 53.0068 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 25%|██▌       | 1/4 [00:13<00:41, 13.70s/it]<ipython-input-194-266662638fbf>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 1\n",
            "Epoch 1/60\n",
            "9/9 [==============================] - 2s 39ms/step - loss: 0.0936 - MAE: 0.2401 - MAPE: 50.6728 - val_loss: 0.0402 - val_MAE: 0.1684 - val_MAPE: 42.6052 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0291 - MAE: 0.1380 - MAPE: 31.9166 - val_loss: 0.0338 - val_MAE: 0.1580 - val_MAPE: 36.8420 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0203 - MAE: 0.1130 - MAPE: 28.6717 - val_loss: 0.0385 - val_MAE: 0.1566 - val_MAPE: 34.7115 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0143 - MAE: 0.0977 - MAPE: 22.2560 - val_loss: 0.0336 - val_MAE: 0.1505 - val_MAPE: 34.6413 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0127 - MAE: 0.0878 - MAPE: 20.5446 - val_loss: 0.0430 - val_MAE: 0.1634 - val_MAPE: 35.2500 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0102 - MAE: 0.0784 - MAPE: 18.4457 - val_loss: 0.0339 - val_MAE: 0.1516 - val_MAPE: 34.8694 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0085 - MAE: 0.0724 - MAPE: 17.0157 - val_loss: 0.0384 - val_MAE: 0.1518 - val_MAPE: 34.5759 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0072 - MAE: 0.0640 - MAPE: 15.2112 - val_loss: 0.0373 - val_MAE: 0.1447 - val_MAPE: 33.0129 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0065 - MAE: 0.0641 - MAPE: 14.4059 - val_loss: 0.0405 - val_MAE: 0.1559 - val_MAPE: 35.8551 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0057 - MAE: 0.0562 - MAPE: 13.8792 - val_loss: 0.0394 - val_MAE: 0.1543 - val_MAPE: 35.1468 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0049 - MAE: 0.0542 - MAPE: 12.2926 - val_loss: 0.0405 - val_MAE: 0.1528 - val_MAPE: 34.3018 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0046 - MAE: 0.0509 - MAPE: 11.6609 - val_loss: 0.0407 - val_MAE: 0.1575 - val_MAPE: 35.8319 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0038 - MAE: 0.0471 - MAPE: 10.5819 - val_loss: 0.0425 - val_MAE: 0.1554 - val_MAPE: 35.6481 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0033 - MAE: 0.0436 - MAPE: 9.6896 - val_loss: 0.0412 - val_MAE: 0.1563 - val_MAPE: 34.9215 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0031 - MAE: 0.0417 - MAPE: 9.0468 - val_loss: 0.0451 - val_MAE: 0.1593 - val_MAPE: 36.3922 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0028 - MAE: 0.0396 - MAPE: 8.9697 - val_loss: 0.0454 - val_MAE: 0.1609 - val_MAPE: 36.7555 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0028 - MAE: 0.0393 - MAPE: 8.4424 - val_loss: 0.0488 - val_MAE: 0.1644 - val_MAPE: 38.3417 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0026 - MAE: 0.0369 - MAPE: 8.1686 - val_loss: 0.0475 - val_MAE: 0.1626 - val_MAPE: 37.0400 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0023 - MAE: 0.0355 - MAPE: 7.7991 - val_loss: 0.0482 - val_MAE: 0.1667 - val_MAPE: 37.9366 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0020 - MAE: 0.0322 - MAPE: 7.2246 - val_loss: 0.0500 - val_MAE: 0.1652 - val_MAPE: 37.9185 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0019 - MAE: 0.0317 - MAPE: 6.9566 - val_loss: 0.0488 - val_MAE: 0.1638 - val_MAPE: 37.2975 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0017 - MAE: 0.0303 - MAPE: 6.7288 - val_loss: 0.0502 - val_MAE: 0.1666 - val_MAPE: 38.2216 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0017 - MAE: 0.0295 - MAPE: 6.4537 - val_loss: 0.0505 - val_MAE: 0.1672 - val_MAPE: 38.5025 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0015 - MAE: 0.0278 - MAPE: 6.2271 - val_loss: 0.0520 - val_MAE: 0.1686 - val_MAPE: 39.0522 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0015 - MAE: 0.0274 - MAPE: 6.1631 - val_loss: 0.0508 - val_MAE: 0.1681 - val_MAPE: 38.7308 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0015 - MAE: 0.0268 - MAPE: 5.9126 - val_loss: 0.0512 - val_MAE: 0.1685 - val_MAPE: 38.8033 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0014 - MAE: 0.0265 - MAPE: 5.8874 - val_loss: 0.0514 - val_MAE: 0.1687 - val_MAPE: 38.9186 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0014 - MAE: 0.0261 - MAPE: 5.8641 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9828 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0014 - MAE: 0.0259 - MAPE: 5.8249 - val_loss: 0.0514 - val_MAE: 0.1690 - val_MAPE: 38.9536 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0014 - MAE: 0.0256 - MAPE: 5.7374 - val_loss: 0.0513 - val_MAE: 0.1689 - val_MAPE: 38.8439 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0014 - MAE: 0.0256 - MAPE: 5.6820 - val_loss: 0.0513 - val_MAE: 0.1689 - val_MAPE: 38.8826 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0254 - MAPE: 5.6707 - val_loss: 0.0513 - val_MAE: 0.1689 - val_MAPE: 38.8995 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0254 - MAPE: 5.6675 - val_loss: 0.0514 - val_MAE: 0.1689 - val_MAPE: 38.9372 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0253 - MAPE: 5.6501 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9328 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0253 - MAPE: 5.6444 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9482 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0252 - MAPE: 5.6406 - val_loss: 0.0515 - val_MAE: 0.1690 - val_MAPE: 38.9598 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0252 - MAPE: 5.6296 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9615 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0252 - MAPE: 5.6275 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9454 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0252 - MAPE: 5.6208 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9492 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0013 - MAE: 0.0252 - MAPE: 5.6209 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9591 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0252 - MAPE: 5.6190 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9541 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6169 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9571 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6158 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9591 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6146 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9589 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6139 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9602 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6131 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9613 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6127 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9606 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6121 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9609 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6119 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9615 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6116 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9621 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6116 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9621 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6117 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9625 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6114 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9621 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6112 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9621 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6112 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9622 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6112 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9621 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6111 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9621 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6111 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9622 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6111 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9622 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.6111 - val_loss: 0.0515 - val_MAE: 0.1689 - val_MAPE: 38.9622 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 50%|█████     | 2/4 [00:21<00:20, 10.27s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-194-266662638fbf>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "9/9 [==============================] - 2s 55ms/step - loss: 0.0602 - MAE: 0.1945 - MAPE: 44.6694 - val_loss: 0.0590 - val_MAE: 0.2120 - val_MAPE: 35.0489 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0279 - MAE: 0.1304 - MAPE: 30.7807 - val_loss: 0.0511 - val_MAE: 0.1937 - val_MAPE: 34.0391 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0166 - MAE: 0.1039 - MAPE: 22.4774 - val_loss: 0.0453 - val_MAE: 0.1614 - val_MAPE: 31.2773 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0137 - MAE: 0.0922 - MAPE: 23.2775 - val_loss: 0.0427 - val_MAE: 0.1911 - val_MAPE: 30.2014 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0136 - MAE: 0.0946 - MAPE: 20.6792 - val_loss: 0.0386 - val_MAE: 0.1409 - val_MAPE: 28.4472 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0108 - MAE: 0.0815 - MAPE: 17.8314 - val_loss: 0.0285 - val_MAE: 0.1499 - val_MAPE: 25.9040 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0082 - MAE: 0.0727 - MAPE: 17.3367 - val_loss: 0.0285 - val_MAE: 0.1358 - val_MAPE: 25.0961 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0069 - MAE: 0.0640 - MAPE: 14.7781 - val_loss: 0.0268 - val_MAE: 0.1424 - val_MAPE: 24.8027 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0064 - MAE: 0.0633 - MAPE: 14.7640 - val_loss: 0.0273 - val_MAE: 0.1346 - val_MAPE: 24.5051 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0060 - MAE: 0.0587 - MAPE: 12.6363 - val_loss: 0.0262 - val_MAE: 0.1243 - val_MAPE: 23.4651 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0045 - MAE: 0.0518 - MAPE: 11.8143 - val_loss: 0.0254 - val_MAE: 0.1424 - val_MAPE: 24.0237 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0043 - MAE: 0.0492 - MAPE: 11.5550 - val_loss: 0.0233 - val_MAE: 0.1169 - val_MAPE: 22.0470 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0037 - MAE: 0.0457 - MAPE: 10.2737 - val_loss: 0.0232 - val_MAE: 0.1254 - val_MAPE: 22.1531 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0038 - MAE: 0.0441 - MAPE: 10.0627 - val_loss: 0.0233 - val_MAE: 0.1329 - val_MAPE: 22.4193 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0033 - MAE: 0.0421 - MAPE: 9.7972 - val_loss: 0.0223 - val_MAE: 0.1175 - val_MAPE: 21.6271 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 20ms/step - loss: 0.0031 - MAE: 0.0393 - MAPE: 8.3527 - val_loss: 0.0220 - val_MAE: 0.1168 - val_MAPE: 21.3403 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0029 - MAE: 0.0393 - MAPE: 9.4694 - val_loss: 0.0226 - val_MAE: 0.1255 - val_MAPE: 21.8688 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0031 - MAE: 0.0389 - MAPE: 8.4225 - val_loss: 0.0241 - val_MAE: 0.1154 - val_MAPE: 21.9450 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0029 - MAE: 0.0387 - MAPE: 8.5693 - val_loss: 0.0213 - val_MAE: 0.1090 - val_MAPE: 20.6382 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0031 - MAE: 0.0422 - MAPE: 9.8264 - val_loss: 0.0219 - val_MAE: 0.1315 - val_MAPE: 21.9310 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0036 - MAE: 0.0437 - MAPE: 10.2441 - val_loss: 0.0212 - val_MAE: 0.1180 - val_MAPE: 20.9562 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0029 - MAE: 0.0388 - MAPE: 7.9975 - val_loss: 0.0222 - val_MAE: 0.1144 - val_MAPE: 21.3448 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0022 - MAE: 0.0334 - MAPE: 8.0764 - val_loss: 0.0208 - val_MAE: 0.1151 - val_MAPE: 20.6001 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0018 - MAE: 0.0298 - MAPE: 6.8940 - val_loss: 0.0219 - val_MAE: 0.1189 - val_MAPE: 21.2138 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0017 - MAE: 0.0273 - MAPE: 6.1282 - val_loss: 0.0226 - val_MAE: 0.1185 - val_MAPE: 21.6079 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0017 - MAE: 0.0275 - MAPE: 6.2283 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9779 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0015 - MAE: 0.0263 - MAPE: 6.0463 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9574 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0015 - MAE: 0.0259 - MAPE: 5.9259 - val_loss: 0.0216 - val_MAE: 0.1177 - val_MAPE: 20.9872 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0014 - MAE: 0.0255 - MAPE: 5.8135 - val_loss: 0.0216 - val_MAE: 0.1173 - val_MAPE: 20.9331 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0015 - MAE: 0.0255 - MAPE: 5.8186 - val_loss: 0.0217 - val_MAE: 0.1177 - val_MAPE: 21.0410 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0252 - MAPE: 5.7894 - val_loss: 0.0216 - val_MAE: 0.1171 - val_MAPE: 20.9349 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0251 - MAPE: 5.7885 - val_loss: 0.0216 - val_MAE: 0.1174 - val_MAPE: 20.9662 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0251 - MAPE: 5.7694 - val_loss: 0.0216 - val_MAE: 0.1173 - val_MAPE: 20.9307 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0250 - MAPE: 5.7192 - val_loss: 0.0216 - val_MAE: 0.1175 - val_MAPE: 20.9401 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0249 - MAPE: 5.6849 - val_loss: 0.0216 - val_MAE: 0.1175 - val_MAPE: 20.9477 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0249 - MAPE: 5.6888 - val_loss: 0.0216 - val_MAE: 0.1173 - val_MAPE: 20.9235 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.6919 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9325 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.7007 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9334 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.7038 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9280 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.7021 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9333 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.7009 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9395 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.6983 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9409 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.6912 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9436 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0014 - MAE: 0.0248 - MAPE: 5.6844 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9392 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6836 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9391 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6816 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9397 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6808 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9397 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6809 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9400 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6803 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9393 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6804 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9385 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6800 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9389 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6798 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9394 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6796 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9394 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6796 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9394 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 18ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6795 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9394 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6793 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9393 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 17ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6793 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9393 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 14ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6793 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9393 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 16ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6793 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9393 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 19ms/step - loss: 0.0014 - MAE: 0.0247 - MAPE: 5.6793 - val_loss: 0.0216 - val_MAE: 0.1172 - val_MAPE: 20.9393 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 75%|███████▌  | 3/4 [00:33<00:10, 10.98s/it]<ipython-input-194-266662638fbf>:33: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(Final_val_targets)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "processing fold # 3\n",
            "Epoch 1/60\n",
            "9/9 [==============================] - 2s 38ms/step - loss: 0.0814 - MAE: 0.2273 - MAPE: 53.9809 - val_loss: 0.0233 - val_MAE: 0.1324 - val_MAPE: 24.1269 - lr: 0.0010\n",
            "Epoch 2/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0310 - MAE: 0.1445 - MAPE: 34.7169 - val_loss: 0.0201 - val_MAE: 0.1120 - val_MAPE: 20.6599 - lr: 0.0010\n",
            "Epoch 3/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0157 - MAE: 0.1022 - MAPE: 25.2873 - val_loss: 0.0219 - val_MAE: 0.1232 - val_MAPE: 21.1344 - lr: 0.0010\n",
            "Epoch 4/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0132 - MAE: 0.0899 - MAPE: 20.8877 - val_loss: 0.0210 - val_MAE: 0.1057 - val_MAPE: 19.6029 - lr: 0.0010\n",
            "Epoch 5/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0090 - MAE: 0.0762 - MAPE: 17.2859 - val_loss: 0.0233 - val_MAE: 0.1183 - val_MAPE: 21.5531 - lr: 0.0010\n",
            "Epoch 6/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0072 - MAE: 0.0698 - MAPE: 16.2132 - val_loss: 0.0280 - val_MAE: 0.1239 - val_MAPE: 22.7612 - lr: 0.0010\n",
            "Epoch 7/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0054 - MAE: 0.0598 - MAPE: 14.0825 - val_loss: 0.0238 - val_MAE: 0.1247 - val_MAPE: 22.4817 - lr: 0.0010\n",
            "Epoch 8/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0050 - MAE: 0.0561 - MAPE: 12.4866 - val_loss: 0.0265 - val_MAE: 0.1241 - val_MAPE: 22.8072 - lr: 0.0010\n",
            "Epoch 9/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 0.0043 - MAE: 0.0538 - MAPE: 12.0241 - val_loss: 0.0243 - val_MAE: 0.1264 - val_MAPE: 22.9341 - lr: 0.0010\n",
            "Epoch 10/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0032 - MAE: 0.0451 - MAPE: 10.3366 - val_loss: 0.0270 - val_MAE: 0.1257 - val_MAPE: 23.5682 - lr: 0.0010\n",
            "Epoch 11/60\n",
            "9/9 [==============================] - 0s 15ms/step - loss: 0.0030 - MAE: 0.0427 - MAPE: 10.1542 - val_loss: 0.0253 - val_MAE: 0.1283 - val_MAPE: 23.5405 - lr: 0.0010\n",
            "Epoch 12/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0035 - MAE: 0.0439 - MAPE: 9.1301 - val_loss: 0.0273 - val_MAE: 0.1290 - val_MAPE: 24.1631 - lr: 0.0010\n",
            "Epoch 13/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0038 - MAE: 0.0467 - MAPE: 10.0180 - val_loss: 0.0320 - val_MAE: 0.1457 - val_MAPE: 26.5425 - lr: 0.0010\n",
            "Epoch 14/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0028 - MAE: 0.0409 - MAPE: 9.9047 - val_loss: 0.0236 - val_MAE: 0.1222 - val_MAPE: 22.8921 - lr: 0.0010\n",
            "Epoch 15/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0024 - MAE: 0.0372 - MAPE: 7.7523 - val_loss: 0.0298 - val_MAE: 0.1342 - val_MAPE: 25.1213 - lr: 0.0010\n",
            "Epoch 16/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0020 - MAE: 0.0340 - MAPE: 7.8568 - val_loss: 0.0272 - val_MAE: 0.1332 - val_MAPE: 24.5131 - lr: 0.0010\n",
            "Epoch 17/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0018 - MAE: 0.0320 - MAPE: 6.9346 - val_loss: 0.0280 - val_MAE: 0.1326 - val_MAPE: 24.7232 - lr: 0.0010\n",
            "Epoch 18/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0018 - MAE: 0.0334 - MAPE: 7.8892 - val_loss: 0.0306 - val_MAE: 0.1414 - val_MAPE: 25.9480 - lr: 0.0010\n",
            "Epoch 19/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0018 - MAE: 0.0309 - MAPE: 6.2767 - val_loss: 0.0275 - val_MAE: 0.1296 - val_MAPE: 24.3505 - lr: 0.0010\n",
            "Epoch 20/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 0.0015 - MAE: 0.0291 - MAPE: 6.6961 - val_loss: 0.0309 - val_MAE: 0.1416 - val_MAPE: 26.1187 - lr: 0.0010\n",
            "Epoch 21/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 0.0013 - MAE: 0.0275 - MAPE: 6.1014 - val_loss: 0.0317 - val_MAE: 0.1384 - val_MAPE: 25.9113 - lr: 7.7880e-04\n",
            "Epoch 22/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 0.0013 - MAE: 0.0251 - MAPE: 5.2443 - val_loss: 0.0293 - val_MAE: 0.1370 - val_MAPE: 25.3833 - lr: 6.0653e-04\n",
            "Epoch 23/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 0.0011 - MAE: 0.0239 - MAPE: 5.3282 - val_loss: 0.0316 - val_MAE: 0.1411 - val_MAPE: 26.2247 - lr: 4.7237e-04\n",
            "Epoch 24/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 9.8205e-04 - MAE: 0.0226 - MAPE: 5.1533 - val_loss: 0.0309 - val_MAE: 0.1404 - val_MAPE: 26.0460 - lr: 3.6788e-04\n",
            "Epoch 25/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 8.5901e-04 - MAE: 0.0208 - MAPE: 4.4413 - val_loss: 0.0303 - val_MAE: 0.1382 - val_MAPE: 25.7625 - lr: 2.8650e-04\n",
            "Epoch 26/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 8.4572e-04 - MAE: 0.0205 - MAPE: 4.4179 - val_loss: 0.0306 - val_MAE: 0.1387 - val_MAPE: 25.8457 - lr: 2.2313e-04\n",
            "Epoch 27/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 8.0990e-04 - MAE: 0.0203 - MAPE: 4.4648 - val_loss: 0.0307 - val_MAE: 0.1389 - val_MAPE: 25.8743 - lr: 1.7377e-04\n",
            "Epoch 28/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.8503e-04 - MAE: 0.0198 - MAPE: 4.3537 - val_loss: 0.0304 - val_MAE: 0.1387 - val_MAPE: 25.8281 - lr: 1.3534e-04\n",
            "Epoch 29/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.7138e-04 - MAE: 0.0196 - MAPE: 4.3315 - val_loss: 0.0305 - val_MAE: 0.1387 - val_MAPE: 25.8263 - lr: 1.0540e-04\n",
            "Epoch 30/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 7.6110e-04 - MAE: 0.0195 - MAPE: 4.2982 - val_loss: 0.0305 - val_MAE: 0.1387 - val_MAPE: 25.8429 - lr: 8.2085e-05\n",
            "Epoch 31/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.5076e-04 - MAE: 0.0193 - MAPE: 4.2477 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8260 - lr: 6.3928e-05\n",
            "Epoch 32/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.4878e-04 - MAE: 0.0193 - MAPE: 4.2291 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8322 - lr: 4.9787e-05\n",
            "Epoch 33/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.4340e-04 - MAE: 0.0192 - MAPE: 4.2038 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8328 - lr: 3.8774e-05\n",
            "Epoch 34/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.3910e-04 - MAE: 0.0192 - MAPE: 4.1952 - val_loss: 0.0305 - val_MAE: 0.1385 - val_MAPE: 25.8239 - lr: 3.0197e-05\n",
            "Epoch 35/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.3670e-04 - MAE: 0.0192 - MAPE: 4.1952 - val_loss: 0.0305 - val_MAE: 0.1385 - val_MAPE: 25.8159 - lr: 2.3518e-05\n",
            "Epoch 36/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 7.3411e-04 - MAE: 0.0191 - MAPE: 4.1807 - val_loss: 0.0305 - val_MAE: 0.1385 - val_MAPE: 25.8205 - lr: 1.8316e-05\n",
            "Epoch 37/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.3252e-04 - MAE: 0.0191 - MAPE: 4.1786 - val_loss: 0.0305 - val_MAE: 0.1385 - val_MAPE: 25.8259 - lr: 1.4264e-05\n",
            "Epoch 38/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.3200e-04 - MAE: 0.0191 - MAPE: 4.1759 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8295 - lr: 1.1109e-05\n",
            "Epoch 39/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.3191e-04 - MAE: 0.0191 - MAPE: 4.1783 - val_loss: 0.0305 - val_MAE: 0.1385 - val_MAPE: 25.8297 - lr: 8.6517e-06\n",
            "Epoch 40/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.3018e-04 - MAE: 0.0191 - MAPE: 4.1731 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8306 - lr: 6.7379e-06\n",
            "Epoch 41/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.3002e-04 - MAE: 0.0190 - MAPE: 4.1697 - val_loss: 0.0305 - val_MAE: 0.1385 - val_MAPE: 25.8286 - lr: 5.2475e-06\n",
            "Epoch 42/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2935e-04 - MAE: 0.0190 - MAPE: 4.1650 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8300 - lr: 4.0868e-06\n",
            "Epoch 43/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2903e-04 - MAE: 0.0190 - MAPE: 4.1634 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8302 - lr: 3.1828e-06\n",
            "Epoch 44/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.2875e-04 - MAE: 0.0190 - MAPE: 4.1615 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8300 - lr: 2.4788e-06\n",
            "Epoch 45/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.2858e-04 - MAE: 0.0190 - MAPE: 4.1605 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8306 - lr: 1.9305e-06\n",
            "Epoch 46/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2841e-04 - MAE: 0.0190 - MAPE: 4.1595 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8304 - lr: 1.5034e-06\n",
            "Epoch 47/60\n",
            "9/9 [==============================] - 0s 12ms/step - loss: 7.2829e-04 - MAE: 0.0190 - MAPE: 4.1590 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8305 - lr: 1.1709e-06\n",
            "Epoch 48/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2819e-04 - MAE: 0.0190 - MAPE: 4.1592 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8306 - lr: 9.1188e-07\n",
            "Epoch 49/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2811e-04 - MAE: 0.0190 - MAPE: 4.1590 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8305 - lr: 7.1017e-07\n",
            "Epoch 50/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2802e-04 - MAE: 0.0190 - MAPE: 4.1587 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8305 - lr: 5.5308e-07\n",
            "Epoch 51/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2798e-04 - MAE: 0.0190 - MAPE: 4.1582 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8306 - lr: 4.3074e-07\n",
            "Epoch 52/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2796e-04 - MAE: 0.0190 - MAPE: 4.1580 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8306 - lr: 3.3546e-07\n",
            "Epoch 53/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.2792e-04 - MAE: 0.0190 - MAPE: 4.1579 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 2.6126e-07\n",
            "Epoch 54/60\n",
            "9/9 [==============================] - 0s 13ms/step - loss: 7.2790e-04 - MAE: 0.0190 - MAPE: 4.1578 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 2.0347e-07\n",
            "Epoch 55/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2788e-04 - MAE: 0.0190 - MAPE: 4.1578 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8306 - lr: 1.5846e-07\n",
            "Epoch 56/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2788e-04 - MAE: 0.0190 - MAPE: 4.1578 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 1.2341e-07\n",
            "Epoch 57/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2787e-04 - MAE: 0.0190 - MAPE: 4.1578 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 9.6112e-08\n",
            "Epoch 58/60\n",
            "9/9 [==============================] - 0s 9ms/step - loss: 7.2787e-04 - MAE: 0.0190 - MAPE: 4.1578 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 7.4852e-08\n",
            "Epoch 59/60\n",
            "9/9 [==============================] - 0s 10ms/step - loss: 7.2786e-04 - MAE: 0.0190 - MAPE: 4.1577 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 5.8295e-08\n",
            "Epoch 60/60\n",
            "9/9 [==============================] - 0s 11ms/step - loss: 7.2786e-04 - MAE: 0.0190 - MAPE: 4.1577 - val_loss: 0.0305 - val_MAE: 0.1386 - val_MAPE: 25.8307 - lr: 4.5400e-08\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4/4 [00:41<00:00, 10.35s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here I find the averages of the results per season from the four iterations\n",
        "\n"
      ],
      "metadata": {
        "id": "3ojgnePsW1e0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "average_mae_history = [\n",
        "    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]\n",
        "average_loss_history = [\n",
        "    np.mean([x[i] for x in all_loss_histories]) for i in range(num_epochs)]\n",
        "average_Tmae_history = [\n",
        "    np.mean([x[i] for x in all_Tmae_histories]) for i in range(num_epochs)]\n",
        "average_Tloss_history = [\n",
        "    np.mean([x[i] for x in all_Tloss_histories]) for i in range(num_epochs)]\n"
      ],
      "metadata": {
        "id": "NZpOfWv5W2zy"
      },
      "execution_count": 195,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I save them to external text files so I can have them and print out whatever chart I need later\n",
        "\n"
      ],
      "metadata": {
        "id": "5vlhjuf5W6fK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/drive/MyDrive/Thesis/Results/Smooth On Train Real Test/ValMae.txt', \"w\") as file:\n",
        "    file.write(str(average_mae_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Smooth On Train Real Test/ValLoss.txt', \"w\") as file:\n",
        "    file.write(str(average_loss_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Smooth On Train Real Test/TrainMae.txt', \"w\") as file:\n",
        "    file.write(str(average_Tmae_history))\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Smooth On Train Real Test/TrainLoss.txt', \"w\") as file:\n",
        "    file.write(str(average_Tloss_history))\n"
      ],
      "metadata": {
        "id": "3K8M-qSsW67O"
      },
      "execution_count": 196,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I load the list containing the Validation mae to find the appropriate training season\n",
        "\n"
      ],
      "metadata": {
        "id": "9b7Q7Qi6XJVN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/drive/MyDrive/Thesis/Results/Smooth On Train Real Test/ValLoss.txt', \"r\") as file:\n",
        "    average_mae_history = eval(file.readline())\n",
        "with open('/content/drive/MyDrive/Thesis/Results/Full Smoothing/ValLoss.txt', \"r\") as file:\n",
        "    average_mae_history2 = eval(file.readline())\n",
        "with open('/content/drive/MyDrive/Thesis/Results/No Smoothing/ValLoss.txt', \"r\") as file:\n",
        "    average_mae_history3 = eval(file.readline())\n"
      ],
      "metadata": {
        "id": "1GGQvUUJXJ4h"
      },
      "execution_count": 197,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am printing the result\n",
        "\n"
      ],
      "metadata": {
        "id": "euxK_6SzXUKS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def smooth_curve(points, factor=0.4):\n",
        "  smoothed_points = []\n",
        "  for point in points:\n",
        "    if smoothed_points:\n",
        "      previous = smoothed_points[-1]\n",
        "      smoothed_points.append(previous * factor + point * (1 - factor))\n",
        "    else:\n",
        "      smoothed_points.append(point)\n",
        "  return smoothed_points\n",
        "\n",
        "smooth_mae_history = smooth_curve(average_mae_history3[0:])\n",
        "smooth_mae_history2 = smooth_curve(average_mae_history2[0:])\n",
        "smooth_mae_history3 = smooth_curve(average_mae_history[0:])\n",
        "fig = plt.figure()\n",
        "plt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history,label= 'Train Set on Validation Set' )\n",
        "plt.plot(range(1, len(smooth_mae_history3) + 1), smooth_mae_history3,label= 'Smoothed Train Set on Validation Set')\n",
        "plt.plot(range(1, len(smooth_mae_history2) + 1), smooth_mae_history2,label= 'Smoothed Train Set on Smoothed Validation Set')\n",
        "\n",
        "plt.title('Influence of Smoothing')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Validation Mae')\n",
        "plt.legend()\n",
        "#fig.savefig(Project_Path+ '/Data/Validation_RMSE.pdf')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Bc2qQDxPXUq8",
        "outputId": "92868f18-3b82-4f46-f05f-e5082007f379"
      },
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I find what is the best season. That is, the one with the youngest Mae\n",
        "\n"
      ],
      "metadata": {
        "id": "D1eqeLopXaRQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "Min_Mae=min(smooth_mae_history)\n",
        "Best_Epoch=smooth_mae_history.index(Min_Mae)\n",
        "Best_Epoch\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w6ESgjQ_Xavi",
        "outputId": "86362d96-b1f4-465c-9613-db2f57ae95fa"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13"
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now knowing the best training time I train the model and check it with the test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "6Q0FrUzZXfWs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Train.csv',sep=',',index_col=0)\n",
        "test_data=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Test.csv',sep=',',index_col=0)\n",
        "TestDF=Prepare_Test(test_data) #No smoothing\n",
        "TrainDF=Apply_Smoothing(train_data) #Smoothing\n",
        "\n",
        "train_targets=TrainDF['Real_Rate']\n",
        "train_data=TrainDF.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "test_targets=TestDF['Real_Rate']\n",
        "test_data=TestDF.drop(['Real_Rate'], axis=1)\n",
        "\n",
        "test_targets = Normalization(test_targets)\n",
        "train_targets = Normalization(train_targets)\n",
        "\n",
        "Target=test_targets\n",
        "Target.append(train_targets)\n",
        "Bias_Initial_Out=Target.mean()\n",
        "Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "train_data,test_data=Scaller(train_data,test_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZAYgbminXgA9",
        "outputId": "6067181d-f4c0-43cc-9ff4-42ad92fa1934"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-200-1646602a0aca>:16: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  Target.append(train_targets)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I have been training for 26 epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "eslnMierXr6D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a fresh, compiled model.\n",
        "model = Residual_NN(gnn=train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "# Train it on the entirety of the data.\n",
        "model.fit(train_data,train_targets,callbacks=callback,\n",
        "          epochs=26, batch_size=16, verbose=1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zy5g98K5Xskv",
        "outputId": "ae5ec268-e558-4257-9c31-0a5686b62914"
      },
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/26\n",
            "12/12 [==============================] - 7s 20ms/step - loss: 0.0820 - MAE: 0.2174 - MAPE: 49.0967 - lr: 0.0010\n",
            "Epoch 2/26\n",
            "12/12 [==============================] - 0s 17ms/step - loss: 0.0241 - MAE: 0.1251 - MAPE: 28.2854 - lr: 0.0010\n",
            "Epoch 3/26\n",
            "12/12 [==============================] - 0s 16ms/step - loss: 0.0167 - MAE: 0.1054 - MAPE: 23.8541 - lr: 0.0010\n",
            "Epoch 4/26\n",
            "12/12 [==============================] - 0s 14ms/step - loss: 0.0134 - MAE: 0.0913 - MAPE: 21.4374 - lr: 0.0010\n",
            "Epoch 5/26\n",
            "12/12 [==============================] - 0s 13ms/step - loss: 0.0104 - MAE: 0.0804 - MAPE: 17.4935 - lr: 0.0010\n",
            "Epoch 6/26\n",
            "12/12 [==============================] - 0s 17ms/step - loss: 0.0093 - MAE: 0.0724 - MAPE: 17.0050 - lr: 0.0010\n",
            "Epoch 7/26\n",
            "12/12 [==============================] - 0s 12ms/step - loss: 0.0080 - MAE: 0.0717 - MAPE: 16.0407 - lr: 0.0010\n",
            "Epoch 8/26\n",
            "12/12 [==============================] - 0s 12ms/step - loss: 0.0070 - MAE: 0.0664 - MAPE: 15.1673 - lr: 0.0010\n",
            "Epoch 9/26\n",
            "12/12 [==============================] - 0s 14ms/step - loss: 0.0072 - MAE: 0.0673 - MAPE: 15.6781 - lr: 0.0010\n",
            "Epoch 10/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0071 - MAE: 0.0669 - MAPE: 14.7260 - lr: 0.0010\n",
            "Epoch 11/26\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0063 - MAE: 0.0624 - MAPE: 14.2770 - lr: 0.0010\n",
            "Epoch 12/26\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0056 - MAE: 0.0592 - MAPE: 13.4115 - lr: 0.0010\n",
            "Epoch 13/26\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0059 - MAE: 0.0595 - MAPE: 12.9093 - lr: 0.0010\n",
            "Epoch 14/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0071 - MAE: 0.0648 - MAPE: 13.1672 - lr: 0.0010\n",
            "Epoch 15/26\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0080 - MAE: 0.0696 - MAPE: 15.8338 - lr: 0.0010\n",
            "Epoch 16/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0054 - MAE: 0.0581 - MAPE: 12.0211 - lr: 0.0010\n",
            "Epoch 17/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0052 - MAE: 0.0556 - MAPE: 12.6358 - lr: 0.0010\n",
            "Epoch 18/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0042 - MAE: 0.0514 - MAPE: 11.0549 - lr: 0.0010\n",
            "Epoch 19/26\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0036 - MAE: 0.0468 - MAPE: 10.5096 - lr: 0.0010\n",
            "Epoch 20/26\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0035 - MAE: 0.0448 - MAPE: 9.0630 - lr: 0.0010\n",
            "Epoch 21/26\n",
            "12/12 [==============================] - 0s 10ms/step - loss: 0.0047 - MAE: 0.0491 - MAPE: 9.9559 - lr: 7.7880e-04\n",
            "Epoch 22/26\n",
            "12/12 [==============================] - 0s 11ms/step - loss: 0.0041 - MAE: 0.0481 - MAPE: 10.5333 - lr: 6.0653e-04\n",
            "Epoch 23/26\n",
            "12/12 [==============================] - 0s 8ms/step - loss: 0.0035 - MAE: 0.0454 - MAPE: 9.2951 - lr: 4.7237e-04\n",
            "Epoch 24/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0027 - MAE: 0.0390 - MAPE: 8.8055 - lr: 3.6788e-04\n",
            "Epoch 25/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0025 - MAE: 0.0370 - MAPE: 8.0617 - lr: 2.8650e-04\n",
            "Epoch 26/26\n",
            "12/12 [==============================] - 0s 9ms/step - loss: 0.0024 - MAE: 0.0346 - MAPE: 7.4134 - lr: 2.2313e-04\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ca9bf795c90>"
            ]
          },
          "metadata": {},
          "execution_count": 202
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I check with the test-set\n",
        "\n"
      ],
      "metadata": {
        "id": "zSKiU3NbX2QL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_mse_score, test_mae_score, test_mape_score = model.evaluate(test_data, test_targets)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vawzJoEJX4Zw",
        "outputId": "2eadda51-9f6c-480b-d475-11a45e3a20a4"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 374ms/step - loss: 0.1162 - MAE: 0.2569 - MAPE: 33.5076\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I save the model\n",
        "\n"
      ],
      "metadata": {
        "id": "DVnb61NeX6iR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#model.save(Project_Path+ '/DNN_Regressor')\n"
      ],
      "metadata": {
        "id": "4num2H4CX8Js"
      },
      "execution_count": 204,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I print the predictions\n",
        "\n"
      ],
      "metadata": {
        "id": "GqzDeyaEX-NZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_value=model.predict(test_data)\n",
        "true_value=test_targets\n",
        "plt.figure(figsize=(7,7))\n",
        "plt.scatter(true_value, predicted_value, c='crimson')\n",
        "plt.yscale('log')\n",
        "plt.xscale('log')\n",
        "\n",
        "p1 = max(max(predicted_value), max(true_value))\n",
        "p2 = min(min(predicted_value), min(true_value))\n",
        "plt.plot([p1, p2], [p1, p2], 'b-')\n",
        "plt.xlabel('True Values', fontsize=15)\n",
        "plt.ylabel('Predictions', fontsize=15)\n",
        "plt.axis('equal')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "cyIPlzV4YADF",
        "outputId": "4a9f4e8f-c638-4631-b632-ba3adfbe6b14"
      },
      "execution_count": 205,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 471ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/numpy/core/shape_base.py:65: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  ary = asanyarray(ary)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Final Model\n"
      ],
      "metadata": {
        "id": "1qROkTnQYEmC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def scheduler(epoch, lr):\n",
        "    if epoch < 22:\n",
        "        return lr\n",
        "    else:\n",
        "        return lr * tf.math.exp(-0.25)\n",
        "\n",
        "callback = tf.keras.callbacks.LearningRateScheduler(scheduler)\n"
      ],
      "metadata": {
        "id": "KfVEuDIoYFVi"
      },
      "execution_count": 206,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Legal_illegal=pd.read_csv('/content/drive/MyDrive/Thesis/Data/Scan_Data_Reg_2.3.csv',sep=',',index_col=0)\n",
        "TrainDF=Apply_Smoothing(Legal_illegal) #smoothing\n",
        "\n",
        "train_targets=TrainDF['Real_Rate']\n",
        "train_data=TrainDF.drop(['Real_Rate'], axis=1)\n",
        "#train_targets = Normalization(train_targets)\n",
        "\n",
        "Target=train_targets\n",
        "Bias_Initial_Out=Target.mean()\n",
        "Bias_Initializer=tf.keras.initializers.Constant(Bias_Initial_Out)\n",
        "\n",
        "Standar_Scaller = StandardScaler()\n",
        "train_data=Standar_Scaller.fit_transform(train_data)\n",
        "with open('Standar_Scaller.pkl', 'wb') as f:\n",
        "    pickle.dump(Standar_Scaller, f,  protocol=2)\n"
      ],
      "metadata": {
        "id": "gYr_LXb_YMbl"
      },
      "execution_count": 207,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a fresh, compiled model.\n",
        "model = Residual_NN(gnn=train_data.shape[1],Bias_Sigmoid_Initializer=Bias_Initializer)\n",
        "# Train it on the entirety of the data.\n",
        "model.fit(train_data,train_targets,callbacks=callback,\n",
        "          epochs=24, batch_size=16, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CZf46BKeYVsM",
        "outputId": "0f9e85ec-83dd-4289-8393-37fddbb75f84"
      },
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer HeUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotUniform is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/24\n",
            "14/14 [==============================] - 2s 9ms/step - loss: 0.0719 - MAE: 0.2153 - MAPE: 68.7274 - lr: 0.0010\n",
            "Epoch 2/24\n",
            "14/14 [==============================] - 0s 9ms/step - loss: 0.0438 - MAE: 0.1639 - MAPE: 59.2028 - lr: 0.0010\n",
            "Epoch 3/24\n",
            "14/14 [==============================] - 0s 10ms/step - loss: 0.0310 - MAE: 0.1357 - MAPE: 49.9572 - lr: 0.0010\n",
            "Epoch 4/24\n",
            "14/14 [==============================] - 0s 10ms/step - loss: 0.0278 - MAE: 0.1302 - MAPE: 45.3266 - lr: 0.0010\n",
            "Epoch 5/24\n",
            "14/14 [==============================] - 0s 10ms/step - loss: 0.0241 - MAE: 0.1174 - MAPE: 41.2946 - lr: 0.0010\n",
            "Epoch 6/24\n",
            "14/14 [==============================] - 0s 11ms/step - loss: 0.0230 - MAE: 0.1159 - MAPE: 43.8496 - lr: 0.0010\n",
            "Epoch 7/24\n",
            "14/14 [==============================] - 0s 11ms/step - loss: 0.0190 - MAE: 0.1048 - MAPE: 38.9356 - lr: 0.0010\n",
            "Epoch 8/24\n",
            "14/14 [==============================] - 0s 9ms/step - loss: 0.0178 - MAE: 0.1003 - MAPE: 38.0110 - lr: 0.0010\n",
            "Epoch 9/24\n",
            "14/14 [==============================] - 0s 15ms/step - loss: 0.0169 - MAE: 0.0992 - MAPE: 33.8555 - lr: 0.0010\n",
            "Epoch 10/24\n",
            "14/14 [==============================] - 0s 13ms/step - loss: 0.0172 - MAE: 0.0978 - MAPE: 38.6500 - lr: 0.0010\n",
            "Epoch 11/24\n",
            "14/14 [==============================] - 0s 13ms/step - loss: 0.0171 - MAE: 0.0985 - MAPE: 34.1891 - lr: 0.0010\n",
            "Epoch 12/24\n",
            "14/14 [==============================] - 0s 16ms/step - loss: 0.0165 - MAE: 0.0984 - MAPE: 34.4293 - lr: 0.0010\n",
            "Epoch 13/24\n",
            "14/14 [==============================] - 0s 15ms/step - loss: 0.0147 - MAE: 0.0903 - MAPE: 32.1429 - lr: 0.0010\n",
            "Epoch 14/24\n",
            "14/14 [==============================] - 0s 13ms/step - loss: 0.0133 - MAE: 0.0863 - MAPE: 33.3553 - lr: 0.0010\n",
            "Epoch 15/24\n",
            "14/14 [==============================] - 0s 14ms/step - loss: 0.0134 - MAE: 0.0847 - MAPE: 31.3880 - lr: 0.0010\n",
            "Epoch 16/24\n",
            "14/14 [==============================] - 0s 13ms/step - loss: 0.0117 - MAE: 0.0793 - MAPE: 30.2373 - lr: 0.0010\n",
            "Epoch 17/24\n",
            "14/14 [==============================] - 0s 11ms/step - loss: 0.0112 - MAE: 0.0747 - MAPE: 28.1005 - lr: 0.0010\n",
            "Epoch 18/24\n",
            "14/14 [==============================] - 0s 11ms/step - loss: 0.0095 - MAE: 0.0711 - MAPE: 27.4812 - lr: 0.0010\n",
            "Epoch 19/24\n",
            "14/14 [==============================] - 0s 12ms/step - loss: 0.0098 - MAE: 0.0705 - MAPE: 27.1252 - lr: 0.0010\n",
            "Epoch 20/24\n",
            "14/14 [==============================] - 0s 13ms/step - loss: 0.0099 - MAE: 0.0707 - MAPE: 26.8580 - lr: 0.0010\n",
            "Epoch 21/24\n",
            "14/14 [==============================] - 0s 15ms/step - loss: 0.0097 - MAE: 0.0693 - MAPE: 27.8665 - lr: 0.0010\n",
            "Epoch 22/24\n",
            "14/14 [==============================] - 0s 15ms/step - loss: 0.0098 - MAE: 0.0730 - MAPE: 25.9839 - lr: 0.0010\n",
            "Epoch 23/24\n",
            "14/14 [==============================] - 0s 13ms/step - loss: 0.0090 - MAE: 0.0692 - MAPE: 25.8951 - lr: 7.7880e-04\n",
            "Epoch 24/24\n",
            "14/14 [==============================] - 0s 14ms/step - loss: 0.0077 - MAE: 0.0596 - MAPE: 23.7547 - lr: 6.0653e-04\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ca9b48f5960>"
            ]
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# filename = 'finalized_model.sav'\n",
        "# pickle.dump(model, open(filename, 'wb'))"
      ],
      "metadata": {
        "id": "qOaWPjyNYWs6"
      },
      "execution_count": 210,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Weather data is processed in this notebook.**\n",
        "\n",
        "I am using 2 csv files which I downloaded from https://openweathermap.org. The files have hourly value records. The files 'Skg_Wheather_History_1997_2021.csv' are essentially the history of the weather of Thessaloniki for the period 1997 until July 2021. While the file 'Skg_Wheather_History_2021_2022.csv' is the weather history from August 2021 to January 2022.\n",
        "\n"
      ],
      "metadata": {
        "id": "V8oIMfQIYg4d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "Project_Path='Local Path'\n"
      ],
      "metadata": {
        "id": "ed45UbI9Yhns"
      },
      "execution_count": 211,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I read and convert the files as a DataFrame and keep only the columns I need.\n",
        "\n",
        "'dt_iso' is the DateTime of each recording.\n",
        "'temp' is the temperature in degrees Celsius\n",
        "'Humidity' is the hydration expressed in values from 0 to 100\n",
        "In the data there were a few duplicate entries, I deleted them as I will then use the 'dt_iso' column as a key to merge Then I merged the two DataFrames into one.\n",
        "\n"
      ],
      "metadata": {
        "id": "R2yaIHYIYq4s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Weather_Data_Part_1 = pd.read_csv('/content/drive/MyDrive/Thesis/Data/OpenWheather/Skg_Wheather_History_2016_2021.csv', sep=',',low_memory=False)\n",
        "Weather_Data_Part_2 = pd.read_csv('/content/drive/MyDrive/Thesis/Data/OpenWheather/Skg_Wheather_History_2021_2022.csv', sep=',',low_memory=False)\n",
        "\n",
        "Weather_Data_Part_1=Weather_Data_Part_1[[\"dt_iso\", \"temp\",\"humidity\"]]\n",
        "Weather_Data_Part_2=Weather_Data_Part_2[[\"dt_iso\", \"temp\",\"humidity\"]]\n",
        "\n",
        "Weather_Data_Part_1.drop_duplicates(subset =\"dt_iso\",\n",
        "                     keep ='first', inplace = True)\n",
        "Weather_Data_Part_2.drop_duplicates(subset =\"dt_iso\",\n",
        "                     keep ='first', inplace = True)\n",
        "\n",
        "Weather_Data = pd.concat([Weather_Data_Part_1, Weather_Data_Part_2],ignore_index=True)\n"
      ],
      "metadata": {
        "id": "V_R0Fbt7Yrk8"
      },
      "execution_count": 214,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Then I convert the format of the values of column 'dt_iso' from <1979-01-01 00:00:00 +0000 UTC> to <1979-01-01 00:00> and name this new column 'Key'. I am doing this conversion because I will use the 'Key' to merge the weather data with the rest of the data afterwards.\n",
        "\n"
      ],
      "metadata": {
        "id": "dVPx1IHjZdll"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Final_Weather_Data=Weather_Data[[\"dt_iso\", \"temp\",\"humidity\"]]\n",
        "Weather_List=Final_Weather_Data.values.tolist()\n",
        "Dt=[]\n",
        "for i in range (0,len(Weather_List)):\n",
        "    Dt.append(Weather_List[i][0].split(' '))\n",
        "Date_Df = pd.DataFrame(Dt, columns=[\"Date\",\"Time\",\"Np1\",\"Np2\"])\n",
        "\n",
        "Time_List=Date_Df['Time'].values.tolist()\n",
        "Time=[]\n",
        "for i in range (0,len(Time_List)):\n",
        "    String=str(Time_List[i])\n",
        "    X=String[0:5]\n",
        "    Time.append(X)\n",
        "\n",
        "Final_Weather_Data.insert(0, \"Date\", Date_Df['Date'], True)\n",
        "Final_Weather_Data.insert(1, \"Time\", Time, True)\n",
        "Final_Weather_Data=Final_Weather_Data.drop(['dt_iso'], axis=1)\n",
        "\n",
        "Final_Weather_Data['Key']=Final_Weather_Data['Date'].map(str)+ ' ' +Final_Weather_Data['Time'].map(str)\n",
        "Final_Weather_Data=Final_Weather_Data.drop(['Time'], axis=1)\n",
        "Final_Weather_Data=Final_Weather_Data.drop(['Date'], axis=1)\n"
      ],
      "metadata": {
        "id": "kdM3mfaDZeHE"
      },
      "execution_count": 215,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I keep the hourly values of temperature and humidity only for the time I need\n",
        "\n"
      ],
      "metadata": {
        "id": "ZQURY9JQZiOo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Final_Weather_Data = Final_Weather_Data[~(Final_Weather_Data['Key'] < '2017-12-31')]\n",
        "Final_Weather_Data = Final_Weather_Data[~(Final_Weather_Data['Key'] >= '2021-10-02')]\n",
        "Final_Weather_Data=Final_Weather_Data.reset_index()\n",
        "Final_Weather_Data=Final_Weather_Data.drop(['index'], axis=1)\n",
        "\n",
        "Final_Weather_Data['temp']=Final_Weather_Data['temp'].astype(float)\n",
        "Final_Weather_Data['humidity']=Final_Weather_Data['humidity'].astype(float)\n"
      ],
      "metadata": {
        "id": "uYfx3AJQZj7S"
      },
      "execution_count": 216,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I convert the temperature and humidity values so that the values for a particular hour are the 6 hour average. The 6 hours I use to get the average time is the time I have for the previous 5. I then save the Dataframe 'Final_Weather_Data' to use later\n",
        "\n"
      ],
      "metadata": {
        "id": "XA2UnutAZo8e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List=Final_Weather_Data.values.tolist()\n",
        "New_Temp=[]\n",
        "New_Humidity=[]\n",
        "Index_List=[0,1,2,3,4]\n",
        "for i in range(0,len(List)):\n",
        "    Temp_Sum=0\n",
        "    Humidity_Sum=0\n",
        "    Humidity_Sum=0\n",
        "    # For the first 4 hourly values of the DataFrame since I don't know the previous ones\n",
        "    # I leave as is. Also, I don't need them at the specific times given the data\n",
        "    # starts from January 1, 2018\n",
        "    if i in Index_List:\n",
        "        New_Temp.append(List[i][0])\n",
        "        New_Humidity.append(List[i][1])\n",
        "    else:\n",
        "        for j in range (0,6):\n",
        "            Temp_Sum=Temp_Sum+List[i-j][0]\n",
        "            Humidity_Sum=Humidity_Sum+List[i-j][1]\n",
        "\n",
        "        New_Temp.append(Temp_Sum/8)\n",
        "        New_Humidity.append(Humidity_Sum/8)\n",
        "\n",
        "\n",
        "Final_Weather_Data=Final_Weather_Data.drop(['humidity'], axis=1)\n",
        "Final_Weather_Data=Final_Weather_Data.drop(['temp'], axis=1)\n",
        "Final_Weather_Data.insert(1, \"temp\", New_Temp, True)\n",
        "Final_Weather_Data.insert(2, \"humidity\", New_Humidity, True)\n",
        "\n",
        "\n",
        "Final_Weather_Data.to_csv('/content/drive/MyDrive/Thesis/Data/Final_Weather_Data.csv')\n",
        "Final_Weather_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "VjO_aDHPZqyW",
        "outputId": "a1a014a4-5acf-4cc1-8e5f-ab6d9cf630fa"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    Key      temp  humidity\n",
              "0      2017-12-31 00:00   5.96000    49.000\n",
              "1      2017-12-31 01:00   5.78000    45.000\n",
              "2      2017-12-31 02:00   5.51000    45.000\n",
              "3      2017-12-31 03:00   5.31000    43.000\n",
              "4      2017-12-31 04:00   4.57000    52.000\n",
              "...                 ...       ...       ...\n",
              "32899  2021-10-01 19:00  13.73500    49.000\n",
              "32900  2021-10-01 20:00  13.34875    51.125\n",
              "32901  2021-10-01 21:00  13.01375    51.250\n",
              "32902  2021-10-01 22:00  12.75750    50.250\n",
              "32903  2021-10-01 23:00  12.61250    48.500\n",
              "\n",
              "[32904 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8721c1b2-8fd2-4c45-b4a6-bec5ac02bcc2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Key</th>\n",
              "      <th>temp</th>\n",
              "      <th>humidity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2017-12-31 00:00</td>\n",
              "      <td>5.96000</td>\n",
              "      <td>49.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2017-12-31 01:00</td>\n",
              "      <td>5.78000</td>\n",
              "      <td>45.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2017-12-31 02:00</td>\n",
              "      <td>5.51000</td>\n",
              "      <td>45.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2017-12-31 03:00</td>\n",
              "      <td>5.31000</td>\n",
              "      <td>43.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2017-12-31 04:00</td>\n",
              "      <td>4.57000</td>\n",
              "      <td>52.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32899</th>\n",
              "      <td>2021-10-01 19:00</td>\n",
              "      <td>13.73500</td>\n",
              "      <td>49.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32900</th>\n",
              "      <td>2021-10-01 20:00</td>\n",
              "      <td>13.34875</td>\n",
              "      <td>51.125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32901</th>\n",
              "      <td>2021-10-01 21:00</td>\n",
              "      <td>13.01375</td>\n",
              "      <td>51.250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32902</th>\n",
              "      <td>2021-10-01 22:00</td>\n",
              "      <td>12.75750</td>\n",
              "      <td>50.250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32903</th>\n",
              "      <td>2021-10-01 23:00</td>\n",
              "      <td>12.61250</td>\n",
              "      <td>48.500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>32904 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8721c1b2-8fd2-4c45-b4a6-bec5ac02bcc2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8721c1b2-8fd2-4c45-b4a6-bec5ac02bcc2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8721c1b2-8fd2-4c45-b4a6-bec5ac02bcc2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-34089179-0ac4-4883-8264-278328660ff4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34089179-0ac4-4883-8264-278328660ff4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-34089179-0ac4-4883-8264-278328660ff4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 217
        }
      ]
    }
  ]
}